!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
ACKCIADDR	lwip/netif/ppp/ipcp.c	/^#define ACKCIADDR(/;"	d	file:
ACKCICHAP	lwip/netif/ppp/lcp.c	/^#define ACKCICHAP(/;"	d	file:
ACKCICHAR	lwip/netif/ppp/lcp.c	/^#define ACKCICHAR(/;"	d	file:
ACKCIDNS	lwip/netif/ppp/ipcp.c	/^#define ACKCIDNS(/;"	d	file:
ACKCILONG	lwip/netif/ppp/lcp.c	/^#define ACKCILONG(/;"	d	file:
ACKCILQR	lwip/netif/ppp/lcp.c	/^#define ACKCILQR(/;"	d	file:
ACKCISHORT	lwip/netif/ppp/lcp.c	/^#define ACKCISHORT(/;"	d	file:
ACKCIVJ	lwip/netif/ppp/ipcp.c	/^#define ACKCIVJ(/;"	d	file:
ACKCIVOID	lwip/netif/ppp/lcp.c	/^#define ACKCIVOID(/;"	d	file:
ACKRCVD	lwip/netif/ppp/fsm.h	/^#define ACKRCVD	/;"	d
ACKSENT	lwip/netif/ppp/fsm.h	/^#define ACKSENT	/;"	d
ADDCIADDR	lwip/netif/ppp/ipcp.c	/^#define ADDCIADDR(/;"	d	file:
ADDCICHAP	lwip/netif/ppp/lcp.c	/^#define ADDCICHAP(/;"	d	file:
ADDCICHAR	lwip/netif/ppp/lcp.c	/^#define ADDCICHAR(/;"	d	file:
ADDCIDNS	lwip/netif/ppp/ipcp.c	/^#define ADDCIDNS(/;"	d	file:
ADDCILONG	lwip/netif/ppp/lcp.c	/^#define ADDCILONG(/;"	d	file:
ADDCILQR	lwip/netif/ppp/lcp.c	/^#define ADDCILQR(/;"	d	file:
ADDCISHORT	lwip/netif/ppp/lcp.c	/^#define ADDCISHORT(/;"	d	file:
ADDCIVJ	lwip/netif/ppp/ipcp.c	/^#define ADDCIVJ(/;"	d	file:
ADDCIVOID	lwip/netif/ppp/lcp.c	/^#define ADDCIVOID(/;"	d	file:
AF_INET	lwip/include/lwip/sockets.h	/^#define AF_INET /;"	d
AF_UNSPEC	lwip/include/lwip/sockets.h	/^#define AF_UNSPEC /;"	d
ALT	kbd.h	/^#define ALT /;"	d
API_LIB_DEBUG	lwip/include/lwip/opt.h	/^#define API_LIB_DEBUG /;"	d
API_MSG_ACCEPT	lwip/include/lwip/api_msg.h	/^  API_MSG_ACCEPT,$/;"	e	enum:api_msg_type
API_MSG_BIND	lwip/include/lwip/api_msg.h	/^  API_MSG_BIND,$/;"	e	enum:api_msg_type
API_MSG_CLOSE	lwip/include/lwip/api_msg.h	/^  API_MSG_CLOSE,$/;"	e	enum:api_msg_type
API_MSG_CONNECT	lwip/include/lwip/api_msg.h	/^  API_MSG_CONNECT,$/;"	e	enum:api_msg_type
API_MSG_DEBUG	lwip/include/lwip/opt.h	/^#define API_MSG_DEBUG /;"	d
API_MSG_DELCONN	lwip/include/lwip/api_msg.h	/^  API_MSG_DELCONN,$/;"	e	enum:api_msg_type
API_MSG_DISCONNECT	lwip/include/lwip/api_msg.h	/^  API_MSG_DISCONNECT,$/;"	e	enum:api_msg_type
API_MSG_LISTEN	lwip/include/lwip/api_msg.h	/^  API_MSG_LISTEN,$/;"	e	enum:api_msg_type
API_MSG_MAX	lwip/include/lwip/api_msg.h	/^  API_MSG_MAX$/;"	e	enum:api_msg_type
API_MSG_NEWCONN	lwip/include/lwip/api_msg.h	/^  API_MSG_NEWCONN,$/;"	e	enum:api_msg_type
API_MSG_RECV	lwip/include/lwip/api_msg.h	/^  API_MSG_RECV,$/;"	e	enum:api_msg_type
API_MSG_SEND	lwip/include/lwip/api_msg.h	/^  API_MSG_SEND,$/;"	e	enum:api_msg_type
API_MSG_WRITE	lwip/include/lwip/api_msg.h	/^  API_MSG_WRITE,$/;"	e	enum:api_msg_type
ARPH_HWLEN	lwip/netif/etharp.c	/^#define ARPH_HWLEN(/;"	d	file:
ARPH_HWLEN_SET	lwip/netif/etharp.c	/^#define ARPH_HWLEN_SET(/;"	d	file:
ARPH_PROTOLEN	lwip/netif/etharp.c	/^#define ARPH_PROTOLEN(/;"	d	file:
ARPH_PROTOLEN_SET	lwip/netif/etharp.c	/^#define ARPH_PROTOLEN_SET(/;"	d	file:
ARP_INSERT_FLAG	lwip/netif/etharp.c	/^#define ARP_INSERT_FLAG /;"	d	file:
ARP_MAXAGE	lwip/netif/etharp.c	/^#define ARP_MAXAGE /;"	d	file:
ARP_MAXPENDING	lwip/netif/etharp.c	/^#define ARP_MAXPENDING /;"	d	file:
ARP_QUEUEING	lwip/include/lwip/opt.h	/^#define ARP_QUEUEING /;"	d
ARP_QUEUE_FIRST	lwip/include/lwip/opt.h	/^#define ARP_QUEUE_FIRST /;"	d
ARP_REPLY	lwip/netif/etharp.c	/^#define ARP_REPLY /;"	d	file:
ARP_REQUEST	lwip/netif/etharp.c	/^#define ARP_REQUEST /;"	d	file:
ARP_TABLE_SIZE	lwip/include/lwip/opt.h	/^#define ARP_TABLE_SIZE /;"	d
ARP_TMR_INTERVAL	lwip/include/netif/etharp.h	/^#define ARP_TMR_INTERVAL /;"	d
ASSERT	lapic.c	/^  #define ASSERT /;"	d	file:
AUTHDEBUG	lwip/netif/ppp/pppdebug.h	/^#define AUTHDEBUG(/;"	d
AUTH_H	lwip/netif/ppp/auth.h	/^#define AUTH_H$/;"	d
Align	umalloc.c	/^typedef long Align;$/;"	t	file:
BACK	sh.c	/^#define BACK /;"	d	file:
BACKSPACE	console.c	/^#define BACKSPACE /;"	d	file:
BBLOCK	fs.h	/^#define BBLOCK(/;"	d
BCAST	lapic.c	/^  #define BCAST /;"	d	file:
BCMP	lwip/netif/ppp/ppp.h	/^#define BCMP(/;"	d
BCOPY	lwip/netif/ppp/ppp.h	/^#define BCOPY(/;"	d
BIG_ENDIAN	lwip/include/lwip/arch.h	/^#define BIG_ENDIAN /;"	d
BPB	fs.h	/^#define BPB /;"	d
BSIZE	fs.h	/^#define BSIZE /;"	d
BYTE_ORDER	lwip/xv6/lwipopts.h	/^#define BYTE_ORDER /;"	d
BZERO	lwip/netif/ppp/ppp.h	/^#define BZERO(/;"	d
B_BUSY	buf.h	/^#define B_BUSY /;"	d
B_DIRTY	buf.h	/^#define B_DIRTY /;"	d
B_VALID	buf.h	/^#define B_VALID /;"	d
C	console.c	/^#define C(/;"	d	file:
C	kbd.h	/^#define C(/;"	d
CAPSLOCK	kbd.h	/^#define CAPSLOCK /;"	d
CBCP_OPT	lwip/netif/ppp/lcp.h	/^#define CBCP_OPT	/;"	d
CBCP_SUPPORT	lwip/include/lwip/opt.h	/^#define CBCP_SUPPORT /;"	d
CCP_SUPPORT	lwip/include/lwip/opt.h	/^#define CCP_SUPPORT /;"	d
CHAPCS_CLOSED	lwip/netif/ppp/chap.h	/^#define CHAPCS_CLOSED	/;"	d
CHAPCS_INITIAL	lwip/netif/ppp/chap.h	/^#define CHAPCS_INITIAL	/;"	d
CHAPCS_LISTEN	lwip/netif/ppp/chap.h	/^#define CHAPCS_LISTEN	/;"	d
CHAPCS_OPEN	lwip/netif/ppp/chap.h	/^#define CHAPCS_OPEN	/;"	d
CHAPCS_PENDING	lwip/netif/ppp/chap.h	/^#define CHAPCS_PENDING	/;"	d
CHAPCS_RESPONSE	lwip/netif/ppp/chap.h	/^#define CHAPCS_RESPONSE	/;"	d
CHAPDEBUG	lwip/netif/ppp/pppdebug.h	/^#define CHAPDEBUG(/;"	d
CHAPSS_BADAUTH	lwip/netif/ppp/chap.h	/^#define CHAPSS_BADAUTH	/;"	d
CHAPSS_CLOSED	lwip/netif/ppp/chap.h	/^#define CHAPSS_CLOSED	/;"	d
CHAPSS_INITIAL	lwip/netif/ppp/chap.h	/^#define CHAPSS_INITIAL	/;"	d
CHAPSS_INITIAL_CHAL	lwip/netif/ppp/chap.h	/^#define CHAPSS_INITIAL_CHAL	/;"	d
CHAPSS_OPEN	lwip/netif/ppp/chap.h	/^#define CHAPSS_OPEN	/;"	d
CHAPSS_PENDING	lwip/netif/ppp/chap.h	/^#define CHAPSS_PENDING	/;"	d
CHAPSS_RECHALLENGE	lwip/netif/ppp/chap.h	/^#define CHAPSS_RECHALLENGE	/;"	d
CHAP_CHALLENGE	lwip/netif/ppp/chap.h	/^#define CHAP_CHALLENGE	/;"	d
CHAP_DEFTIMEOUT	lwip/include/lwip/opt.h	/^#define CHAP_DEFTIMEOUT /;"	d
CHAP_DEFTRANSMITS	lwip/include/lwip/opt.h	/^#define CHAP_DEFTRANSMITS /;"	d
CHAP_DIGEST_MD5	lwip/netif/ppp/chap.h	/^#define CHAP_DIGEST_MD5	/;"	d
CHAP_FAILURE	lwip/netif/ppp/chap.h	/^#define CHAP_FAILURE /;"	d
CHAP_H	lwip/netif/ppp/chap.h	/^#define CHAP_H$/;"	d
CHAP_HEADERLEN	lwip/netif/ppp/chap.h	/^#define CHAP_HEADERLEN	/;"	d
CHAP_MICROSOFT	lwip/netif/ppp/chap.h	/^#define CHAP_MICROSOFT	/;"	d
CHAP_PEER	lwip/netif/ppp/auth.c	/^#define CHAP_PEER /;"	d	file:
CHAP_RESPONSE	lwip/netif/ppp/chap.h	/^#define CHAP_RESPONSE	/;"	d
CHAP_SUCCESS	lwip/netif/ppp/chap.h	/^#define CHAP_SUCCESS	/;"	d
CHAP_SUPPORT	lwip/include/lwip/opt.h	/^#define CHAP_SUPPORT /;"	d
CHAP_WITHPEER	lwip/netif/ppp/auth.c	/^#define CHAP_WITHPEER /;"	d	file:
CHAR	console.c	/^    CHAR,$/;"	e	enum:fmt_types	file:
CHPMS_H	lwip/netif/ppp/chpms.h	/^#define CHPMS_H$/;"	d
CILEN_ADDR	lwip/netif/ppp/ipcp.c	/^#define CILEN_ADDR	/;"	d	file:
CILEN_ADDRS	lwip/netif/ppp/ipcp.c	/^#define CILEN_ADDRS	/;"	d	file:
CILEN_CBCP	lwip/netif/ppp/lcp.c	/^#define CILEN_CBCP	/;"	d	file:
CILEN_CHAP	lwip/netif/ppp/lcp.c	/^#define CILEN_CHAP	/;"	d	file:
CILEN_CHAR	lwip/netif/ppp/lcp.c	/^#define CILEN_CHAR	/;"	d	file:
CILEN_COMPRESS	lwip/netif/ppp/ipcp.c	/^#define CILEN_COMPRESS	/;"	d	file:
CILEN_LONG	lwip/netif/ppp/lcp.c	/^#define CILEN_LONG	/;"	d	file:
CILEN_LQR	lwip/netif/ppp/lcp.c	/^#define CILEN_LQR	/;"	d	file:
CILEN_SHORT	lwip/netif/ppp/lcp.c	/^#define CILEN_SHORT	/;"	d	file:
CILEN_VJ	lwip/netif/ppp/ipcp.c	/^#define CILEN_VJ	/;"	d	file:
CILEN_VOID	lwip/netif/ppp/ipcp.c	/^#define CILEN_VOID	/;"	d	file:
CILEN_VOID	lwip/netif/ppp/lcp.c	/^#define CILEN_VOID	/;"	d	file:
CI_ACCOMPRESSION	lwip/netif/ppp/lcp.h	/^#define CI_ACCOMPRESSION /;"	d
CI_ADDR	lwip/netif/ppp/ipcp.h	/^#define	CI_ADDR	/;"	d
CI_ADDRS	lwip/netif/ppp/ipcp.h	/^#define CI_ADDRS	/;"	d
CI_ASYNCMAP	lwip/netif/ppp/lcp.h	/^#define CI_ASYNCMAP	/;"	d
CI_AUTHTYPE	lwip/netif/ppp/lcp.h	/^#define CI_AUTHTYPE	/;"	d
CI_CALLBACK	lwip/netif/ppp/lcp.h	/^#define CI_CALLBACK	/;"	d
CI_COMPRESSTYPE	lwip/netif/ppp/ipcp.h	/^#define CI_COMPRESSTYPE	/;"	d
CI_EPDISC	lwip/netif/ppp/lcp.h	/^#define CI_EPDISC	/;"	d
CI_MAGICNUMBER	lwip/netif/ppp/lcp.h	/^#define CI_MAGICNUMBER	/;"	d
CI_MRRU	lwip/netif/ppp/lcp.h	/^#define CI_MRRU	/;"	d
CI_MRU	lwip/netif/ppp/lcp.h	/^#define CI_MRU	/;"	d
CI_MS_DNS1	lwip/netif/ppp/ipcp.h	/^#define CI_MS_DNS1	/;"	d
CI_MS_DNS2	lwip/netif/ppp/ipcp.h	/^#define CI_MS_DNS2	/;"	d
CI_MS_WINS1	lwip/netif/ppp/ipcp.h	/^#define CI_MS_WINS1	/;"	d
CI_MS_WINS2	lwip/netif/ppp/ipcp.h	/^#define CI_MS_WINS2	/;"	d
CI_PCOMPRESSION	lwip/netif/ppp/lcp.h	/^#define CI_PCOMPRESSION	/;"	d
CI_QUALITY	lwip/netif/ppp/lcp.h	/^#define CI_QUALITY	/;"	d
CI_SSNHF	lwip/netif/ppp/lcp.h	/^#define CI_SSNHF	/;"	d
CLOSED	lwip/include/lwip/tcp.h	/^  CLOSED      = 0,$/;"	e	enum:tcp_state
CLOSED	lwip/netif/ppp/fsm.h	/^#define CLOSED	/;"	d
CLOSE_WAIT	lwip/include/lwip/tcp.h	/^  CLOSE_WAIT  = 7,$/;"	e	enum:tcp_state
CLOSING	lwip/include/lwip/tcp.h	/^  CLOSING     = 8,$/;"	e	enum:tcp_state
CLOSING	lwip/netif/ppp/fsm.h	/^#define CLOSING	/;"	d
CODENAME	lwip/netif/ppp/ipcp.c	/^#define CODENAME(/;"	d	file:
CODENAME	lwip/netif/ppp/lcp.c	/^#define CODENAME(/;"	d	file:
CODEREJ	lwip/netif/ppp/fsm.h	/^#define CODEREJ	/;"	d
CONFACK	lwip/netif/ppp/fsm.h	/^#define CONFACK	/;"	d
CONFNAK	lwip/netif/ppp/fsm.h	/^#define CONFNAK	/;"	d
CONFREJ	lwip/netif/ppp/fsm.h	/^#define CONFREJ	/;"	d
CONFREQ	lwip/netif/ppp/fsm.h	/^#define CONFREQ	/;"	d
CONSOLE	dev.h	/^#define CONSOLE /;"	d
CRTPORT	console.c	/^#define CRTPORT /;"	d	file:
CTL	kbd.h	/^#define CTL /;"	d
CUC_DUMP	e100.h	/^#define CUC_DUMP /;"	d
CUC_DUMP_RESET	e100.h	/^#define CUC_DUMP_RESET /;"	d
CUC_LOAD_BASE	e100.h	/^#define CUC_LOAD_BASE /;"	d
CUC_LOAD_DC_ADDR	e100.h	/^#define CUC_LOAD_DC_ADDR /;"	d
CUC_NOP	e100.h	/^#define CUC_NOP /;"	d
CUC_RESUME	e100.h	/^#define CUC_RESUME /;"	d
CUC_START	e100.h	/^#define CUC_START /;"	d
CUC_STAT_RESUME	e100.h	/^#define CUC_STAT_RESUME /;"	d
CUS_HQP	e100.h	/^#define CUS_HQP /;"	d
CUS_IDLE	e100.h	/^#define CUS_IDLE /;"	d
CUS_LPQ	e100.h	/^#define CUS_LPQ /;"	d
CUS_SUSPENDED	e100.h	/^#define CUS_SUSPENDED /;"	d
ChallengeResponse	lwip/netif/ppp/chpms.c	/^static void ChallengeResponse($/;"	f	file:	signature:( u_char *challenge, u_char *pwHash, u_char *response )
ChallengeResponse	lwip/netif/ppp/chpms.c	/^static void ChallengeResponse($/;"	p	file:	signature:( u_char *challenge, u_char *pwHash, u_char *response )
ChapAuthPeer	lwip/netif/ppp/chap.c	/^void ChapAuthPeer(int unit, char *our_name, int digest)$/;"	f	signature:(int unit, char *our_name, int digest)
ChapAuthPeer	lwip/netif/ppp/chap.h	/^void ChapAuthPeer (int, char *, int);$/;"	p	signature:(int, char *, int)
ChapAuthWithPeer	lwip/netif/ppp/chap.c	/^void ChapAuthWithPeer(int unit, char *our_name, int digest)$/;"	f	signature:(int unit, char *our_name, int digest)
ChapAuthWithPeer	lwip/netif/ppp/chap.h	/^void ChapAuthWithPeer (int, char *, int);$/;"	p	signature:(int, char *, int)
ChapChallengeTimeout	lwip/netif/ppp/chap.c	/^static void ChapChallengeTimeout (void *);$/;"	p	file:	signature:(void *)
ChapChallengeTimeout	lwip/netif/ppp/chap.c	/^static void ChapChallengeTimeout(void *arg)$/;"	f	file:	signature:(void *arg)
ChapCodenames	lwip/netif/ppp/chap.c	/^static char *ChapCodenames[] = {$/;"	v	file:
ChapGenChallenge	lwip/netif/ppp/chap.c	/^static void ChapGenChallenge (chap_state *);$/;"	p	file:	signature:(chap_state *)
ChapGenChallenge	lwip/netif/ppp/chap.c	/^static void ChapGenChallenge(chap_state *cstate)$/;"	f	file:	signature:(chap_state *cstate)
ChapInit	lwip/netif/ppp/chap.c	/^static void ChapInit (int);$/;"	p	file:	signature:(int)
ChapInit	lwip/netif/ppp/chap.c	/^static void ChapInit(int unit)$/;"	f	file:	signature:(int unit)
ChapInput	lwip/netif/ppp/chap.c	/^static void ChapInput (int, u_char *, int);$/;"	p	file:	signature:(int, u_char *, int)
ChapInput	lwip/netif/ppp/chap.c	/^static void ChapInput(int unit, u_char *inpacket, int packet_len)$/;"	f	file:	signature:(int unit, u_char *inpacket, int packet_len)
ChapLowerDown	lwip/netif/ppp/chap.c	/^static void ChapLowerDown (int);$/;"	p	file:	signature:(int)
ChapLowerDown	lwip/netif/ppp/chap.c	/^static void ChapLowerDown(int unit)$/;"	f	file:	signature:(int unit)
ChapLowerUp	lwip/netif/ppp/chap.c	/^static void ChapLowerUp (int);$/;"	p	file:	signature:(int)
ChapLowerUp	lwip/netif/ppp/chap.c	/^static void ChapLowerUp(int unit)$/;"	f	file:	signature:(int unit)
ChapMS	lwip/netif/ppp/chpms.c	/^void ChapMS($/;"	f	signature:( chap_state *cstate, char *rchallenge, int rchallenge_len, char *secret, int secret_len )
ChapMS	lwip/netif/ppp/chpms.h	/^void ChapMS (chap_state *, char *, int, char *, int);$/;"	p	signature:(chap_state *, char *, int, char *, int)
ChapMS_LANMan	lwip/netif/ppp/chpms.c	/^static ChapMS_LANMan($/;"	f	file:	signature:( char *rchallenge, int rchallenge_len, char *secret, int secret_len, MS_ChapResponse *response )
ChapMS_NT	lwip/netif/ppp/chpms.c	/^static void ChapMS_NT($/;"	f	file:	signature:( char *rchallenge, int rchallenge_len, char *secret, int secret_len, MS_ChapResponse *response )
ChapMS_NT	lwip/netif/ppp/chpms.c	/^static void ChapMS_NT($/;"	p	file:	signature:( char *rchallenge, int rchallenge_len, char *secret, int secret_len, MS_ChapResponse *response )
ChapPrintPkt	lwip/netif/ppp/chap.c	/^static int  ChapPrintPkt (u_char *, int,$/;"	p	file:	signature:(u_char *, int, void (*) (void *, char *, ...), void *)
ChapPrintPkt	lwip/netif/ppp/chap.c	/^static int ChapPrintPkt($/;"	f	file:	signature:( u_char *p, int plen, void (*printer) (void *, char *, ...), void *arg )
ChapProtocolReject	lwip/netif/ppp/chap.c	/^static void ChapProtocolReject (int);$/;"	p	file:	signature:(int)
ChapProtocolReject	lwip/netif/ppp/chap.c	/^static void ChapProtocolReject(int unit)$/;"	f	file:	signature:(int unit)
ChapReceiveChallenge	lwip/netif/ppp/chap.c	/^static void ChapReceiveChallenge (chap_state *, u_char *, int, int);$/;"	p	file:	signature:(chap_state *, u_char *, int, int)
ChapReceiveChallenge	lwip/netif/ppp/chap.c	/^static void ChapReceiveChallenge(chap_state *cstate, u_char *inp, int id, int len)$/;"	f	file:	signature:(chap_state *cstate, u_char *inp, int id, int len)
ChapReceiveFailure	lwip/netif/ppp/chap.c	/^static void ChapReceiveFailure(chap_state *cstate, u_char *inp, u_char id, int len)$/;"	f	file:	signature:(chap_state *cstate, u_char *inp, u_char id, int len)
ChapReceiveFailure	lwip/netif/ppp/chap.c	/^static void ChapReceiveFailure(chap_state *cstate, u_char *inp, u_char id, int len);$/;"	p	file:	signature:(chap_state *cstate, u_char *inp, u_char id, int len)
ChapReceiveResponse	lwip/netif/ppp/chap.c	/^static void ChapReceiveResponse (chap_state *, u_char *, int, int);$/;"	p	file:	signature:(chap_state *, u_char *, int, int)
ChapReceiveResponse	lwip/netif/ppp/chap.c	/^static void ChapReceiveResponse(chap_state *cstate, u_char *inp, int id, int len)$/;"	f	file:	signature:(chap_state *cstate, u_char *inp, int id, int len)
ChapReceiveSuccess	lwip/netif/ppp/chap.c	/^static void ChapReceiveSuccess(chap_state *cstate, u_char *inp, u_char id, int len)$/;"	f	file:	signature:(chap_state *cstate, u_char *inp, u_char id, int len)
ChapReceiveSuccess	lwip/netif/ppp/chap.c	/^static void ChapReceiveSuccess(chap_state *cstate, u_char *inp, u_char id, int len);$/;"	p	file:	signature:(chap_state *cstate, u_char *inp, u_char id, int len)
ChapRechallenge	lwip/netif/ppp/chap.c	/^static void ChapRechallenge (void *);$/;"	p	file:	signature:(void *)
ChapRechallenge	lwip/netif/ppp/chap.c	/^static void ChapRechallenge(void *arg)$/;"	f	file:	signature:(void *arg)
ChapResponseTimeout	lwip/netif/ppp/chap.c	/^static void ChapResponseTimeout (void *);$/;"	p	file:	signature:(void *)
ChapResponseTimeout	lwip/netif/ppp/chap.c	/^static void ChapResponseTimeout(void *arg)$/;"	f	file:	signature:(void *arg)
ChapSendChallenge	lwip/netif/ppp/chap.c	/^static void ChapSendChallenge (chap_state *);$/;"	p	file:	signature:(chap_state *)
ChapSendChallenge	lwip/netif/ppp/chap.c	/^static void ChapSendChallenge(chap_state *cstate)$/;"	f	file:	signature:(chap_state *cstate)
ChapSendResponse	lwip/netif/ppp/chap.c	/^static void ChapSendResponse (chap_state *);$/;"	p	file:	signature:(chap_state *)
ChapSendResponse	lwip/netif/ppp/chap.c	/^static void ChapSendResponse(chap_state *cstate)$/;"	f	file:	signature:(chap_state *cstate)
ChapSendStatus	lwip/netif/ppp/chap.c	/^static void ChapSendStatus (chap_state *, int);$/;"	p	file:	signature:(chap_state *, int)
ChapSendStatus	lwip/netif/ppp/chap.c	/^static void ChapSendStatus(chap_state *cstate, int code)$/;"	f	file:	signature:(chap_state *cstate, int code)
Collapse	lwip/netif/ppp/chpms.c	/^static void	Collapse (u_char *, u_char *);$/;"	p	file:	signature:(u_char *, u_char *)
Collapse	lwip/netif/ppp/chpms.c	/^static void Collapse(u_char *in, u_char *out)$/;"	f	file:	signature:(u_char *in, u_char *out)
DBG_FRESH	lwip/include/lwip/debug.h	/^#define DBG_FRESH /;"	d
DBG_FULL	lwip/xv6/lwipopts.h	/^#define DBG_FULL /;"	d
DBG_HALT	lwip/include/lwip/debug.h	/^#define DBG_HALT /;"	d
DBG_LEVEL_OFF	lwip/include/lwip/debug.h	/^#define DBG_LEVEL_OFF /;"	d
DBG_LEVEL_SERIOUS	lwip/include/lwip/debug.h	/^#define DBG_LEVEL_SERIOUS /;"	d
DBG_LEVEL_SEVERE	lwip/include/lwip/debug.h	/^#define DBG_LEVEL_SEVERE /;"	d
DBG_LEVEL_WARNING	lwip/include/lwip/debug.h	/^#define DBG_LEVEL_WARNING /;"	d
DBG_MASK_LEVEL	lwip/include/lwip/debug.h	/^#define DBG_MASK_LEVEL /;"	d
DBG_MIN_LEVEL	lwip/include/lwip/opt.h	/^#define DBG_MIN_LEVEL /;"	d
DBG_OFF	lwip/include/lwip/debug.h	/^#define DBG_OFF /;"	d
DBG_ON	lwip/include/lwip/debug.h	/^#define DBG_ON /;"	d
DBG_STATE	lwip/include/lwip/debug.h	/^#define DBG_STATE /;"	d
DBG_TRACE	lwip/include/lwip/debug.h	/^#define DBG_TRACE /;"	d
DBG_TYPES_ON	lwip/include/lwip/opt.h	/^#define DBG_TYPES_ON /;"	d
DBG_TYPES_ON	lwip/xv6/lwipopts.h	/^#define DBG_TYPES_ON /;"	d
DECODEL	lwip/netif/ppp/vj.c	/^#define DECODEL(/;"	d	file:
DECODES	lwip/netif/ppp/vj.c	/^#define DECODES(/;"	d	file:
DECODEU	lwip/netif/ppp/vj.c	/^#define DECODEU(/;"	d	file:
DECPTR	lwip/netif/ppp/ppp.h	/^#define DECPTR(/;"	d
DEC_PBUF_STATS	lwip/core/pbuf.c	/^#define DEC_PBUF_STATS /;"	d	file:
DEC_PBUF_STATS	lwip/core/pbuf.c	/^#define DEC_PBUF_STATS$/;"	d	file:
DEFAULT_THREAD_PRIO	lwip/include/lwip/opt.h	/^#define DEFAULT_THREAD_PRIO /;"	d
DEFLOOPBACKFAIL	lwip/netif/ppp/lcp.h	/^#define DEFLOOPBACKFAIL	/;"	d
DELIVS	lapic.c	/^  #define DELIVS /;"	d	file:
DHCP_ACK	lwip/include/lwip/dhcp.h	/^#define DHCP_ACK /;"	d
DHCP_BACKING_OFF	lwip/include/lwip/dhcp.h	/^#define DHCP_BACKING_OFF /;"	d
DHCP_BOOTREPLY	lwip/include/lwip/dhcp.h	/^#define DHCP_BOOTREPLY /;"	d
DHCP_BOOTREQUEST	lwip/include/lwip/dhcp.h	/^#define DHCP_BOOTREQUEST /;"	d
DHCP_BOUND	lwip/include/lwip/dhcp.h	/^#define DHCP_BOUND /;"	d
DHCP_BROADCAST_FLAG	lwip/include/lwip/dhcp.h	/^#define DHCP_BROADCAST_FLAG /;"	d
DHCP_BROADCAST_MASK	lwip/include/lwip/dhcp.h	/^#define DHCP_BROADCAST_MASK /;"	d
DHCP_CHADDR_LEN	lwip/include/lwip/dhcp.h	/^#define DHCP_CHADDR_LEN /;"	d
DHCP_CHADDR_OFS	lwip/include/lwip/dhcp.h	/^  #define DHCP_CHADDR_OFS /;"	d
DHCP_CHECKING	lwip/include/lwip/dhcp.h	/^#define DHCP_CHECKING /;"	d
DHCP_CIADDR_OFS	lwip/include/lwip/dhcp.h	/^  #define DHCP_CIADDR_OFS /;"	d
DHCP_CLIENT_PORT	lwip/include/lwip/dhcp.h	/^#define DHCP_CLIENT_PORT /;"	d
DHCP_COARSE_TIMER_SECS	lwip/include/lwip/dhcp.h	/^#define DHCP_COARSE_TIMER_SECS /;"	d
DHCP_COOKIE_OFS	lwip/include/lwip/dhcp.h	/^#define DHCP_COOKIE_OFS /;"	d
DHCP_DEBUG	lwip/include/lwip/opt.h	/^#define DHCP_DEBUG /;"	d
DHCP_DECLINE	lwip/include/lwip/dhcp.h	/^#define DHCP_DECLINE /;"	d
DHCP_DISCOVER	lwip/include/lwip/dhcp.h	/^#define DHCP_DISCOVER /;"	d
DHCP_DOES_ARP_CHECK	lwip/include/lwip/opt.h	/^#define DHCP_DOES_ARP_CHECK /;"	d
DHCP_FILE_LEN	lwip/include/lwip/dhcp.h	/^#define DHCP_FILE_LEN /;"	d
DHCP_FILE_OFS	lwip/include/lwip/dhcp.h	/^  #define DHCP_FILE_OFS /;"	d
DHCP_FINE_TIMER_MSECS	lwip/include/lwip/dhcp.h	/^#define DHCP_FINE_TIMER_MSECS /;"	d
DHCP_FLAGS_OFS	lwip/include/lwip/dhcp.h	/^  #define DHCP_FLAGS_OFS /;"	d
DHCP_GIADDR_OFS	lwip/include/lwip/dhcp.h	/^  #define DHCP_GIADDR_OFS /;"	d
DHCP_HLEN_ETH	lwip/include/lwip/dhcp.h	/^#define DHCP_HLEN_ETH /;"	d
DHCP_HLEN_OFS	lwip/include/lwip/dhcp.h	/^  #define DHCP_HLEN_OFS /;"	d
DHCP_HOPS_OFS	lwip/include/lwip/dhcp.h	/^  #define DHCP_HOPS_OFS /;"	d
DHCP_HTYPE_ETH	lwip/include/lwip/dhcp.h	/^#define DHCP_HTYPE_ETH /;"	d
DHCP_HTYPE_OFS	lwip/include/lwip/dhcp.h	/^  #define DHCP_HTYPE_OFS /;"	d
DHCP_INFORM	lwip/include/lwip/dhcp.h	/^#define DHCP_INFORM /;"	d
DHCP_INFORMING	lwip/include/lwip/dhcp.h	/^#define DHCP_INFORMING /;"	d
DHCP_INIT	lwip/include/lwip/dhcp.h	/^#define DHCP_INIT /;"	d
DHCP_MIN_OPTIONS_LEN	lwip/include/lwip/dhcp.h	/^#define DHCP_MIN_OPTIONS_LEN /;"	d
DHCP_MSG_LEN	lwip/include/lwip/dhcp.h	/^#define DHCP_MSG_LEN /;"	d
DHCP_MSG_OFS	lwip/include/lwip/dhcp.h	/^#define DHCP_MSG_OFS /;"	d
DHCP_NAK	lwip/include/lwip/dhcp.h	/^#define DHCP_NAK /;"	d
DHCP_OFF	lwip/include/lwip/dhcp.h	/^#define DHCP_OFF /;"	d
DHCP_OFFER	lwip/include/lwip/dhcp.h	/^#define DHCP_OFFER /;"	d
DHCP_OPTIONS_LEN	lwip/include/lwip/dhcp.h	/^#  define DHCP_OPTIONS_LEN /;"	d
DHCP_OPTIONS_OFS	lwip/include/lwip/dhcp.h	/^#define DHCP_OPTIONS_OFS /;"	d
DHCP_OPTION_BOOTFILE	lwip/include/lwip/dhcp.h	/^#define DHCP_OPTION_BOOTFILE /;"	d
DHCP_OPTION_BROADCAST	lwip/include/lwip/dhcp.h	/^#define DHCP_OPTION_BROADCAST /;"	d
DHCP_OPTION_CLIENT_ID	lwip/include/lwip/dhcp.h	/^#define DHCP_OPTION_CLIENT_ID /;"	d
DHCP_OPTION_END	lwip/include/lwip/dhcp.h	/^#define DHCP_OPTION_END /;"	d
DHCP_OPTION_HOSTNAME	lwip/include/lwip/dhcp.h	/^#define DHCP_OPTION_HOSTNAME /;"	d
DHCP_OPTION_IP_TTL	lwip/include/lwip/dhcp.h	/^#define DHCP_OPTION_IP_TTL /;"	d
DHCP_OPTION_LEASE_TIME	lwip/include/lwip/dhcp.h	/^#define DHCP_OPTION_LEASE_TIME /;"	d
DHCP_OPTION_MAX_MSG_SIZE	lwip/include/lwip/dhcp.h	/^#define DHCP_OPTION_MAX_MSG_SIZE /;"	d
DHCP_OPTION_MAX_MSG_SIZE_LEN	lwip/include/lwip/dhcp.h	/^#define DHCP_OPTION_MAX_MSG_SIZE_LEN /;"	d
DHCP_OPTION_MESSAGE_TYPE	lwip/include/lwip/dhcp.h	/^#define DHCP_OPTION_MESSAGE_TYPE /;"	d
DHCP_OPTION_MESSAGE_TYPE_LEN	lwip/include/lwip/dhcp.h	/^#define DHCP_OPTION_MESSAGE_TYPE_LEN /;"	d
DHCP_OPTION_MTU	lwip/include/lwip/dhcp.h	/^#define DHCP_OPTION_MTU /;"	d
DHCP_OPTION_OVERLOAD	lwip/include/lwip/dhcp.h	/^#define DHCP_OPTION_OVERLOAD /;"	d
DHCP_OPTION_PAD	lwip/include/lwip/dhcp.h	/^#define DHCP_OPTION_PAD /;"	d
DHCP_OPTION_PARAMETER_REQUEST_LIST	lwip/include/lwip/dhcp.h	/^#define DHCP_OPTION_PARAMETER_REQUEST_LIST /;"	d
DHCP_OPTION_REQUESTED_IP	lwip/include/lwip/dhcp.h	/^#define DHCP_OPTION_REQUESTED_IP /;"	d
DHCP_OPTION_ROUTER	lwip/include/lwip/dhcp.h	/^#define DHCP_OPTION_ROUTER /;"	d
DHCP_OPTION_SERVER_ID	lwip/include/lwip/dhcp.h	/^#define DHCP_OPTION_SERVER_ID /;"	d
DHCP_OPTION_SUBNET_MASK	lwip/include/lwip/dhcp.h	/^#define DHCP_OPTION_SUBNET_MASK /;"	d
DHCP_OPTION_T1	lwip/include/lwip/dhcp.h	/^#define DHCP_OPTION_T1 /;"	d
DHCP_OPTION_T2	lwip/include/lwip/dhcp.h	/^#define DHCP_OPTION_T2 /;"	d
DHCP_OPTION_TCP_TTL	lwip/include/lwip/dhcp.h	/^#define DHCP_OPTION_TCP_TTL /;"	d
DHCP_OPTION_TFTP_SERVERNAME	lwip/include/lwip/dhcp.h	/^#define DHCP_OPTION_TFTP_SERVERNAME /;"	d
DHCP_OP_OFS	lwip/include/lwip/dhcp.h	/^  #define DHCP_OP_OFS /;"	d
DHCP_OVERLOAD_FILE	lwip/include/lwip/dhcp.h	/^#define DHCP_OVERLOAD_FILE /;"	d
DHCP_OVERLOAD_NONE	lwip/include/lwip/dhcp.h	/^#define DHCP_OVERLOAD_NONE /;"	d
DHCP_OVERLOAD_SNAME	lwip/include/lwip/dhcp.h	/^#define DHCP_OVERLOAD_SNAME /;"	d
DHCP_OVERLOAD_SNAME_FILE	lwip/include/lwip/dhcp.h	/^#define DHCP_OVERLOAD_SNAME_FILE /;"	d
DHCP_PERMANENT	lwip/include/lwip/dhcp.h	/^#define DHCP_PERMANENT /;"	d
DHCP_REBINDING	lwip/include/lwip/dhcp.h	/^#define DHCP_REBINDING /;"	d
DHCP_REBOOTING	lwip/include/lwip/dhcp.h	/^#define DHCP_REBOOTING /;"	d
DHCP_RELEASE	lwip/include/lwip/dhcp.h	/^#define DHCP_RELEASE /;"	d
DHCP_RENEWING	lwip/include/lwip/dhcp.h	/^#define DHCP_RENEWING /;"	d
DHCP_REQUEST	lwip/include/lwip/dhcp.h	/^#define DHCP_REQUEST /;"	d
DHCP_REQUESTING	lwip/include/lwip/dhcp.h	/^#define DHCP_REQUESTING /;"	d
DHCP_SECS_OFS	lwip/include/lwip/dhcp.h	/^  #define DHCP_SECS_OFS /;"	d
DHCP_SELECTING	lwip/include/lwip/dhcp.h	/^#define DHCP_SELECTING /;"	d
DHCP_SERVER_PORT	lwip/include/lwip/dhcp.h	/^#define DHCP_SERVER_PORT /;"	d
DHCP_SIADDR_OFS	lwip/include/lwip/dhcp.h	/^  #define DHCP_SIADDR_OFS /;"	d
DHCP_SNAME_LEN	lwip/include/lwip/dhcp.h	/^#define DHCP_SNAME_LEN /;"	d
DHCP_SNAME_OFS	lwip/include/lwip/dhcp.h	/^  #define DHCP_SNAME_OFS /;"	d
DHCP_XID_OFS	lwip/include/lwip/dhcp.h	/^  #define DHCP_XID_OFS /;"	d
DHCP_YIADDR_OFS	lwip/include/lwip/dhcp.h	/^  #define DHCP_YIADDR_OFS /;"	d
DIRSIZ	fs.h	/^#define DIRSIZ /;"	d
DISCREQ	lwip/netif/ppp/lcp.h	/^#define DISCREQ	/;"	d
DPL_USER	mmu.h	/^#define DPL_USER /;"	d
DesEncrypt	lwip/netif/ppp/chpms.c	/^static void	DesEncrypt (u_char *, u_char *, u_char *);$/;"	p	file:	signature:(u_char *, u_char *, u_char *)
DesEncrypt	lwip/netif/ppp/chpms.c	/^static void DesEncrypt($/;"	f	file:	signature:( u_char *clear, u_char *key, u_char *cipher )
E0ESC	kbd.h	/^#define E0ESC /;"	d
E100_CB_SIZE	e100.h	/^#define E100_CB_SIZE /;"	d
E100_CU_RING_SIZE	e100.h	/^#define E100_CU_RING_SIZE /;"	d
E100_IOPORT_SIZE	e100.h	/^#define E100_IOPORT_SIZE /;"	d
E100_MAX_DEVS	e100.h	/^#define E100_MAX_DEVS /;"	d
E100_RFD_SIZE	e100.h	/^#define E100_RFD_SIZE /;"	d
E100_RU_RING_SIZE	e100.h	/^#define E100_RU_RING_SIZE /;"	d
E2BIG	lwip/include/lwip/arch.h	/^#define  E2BIG /;"	d
EACCES	lwip/include/lwip/arch.h	/^#define  EACCES /;"	d
EADDRINUSE	lwip/include/lwip/arch.h	/^#define  EADDRINUSE /;"	d
EADDRNOTAVAIL	lwip/include/lwip/arch.h	/^#define  EADDRNOTAVAIL /;"	d
EADV	lwip/include/lwip/arch.h	/^#define  EADV /;"	d
EAFNOSUPPORT	lwip/include/lwip/arch.h	/^#define  EAFNOSUPPORT /;"	d
EAGAIN	lwip/include/lwip/arch.h	/^#define  EAGAIN /;"	d
EALREADY	lwip/include/lwip/arch.h	/^#define  EALREADY /;"	d
EBADE	lwip/include/lwip/arch.h	/^#define  EBADE /;"	d
EBADF	lwip/include/lwip/arch.h	/^#define  EBADF /;"	d
EBADFD	lwip/include/lwip/arch.h	/^#define  EBADFD /;"	d
EBADMSG	lwip/include/lwip/arch.h	/^#define  EBADMSG /;"	d
EBADR	lwip/include/lwip/arch.h	/^#define  EBADR /;"	d
EBADRQC	lwip/include/lwip/arch.h	/^#define  EBADRQC /;"	d
EBADSLT	lwip/include/lwip/arch.h	/^#define  EBADSLT /;"	d
EBFONT	lwip/include/lwip/arch.h	/^#define  EBFONT /;"	d
EBUSY	lwip/include/lwip/arch.h	/^#define  EBUSY /;"	d
ECHILD	lwip/include/lwip/arch.h	/^#define  ECHILD /;"	d
ECHOREP	lwip/netif/ppp/lcp.h	/^#define ECHOREP	/;"	d
ECHOREQ	lwip/netif/ppp/lcp.h	/^#define ECHOREQ	/;"	d
ECHRNG	lwip/include/lwip/arch.h	/^#define  ECHRNG /;"	d
ECOMM	lwip/include/lwip/arch.h	/^#define  ECOMM /;"	d
ECONNABORTED	lwip/include/lwip/arch.h	/^#define  ECONNABORTED /;"	d
ECONNREFUSED	lwip/include/lwip/arch.h	/^#define  ECONNREFUSED /;"	d
ECONNRESET	lwip/include/lwip/arch.h	/^#define  ECONNRESET /;"	d
EDEADLK	lwip/include/lwip/arch.h	/^#define  EDEADLK /;"	d
EDEADLOCK	lwip/include/lwip/arch.h	/^#define  EDEADLOCK /;"	d
EDESTADDRREQ	lwip/include/lwip/arch.h	/^#define  EDESTADDRREQ /;"	d
EDOM	lwip/include/lwip/arch.h	/^#define  EDOM /;"	d
EDOTDOT	lwip/include/lwip/arch.h	/^#define  EDOTDOT /;"	d
EDQUOT	lwip/include/lwip/arch.h	/^#define  EDQUOT /;"	d
EEPROM_EECS	e100.h	/^#define EEPROM_EECS /;"	d
EEPROM_EEDI	e100.h	/^#define EEPROM_EEDI /;"	d
EEPROM_EEDO	e100.h	/^#define EEPROM_EEDO /;"	d
EEPROM_EESK	e100.h	/^#define EEPROM_EESK /;"	d
EEPROM_OP_ERASE	e100.h	/^#define EEPROM_OP_ERASE /;"	d
EEPROM_OP_OTHER	e100.h	/^#define EEPROM_OP_OTHER /;"	d
EEPROM_OP_READ	e100.h	/^#define EEPROM_OP_READ /;"	d
EEPROM_OP_WRITE	e100.h	/^#define EEPROM_OP_WRITE /;"	d
EEXIST	lwip/include/lwip/arch.h	/^#define  EEXIST /;"	d
EFAULT	lwip/include/lwip/arch.h	/^#define  EFAULT /;"	d
EFBIG	lwip/include/lwip/arch.h	/^#define  EFBIG /;"	d
EHOSTDOWN	lwip/include/lwip/arch.h	/^#define  EHOSTDOWN /;"	d
EHOSTUNREACH	lwip/include/lwip/arch.h	/^#define  EHOSTUNREACH /;"	d
EIDRM	lwip/include/lwip/arch.h	/^#define  EIDRM /;"	d
EILSEQ	lwip/include/lwip/arch.h	/^#define  EILSEQ /;"	d
EINPROGRESS	lwip/include/lwip/arch.h	/^#define  EINPROGRESS /;"	d
EINTR	lwip/include/lwip/arch.h	/^#define  EINTR /;"	d
EINVAL	lwip/include/lwip/arch.h	/^#define  EINVAL /;"	d
EIO	lwip/include/lwip/arch.h	/^#define  EIO /;"	d
EISCONN	lwip/include/lwip/arch.h	/^#define  EISCONN /;"	d
EISDIR	lwip/include/lwip/arch.h	/^#define  EISDIR /;"	d
EISNAM	lwip/include/lwip/arch.h	/^#define  EISNAM /;"	d
EL2HLT	lwip/include/lwip/arch.h	/^#define  EL2HLT /;"	d
EL2NSYNC	lwip/include/lwip/arch.h	/^#define  EL2NSYNC /;"	d
EL3HLT	lwip/include/lwip/arch.h	/^#define  EL3HLT /;"	d
EL3RST	lwip/include/lwip/arch.h	/^#define  EL3RST /;"	d
ELF_MAGIC	elf.h	/^#define ELF_MAGIC /;"	d
ELF_PROG_FLAG_EXEC	elf.h	/^#define ELF_PROG_FLAG_EXEC /;"	d
ELF_PROG_FLAG_READ	elf.h	/^#define ELF_PROG_FLAG_READ /;"	d
ELF_PROG_FLAG_WRITE	elf.h	/^#define ELF_PROG_FLAG_WRITE /;"	d
ELF_PROG_LOAD	elf.h	/^#define ELF_PROG_LOAD /;"	d
ELIBACC	lwip/include/lwip/arch.h	/^#define  ELIBACC /;"	d
ELIBBAD	lwip/include/lwip/arch.h	/^#define  ELIBBAD /;"	d
ELIBEXEC	lwip/include/lwip/arch.h	/^#define  ELIBEXEC /;"	d
ELIBMAX	lwip/include/lwip/arch.h	/^#define  ELIBMAX /;"	d
ELIBSCN	lwip/include/lwip/arch.h	/^#define  ELIBSCN /;"	d
ELNRNG	lwip/include/lwip/arch.h	/^#define  ELNRNG /;"	d
ELOOP	lwip/include/lwip/arch.h	/^#define  ELOOP /;"	d
EMBRYO	proc.h	/^enum proc_state { UNUSED, EMBRYO, SLEEPING, RUNNABLE, $/;"	e	enum:proc_state
EMEDIUMTYPE	lwip/include/lwip/arch.h	/^#define  EMEDIUMTYPE /;"	d
EMFILE	lwip/include/lwip/arch.h	/^#define  EMFILE /;"	d
EMLINK	lwip/include/lwip/arch.h	/^#define  EMLINK /;"	d
EMSGSIZE	lwip/include/lwip/arch.h	/^#define  EMSGSIZE /;"	d
EMULTIHOP	lwip/include/lwip/arch.h	/^#define  EMULTIHOP /;"	d
ENABLE	lapic.c	/^  #define ENABLE /;"	d	file:
ENAMETOOLONG	lwip/include/lwip/arch.h	/^#define  ENAMETOOLONG /;"	d
ENAVAIL	lwip/include/lwip/arch.h	/^#define  ENAVAIL /;"	d
ENCODE	lwip/netif/ppp/vj.c	/^#define ENCODE(/;"	d	file:
ENCODEZ	lwip/netif/ppp/vj.c	/^#define ENCODEZ(/;"	d	file:
ENETDOWN	lwip/include/lwip/arch.h	/^#define  ENETDOWN /;"	d
ENETRESET	lwip/include/lwip/arch.h	/^#define  ENETRESET /;"	d
ENETUNREACH	lwip/include/lwip/arch.h	/^#define  ENETUNREACH /;"	d
ENFILE	lwip/include/lwip/arch.h	/^#define  ENFILE /;"	d
ENOANO	lwip/include/lwip/arch.h	/^#define  ENOANO /;"	d
ENOBUFS	lwip/include/lwip/arch.h	/^#define  ENOBUFS /;"	d
ENOCSI	lwip/include/lwip/arch.h	/^#define  ENOCSI /;"	d
ENODATA	lwip/include/lwip/arch.h	/^#define  ENODATA /;"	d
ENODEV	lwip/include/lwip/arch.h	/^#define  ENODEV /;"	d
ENOENT	lwip/include/lwip/arch.h	/^#define  ENOENT /;"	d
ENOEXEC	lwip/include/lwip/arch.h	/^#define  ENOEXEC /;"	d
ENOLCK	lwip/include/lwip/arch.h	/^#define  ENOLCK /;"	d
ENOLINK	lwip/include/lwip/arch.h	/^#define  ENOLINK /;"	d
ENOMEDIUM	lwip/include/lwip/arch.h	/^#define  ENOMEDIUM /;"	d
ENOMEM	lwip/include/lwip/arch.h	/^#define  ENOMEM /;"	d
ENOMSG	lwip/include/lwip/arch.h	/^#define  ENOMSG /;"	d
ENONET	lwip/include/lwip/arch.h	/^#define  ENONET /;"	d
ENOPKG	lwip/include/lwip/arch.h	/^#define  ENOPKG /;"	d
ENOPROTOOPT	lwip/include/lwip/arch.h	/^#define  ENOPROTOOPT /;"	d
ENOSPC	lwip/include/lwip/arch.h	/^#define  ENOSPC /;"	d
ENOSR	lwip/include/lwip/arch.h	/^#define  ENOSR /;"	d
ENOSTR	lwip/include/lwip/arch.h	/^#define  ENOSTR /;"	d
ENOSYS	lwip/include/lwip/arch.h	/^#define  ENOSYS /;"	d
ENOTBLK	lwip/include/lwip/arch.h	/^#define  ENOTBLK /;"	d
ENOTCONN	lwip/include/lwip/arch.h	/^#define  ENOTCONN /;"	d
ENOTDIR	lwip/include/lwip/arch.h	/^#define  ENOTDIR /;"	d
ENOTEMPTY	lwip/include/lwip/arch.h	/^#define  ENOTEMPTY /;"	d
ENOTNAM	lwip/include/lwip/arch.h	/^#define  ENOTNAM /;"	d
ENOTSOCK	lwip/include/lwip/arch.h	/^#define  ENOTSOCK /;"	d
ENOTTY	lwip/include/lwip/arch.h	/^#define  ENOTTY /;"	d
ENOTUNIQ	lwip/include/lwip/arch.h	/^#define  ENOTUNIQ /;"	d
ENSRBADFAMILY	lwip/include/lwip/arch.h	/^#define	ENSRBADFAMILY /;"	d
ENSRBADNAME	lwip/include/lwip/arch.h	/^#define	ENSRBADNAME	/;"	d
ENSRBADQUERY	lwip/include/lwip/arch.h	/^#define	ENSRBADQUERY /;"	d
ENSRBADRESP	lwip/include/lwip/arch.h	/^#define	ENSRBADRESP	/;"	d
ENSRCNAMELOOP	lwip/include/lwip/arch.h	/^#define	ENSRCNAMELOOP	/;"	d
ENSRCONNREFUSED	lwip/include/lwip/arch.h	/^#define	ENSRCONNREFUSED	/;"	d
ENSRDESTRUCTION	lwip/include/lwip/arch.h	/^#define	ENSRDESTRUCTION	/;"	d
ENSRFILE	lwip/include/lwip/arch.h	/^#define	ENSRFILE	/;"	d
ENSRFORMERR	lwip/include/lwip/arch.h	/^#define	ENSRFORMERR	/;"	d
ENSRNODATA	lwip/include/lwip/arch.h	/^#define	ENSRNODATA	/;"	d
ENSRNOMEM	lwip/include/lwip/arch.h	/^#define	ENSRNOMEM	/;"	d
ENSRNOTFOUND	lwip/include/lwip/arch.h	/^#define	ENSRNOTFOUND /;"	d
ENSRNOTIMP	lwip/include/lwip/arch.h	/^#define	ENSRNOTIMP	/;"	d
ENSROF	lwip/include/lwip/arch.h	/^#define	ENSROF	/;"	d
ENSROK	lwip/include/lwip/arch.h	/^#define	ENSROK	/;"	d
ENSRQUERYDOMAINTOOLONG	lwip/include/lwip/arch.h	/^#define	ENSRQUERYDOMAINTOOLONG	/;"	d
ENSRREFUSED	lwip/include/lwip/arch.h	/^#define	ENSRREFUSED	/;"	d
ENSRSERVFAIL	lwip/include/lwip/arch.h	/^#define	ENSRSERVFAIL /;"	d
ENSRTIMEOUT	lwip/include/lwip/arch.h	/^#define	ENSRTIMEOUT	/;"	d
ENXIO	lwip/include/lwip/arch.h	/^#define  ENXIO /;"	d
EOI	lapic.c	/^#define EOI /;"	d	file:
EOPNOTSUPP	lwip/include/lwip/arch.h	/^#define  EOPNOTSUPP /;"	d
EOVERFLOW	lwip/include/lwip/arch.h	/^#define  EOVERFLOW /;"	d
EPERM	lwip/include/lwip/arch.h	/^#define  EPERM /;"	d
EPFNOSUPPORT	lwip/include/lwip/arch.h	/^#define  EPFNOSUPPORT /;"	d
EPIPE	lwip/include/lwip/arch.h	/^#define  EPIPE /;"	d
EPROTO	lwip/include/lwip/arch.h	/^#define  EPROTO /;"	d
EPROTONOSUPPORT	lwip/include/lwip/arch.h	/^#define  EPROTONOSUPPORT /;"	d
EPROTOTYPE	lwip/include/lwip/arch.h	/^#define  EPROTOTYPE /;"	d
ERANGE	lwip/include/lwip/arch.h	/^#define  ERANGE /;"	d
EREMCHG	lwip/include/lwip/arch.h	/^#define  EREMCHG /;"	d
EREMOTE	lwip/include/lwip/arch.h	/^#define  EREMOTE /;"	d
EREMOTEIO	lwip/include/lwip/arch.h	/^#define  EREMOTEIO /;"	d
ERESTART	lwip/include/lwip/arch.h	/^#define  ERESTART /;"	d
EROFS	lwip/include/lwip/arch.h	/^#define  EROFS /;"	d
ERROR	lapic.c	/^#define ERROR /;"	d	file:
ERR_ABRT	lwip/include/lwip/err.h	/^#define ERR_ABRT /;"	d
ERR_ARG	lwip/include/lwip/err.h	/^#define ERR_ARG /;"	d
ERR_BUF	lwip/include/lwip/err.h	/^#define ERR_BUF /;"	d
ERR_CLSD	lwip/include/lwip/err.h	/^#define ERR_CLSD /;"	d
ERR_CONN	lwip/include/lwip/err.h	/^#define ERR_CONN /;"	d
ERR_IF	lwip/include/lwip/err.h	/^#define ERR_IF /;"	d
ERR_ISCONN	lwip/include/lwip/err.h	/^#define ERR_ISCONN /;"	d
ERR_MEM	lwip/include/lwip/err.h	/^#define ERR_MEM /;"	d
ERR_OK	lwip/include/lwip/err.h	/^#define ERR_OK /;"	d
ERR_RST	lwip/include/lwip/err.h	/^#define ERR_RST /;"	d
ERR_RTE	lwip/include/lwip/err.h	/^#define ERR_RTE /;"	d
ERR_USE	lwip/include/lwip/err.h	/^#define ERR_USE /;"	d
ERR_VAL	lwip/include/lwip/err.h	/^#define ERR_VAL /;"	d
ESCAPE_P	lwip/netif/ppp/ppp.c	/^#define ESCAPE_P(/;"	d	file:
ESHUTDOWN	lwip/include/lwip/arch.h	/^#define  ESHUTDOWN /;"	d
ESOCKTNOSUPPORT	lwip/include/lwip/arch.h	/^#define  ESOCKTNOSUPPORT /;"	d
ESPIPE	lwip/include/lwip/arch.h	/^#define  ESPIPE /;"	d
ESR	lapic.c	/^#define ESR /;"	d	file:
ESRCH	lwip/include/lwip/arch.h	/^#define  ESRCH /;"	d
ESRMNT	lwip/include/lwip/arch.h	/^#define  ESRMNT /;"	d
ESTABLISHED	lwip/include/lwip/tcp.h	/^  ESTABLISHED = 4,$/;"	e	enum:tcp_state
ESTALE	lwip/include/lwip/arch.h	/^#define  ESTALE /;"	d
ESTRPIPE	lwip/include/lwip/arch.h	/^#define  ESTRPIPE /;"	d
ETHARP_ALWAYS_INSERT	lwip/include/lwip/opt.h	/^#define ETHARP_ALWAYS_INSERT /;"	d
ETHARP_DEBUG	lwip/include/lwip/opt.h	/^#define ETHARP_DEBUG /;"	d
ETHARP_DEBUG	lwip/xv6/lwipopts.h	/^#define ETHARP_DEBUG /;"	d
ETHARP_STATE_EMPTY	lwip/netif/etharp.c	/^  ETHARP_STATE_EMPTY,$/;"	e	enum:etharp_state	file:
ETHARP_STATE_PENDING	lwip/netif/etharp.c	/^  ETHARP_STATE_PENDING,$/;"	e	enum:etharp_state	file:
ETHARP_STATE_STABLE	lwip/netif/etharp.c	/^  ETHARP_STATE_STABLE$/;"	e	enum:etharp_state	file:
ETHTYPE_ARP	lwip/include/netif/etharp.h	/^#define ETHTYPE_ARP /;"	d
ETHTYPE_IP	lwip/include/netif/etharp.h	/^#define ETHTYPE_IP /;"	d
ETIME	lwip/include/lwip/arch.h	/^#define  ETIME /;"	d
ETIMEDOUT	lwip/include/lwip/arch.h	/^#define  ETIMEDOUT /;"	d
ETOOMANYREFS	lwip/include/lwip/arch.h	/^#define  ETOOMANYREFS /;"	d
ETXTBSY	lwip/include/lwip/arch.h	/^#define  ETXTBSY /;"	d
EUCLEAN	lwip/include/lwip/arch.h	/^#define  EUCLEAN /;"	d
EUNATCH	lwip/include/lwip/arch.h	/^#define  EUNATCH /;"	d
EUSERS	lwip/include/lwip/arch.h	/^#define  EUSERS /;"	d
EWOULDBLOCK	lwip/include/lwip/arch.h	/^#define  EWOULDBLOCK /;"	d
EXDEV	lwip/include/lwip/arch.h	/^#define  EXDEV /;"	d
EXEC	sh.c	/^#define EXEC /;"	d	file:
EXFULL	lwip/include/lwip/arch.h	/^#define  EXFULL /;"	d
Expand	lwip/netif/ppp/chpms.c	/^static void	Expand (u_char *, u_char *);$/;"	p	file:	signature:(u_char *, u_char *)
Expand	lwip/netif/ppp/chpms.c	/^static void Expand(u_char *in, u_char *out)$/;"	f	file:	signature:(u_char *in, u_char *out)
F	lwip/netif/ppp/md5.c	/^#define F(/;"	d	file:
FCACHE_SIZE	httpd.c	/^#define FCACHE_SIZE /;"	d	file:
FD_CLOSED	file.h	/^  enum { FD_CLOSED, FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file
FD_CLR	lwip/include/lwip/sockets.h	/^  #define FD_CLR(/;"	d
FD_INODE	file.h	/^  enum { FD_CLOSED, FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file
FD_ISSET	lwip/include/lwip/sockets.h	/^  #define FD_ISSET(/;"	d
FD_NONE	file.h	/^  enum { FD_CLOSED, FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file
FD_PIPE	file.h	/^  enum { FD_CLOSED, FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file
FD_SET	lwip/include/lwip/sockets.h	/^  #define FD_SET(/;"	d
FD_SETSIZE	lwip/include/lwip/sockets.h	/^  #define FD_SETSIZE /;"	d
FD_SETSIZE	lwip/include/lwip/sockets.h	/^  #undef  FD_SETSIZE$/;"	d
FD_ZERO	lwip/include/lwip/sockets.h	/^  #define FD_ZERO(/;"	d
FF	lwip/netif/ppp/md5.c	/^#define FF(/;"	d	file:
FIN_WAIT_1	lwip/include/lwip/tcp.h	/^  FIN_WAIT_1  = 5,$/;"	e	enum:tcp_state
FIN_WAIT_2	lwip/include/lwip/tcp.h	/^  FIN_WAIT_2  = 6,$/;"	e	enum:tcp_state
FIONBIO	lwip/include/lwip/sockets.h	/^#define FIONBIO /;"	d
FIONREAD	lwip/include/lwip/sockets.h	/^#define FIONREAD /;"	d
FL_AC	mmu.h	/^#define FL_AC /;"	d
FL_AF	mmu.h	/^#define FL_AF /;"	d
FL_CF	mmu.h	/^#define FL_CF /;"	d
FL_DF	mmu.h	/^#define FL_DF /;"	d
FL_ID	mmu.h	/^#define FL_ID /;"	d
FL_IF	mmu.h	/^#define FL_IF /;"	d
FL_IOPL_0	mmu.h	/^#define FL_IOPL_0 /;"	d
FL_IOPL_1	mmu.h	/^#define FL_IOPL_1 /;"	d
FL_IOPL_2	mmu.h	/^#define FL_IOPL_2 /;"	d
FL_IOPL_3	mmu.h	/^#define FL_IOPL_3 /;"	d
FL_IOPL_MASK	mmu.h	/^#define FL_IOPL_MASK /;"	d
FL_NT	mmu.h	/^#define FL_NT /;"	d
FL_OF	mmu.h	/^#define FL_OF /;"	d
FL_PF	mmu.h	/^#define FL_PF /;"	d
FL_RF	mmu.h	/^#define FL_RF /;"	d
FL_SF	mmu.h	/^#define FL_SF /;"	d
FL_TF	mmu.h	/^#define FL_TF /;"	d
FL_VIF	mmu.h	/^#define FL_VIF /;"	d
FL_VIP	mmu.h	/^#define FL_VIP /;"	d
FL_VM	mmu.h	/^#define FL_VM /;"	d
FL_ZF	mmu.h	/^#define FL_ZF /;"	d
FSMDEBUG	lwip/netif/ppp/pppdebug.h	/^#define FSMDEBUG(/;"	d
FSM_DEFMAXCONFREQS	lwip/include/lwip/opt.h	/^#define FSM_DEFMAXCONFREQS /;"	d
FSM_DEFMAXNAKLOOPS	lwip/include/lwip/opt.h	/^#define FSM_DEFMAXNAKLOOPS /;"	d
FSM_DEFMAXTERMREQS	lwip/include/lwip/opt.h	/^#define FSM_DEFMAXTERMREQS /;"	d
FSM_DEFTIMEOUT	lwip/include/lwip/opt.h	/^#define FSM_DEFTIMEOUT /;"	d
FSM_H	lwip/netif/ppp/fsm.h	/^#define FSM_H$/;"	d
G	lwip/netif/ppp/md5.c	/^#define G(/;"	d	file:
GETCHAR	lwip/netif/ppp/ppp.h	/^#define GETCHAR(/;"	d
GETLONG	lwip/netif/ppp/ppp.h	/^#define GETLONG(/;"	d
GETSHORT	lwip/netif/ppp/ppp.h	/^#define GETSHORT(/;"	d
GG	lwip/netif/ppp/md5.c	/^#define GG(/;"	d	file:
Get7Bits	lwip/netif/ppp/chpms.c	/^static u_char Get7Bits($/;"	f	file:	signature:( u_char *input, int startBit )
Get7Bits	lwip/netif/ppp/chpms.c	/^static u_char Get7Bits($/;"	p	file:	signature:( u_char *input, int startBit )
GetMask	lwip/netif/ppp/ppp.c	/^u32_t GetMask(u32_t addr)$/;"	f	signature:(u32_t addr)
GetMask	lwip/netif/ppp/ppp.h	/^u32_t GetMask (u32_t); $/;"	p	signature:(u32_t)
H	lwip/netif/ppp/md5.c	/^#define H(/;"	d	file:
HEADERLEN	lwip/netif/ppp/fsm.h	/^#define HEADERLEN	/;"	d
HH	lwip/netif/ppp/md5.c	/^#define HH(/;"	d	file:
HWTYPE_ETHERNET	lwip/netif/etharp.c	/^#define HWTYPE_ETHERNET /;"	d	file:
Header	umalloc.c	/^typedef union header Header;$/;"	t	typeref:union:header	file:
I	lwip/netif/ppp/md5.c	/^#define I(/;"	d	file:
IBLOCK	fs.h	/^#define IBLOCK(/;"	d
ICMP6_DUR	lwip/include/ipv6/lwip/icmp.h	/^#define ICMP6_DUR /;"	d
ICMP6_ECHO	lwip/include/ipv6/lwip/icmp.h	/^#define ICMP6_ECHO /;"	d
ICMP6_ER	lwip/include/ipv6/lwip/icmp.h	/^#define ICMP6_ER /;"	d
ICMP6_TE	lwip/include/ipv6/lwip/icmp.h	/^#define ICMP6_TE /;"	d
ICMPH_CODE	lwip/include/ipv4/lwip/icmp.h	/^#define ICMPH_CODE(/;"	d
ICMPH_CODE_SET	lwip/include/ipv4/lwip/icmp.h	/^#define ICMPH_CODE_SET(/;"	d
ICMPH_TYPE	lwip/include/ipv4/lwip/icmp.h	/^#define ICMPH_TYPE(/;"	d
ICMPH_TYPE_SET	lwip/include/ipv4/lwip/icmp.h	/^#define ICMPH_TYPE_SET(/;"	d
ICMP_DEBUG	lwip/include/lwip/opt.h	/^#define ICMP_DEBUG /;"	d
ICMP_DEBUG	lwip/xv6/lwipopts.h	/^#define ICMP_DEBUG /;"	d
ICMP_DUR	lwip/include/ipv4/lwip/icmp.h	/^#define ICMP_DUR /;"	d
ICMP_DUR_FRAG	lwip/include/ipv4/lwip/icmp.h	/^  ICMP_DUR_FRAG = 4,   \/* fragmentation needed and DF set *\/$/;"	e	enum:icmp_dur_type
ICMP_DUR_FRAG	lwip/include/ipv6/lwip/icmp.h	/^  ICMP_DUR_FRAG = 4,   \/* fragmentation needed and DF set *\/$/;"	e	enum:icmp_dur_type
ICMP_DUR_HOST	lwip/include/ipv4/lwip/icmp.h	/^  ICMP_DUR_HOST = 1,   \/* host unreachable *\/$/;"	e	enum:icmp_dur_type
ICMP_DUR_HOST	lwip/include/ipv6/lwip/icmp.h	/^  ICMP_DUR_HOST = 1,   \/* host unreachable *\/$/;"	e	enum:icmp_dur_type
ICMP_DUR_NET	lwip/include/ipv4/lwip/icmp.h	/^  ICMP_DUR_NET = 0,    \/* net unreachable *\/$/;"	e	enum:icmp_dur_type
ICMP_DUR_NET	lwip/include/ipv6/lwip/icmp.h	/^  ICMP_DUR_NET = 0,    \/* net unreachable *\/$/;"	e	enum:icmp_dur_type
ICMP_DUR_PORT	lwip/include/ipv4/lwip/icmp.h	/^  ICMP_DUR_PORT = 3,   \/* port unreachable *\/$/;"	e	enum:icmp_dur_type
ICMP_DUR_PORT	lwip/include/ipv6/lwip/icmp.h	/^  ICMP_DUR_PORT = 3,   \/* port unreachable *\/$/;"	e	enum:icmp_dur_type
ICMP_DUR_PROTO	lwip/include/ipv4/lwip/icmp.h	/^  ICMP_DUR_PROTO = 2,  \/* protocol unreachable *\/$/;"	e	enum:icmp_dur_type
ICMP_DUR_PROTO	lwip/include/ipv6/lwip/icmp.h	/^  ICMP_DUR_PROTO = 2,  \/* protocol unreachable *\/$/;"	e	enum:icmp_dur_type
ICMP_DUR_SR	lwip/include/ipv4/lwip/icmp.h	/^  ICMP_DUR_SR = 5      \/* source route failed *\/$/;"	e	enum:icmp_dur_type
ICMP_DUR_SR	lwip/include/ipv6/lwip/icmp.h	/^  ICMP_DUR_SR = 5      \/* source route failed *\/$/;"	e	enum:icmp_dur_type
ICMP_ECHO	lwip/include/ipv4/lwip/icmp.h	/^#define ICMP_ECHO /;"	d
ICMP_ER	lwip/include/ipv4/lwip/icmp.h	/^#define ICMP_ER /;"	d
ICMP_IR	lwip/include/ipv4/lwip/icmp.h	/^#define ICMP_IR /;"	d
ICMP_IRQ	lwip/include/ipv4/lwip/icmp.h	/^#define ICMP_IRQ /;"	d
ICMP_PP	lwip/include/ipv4/lwip/icmp.h	/^#define ICMP_PP /;"	d
ICMP_RD	lwip/include/ipv4/lwip/icmp.h	/^#define ICMP_RD /;"	d
ICMP_SQ	lwip/include/ipv4/lwip/icmp.h	/^#define ICMP_SQ /;"	d
ICMP_STATS	lwip/include/lwip/opt.h	/^#define ICMP_STATS	/;"	d
ICMP_STATS_INC	lwip/include/lwip/stats.h	/^#define ICMP_STATS_INC(/;"	d
ICMP_TE	lwip/include/ipv4/lwip/icmp.h	/^#define ICMP_TE /;"	d
ICMP_TE_FRAG	lwip/include/ipv4/lwip/icmp.h	/^  ICMP_TE_FRAG = 1     \/* fragment reassembly time exceeded *\/$/;"	e	enum:icmp_te_type
ICMP_TE_FRAG	lwip/include/ipv6/lwip/icmp.h	/^  ICMP_TE_FRAG = 1     \/* fragment reassembly time exceeded *\/$/;"	e	enum:icmp_te_type
ICMP_TE_TTL	lwip/include/ipv4/lwip/icmp.h	/^  ICMP_TE_TTL = 0,     \/* time to live exceeded in transit *\/$/;"	e	enum:icmp_te_type
ICMP_TE_TTL	lwip/include/ipv6/lwip/icmp.h	/^  ICMP_TE_TTL = 0,     \/* time to live exceeded in transit *\/$/;"	e	enum:icmp_te_type
ICMP_TS	lwip/include/ipv4/lwip/icmp.h	/^#define ICMP_TS /;"	d
ICMP_TSR	lwip/include/ipv4/lwip/icmp.h	/^#define ICMP_TSR /;"	d
ICMP_TTL	lwip/include/lwip/opt.h	/^#define ICMP_TTL /;"	d
ICRHI	lapic.c	/^#define ICRHI /;"	d	file:
ICRLO	lapic.c	/^#define ICRLO /;"	d	file:
ID	lapic.c	/^#define ID /;"	d	file:
IDE_BSY	ide.c	/^#define IDE_BSY /;"	d	file:
IDE_CMD_READ	ide.c	/^#define IDE_CMD_READ /;"	d	file:
IDE_CMD_WRITE	ide.c	/^#define IDE_CMD_WRITE /;"	d	file:
IDE_DF	ide.c	/^#define IDE_DF /;"	d	file:
IDE_DRDY	ide.c	/^#define IDE_DRDY /;"	d	file:
IDE_ERR	ide.c	/^#define IDE_ERR /;"	d	file:
IFNAME0	lwip/netif/ethernetif.c	/^#define IFNAME0 /;"	d	file:
IFNAME1	lwip/netif/ethernetif.c	/^#define IFNAME1 /;"	d	file:
II	lwip/netif/ppp/md5.c	/^#define II(/;"	d	file:
INADDR_ANY	lwip/include/lwip/sockets.h	/^#define INADDR_ANY /;"	d
INADDR_BROADCAST	lwip/include/lwip/sockets.h	/^#define INADDR_BROADCAST /;"	d
INADDR_LOOPBACK	lwip/include/ipv4/lwip/ip_addr.h	/^#define INADDR_LOOPBACK /;"	d
INADDR_NONE	lwip/include/ipv4/lwip/ip_addr.h	/^#define INADDR_NONE /;"	d
INCPTR	lwip/netif/ppp/ppp.h	/^#define INCPTR(/;"	d
INCR	lwip/netif/ppp/vj.c	/^#define INCR(/;"	d	file:
INDIRECT	fs.h	/^#define INDIRECT /;"	d
INET_DEBUG	lwip/include/lwip/opt.h	/^#define INET_DEBUG /;"	d
INIT	lapic.c	/^  #define INIT /;"	d	file:
INITIAL	lwip/netif/ppp/fsm.h	/^#define INITIAL	/;"	d
INPUT_BUF	console.c	/^#define INPUT_BUF /;"	d	file:
INT_ACTIVELOW	ioapic.c	/^#define INT_ACTIVELOW /;"	d	file:
INT_DISABLED	ioapic.c	/^#define INT_DISABLED /;"	d	file:
INT_LEVEL	ioapic.c	/^#define INT_LEVEL /;"	d	file:
INT_LOGICAL	ioapic.c	/^#define INT_LOGICAL /;"	d	file:
IN_BADCLASS	lwip/include/ipv4/lwip/ip_addr.h	/^#define IN_BADCLASS(/;"	d
IN_CLASSA	lwip/include/ipv4/lwip/ip_addr.h	/^#define  IN_CLASSA(/;"	d
IN_CLASSA_HOST	lwip/include/ipv4/lwip/ip_addr.h	/^#define  IN_CLASSA_HOST /;"	d
IN_CLASSA_MAX	lwip/include/ipv4/lwip/ip_addr.h	/^#define  IN_CLASSA_MAX /;"	d
IN_CLASSA_NET	lwip/include/ipv4/lwip/ip_addr.h	/^#define  IN_CLASSA_NET /;"	d
IN_CLASSA_NSHIFT	lwip/include/ipv4/lwip/ip_addr.h	/^#define  IN_CLASSA_NSHIFT /;"	d
IN_CLASSB	lwip/include/ipv4/lwip/ip_addr.h	/^#define  IN_CLASSB(/;"	d
IN_CLASSB_HOST	lwip/include/ipv4/lwip/ip_addr.h	/^#define  IN_CLASSB_HOST /;"	d
IN_CLASSB_MAX	lwip/include/ipv4/lwip/ip_addr.h	/^#define  IN_CLASSB_MAX /;"	d
IN_CLASSB_NET	lwip/include/ipv4/lwip/ip_addr.h	/^#define  IN_CLASSB_NET /;"	d
IN_CLASSB_NSHIFT	lwip/include/ipv4/lwip/ip_addr.h	/^#define  IN_CLASSB_NSHIFT /;"	d
IN_CLASSC	lwip/include/ipv4/lwip/ip_addr.h	/^#define  IN_CLASSC(/;"	d
IN_CLASSC_HOST	lwip/include/ipv4/lwip/ip_addr.h	/^#define  IN_CLASSC_HOST /;"	d
IN_CLASSC_NET	lwip/include/ipv4/lwip/ip_addr.h	/^#define  IN_CLASSC_NET /;"	d
IN_CLASSC_NSHIFT	lwip/include/ipv4/lwip/ip_addr.h	/^#define  IN_CLASSC_NSHIFT /;"	d
IN_CLASSD	lwip/include/ipv4/lwip/ip_addr.h	/^#define IN_CLASSD(/;"	d
IN_CLASSD_HOST	lwip/include/ipv4/lwip/ip_addr.h	/^#define IN_CLASSD_HOST /;"	d
IN_CLASSD_NET	lwip/include/ipv4/lwip/ip_addr.h	/^#define IN_CLASSD_NET /;"	d
IN_CLASSD_NSHIFT	lwip/include/ipv4/lwip/ip_addr.h	/^#define IN_CLASSD_NSHIFT /;"	d
IN_EXPERIMENTAL	lwip/include/ipv4/lwip/ip_addr.h	/^#define IN_EXPERIMENTAL(/;"	d
IN_LOOPBACKNET	lwip/include/ipv4/lwip/ip_addr.h	/^#define IN_LOOPBACKNET /;"	d
IN_MULTICAST	lwip/include/ipv4/lwip/ip_addr.h	/^#define IN_MULTICAST(/;"	d
IOAPIC	ioapic.c	/^#define IOAPIC /;"	d	file:
IOCPARM_MASK	lwip/include/lwip/sockets.h	/^#define IOCPARM_MASK /;"	d
IOC_IN	lwip/include/lwip/sockets.h	/^#define IOC_IN /;"	d
IOC_INOUT	lwip/include/lwip/sockets.h	/^#define IOC_INOUT /;"	d
IOC_OUT	lwip/include/lwip/sockets.h	/^#define IOC_OUT /;"	d
IOC_VOID	lwip/include/lwip/sockets.h	/^#define IOC_VOID /;"	d
IO_PIC1	picirq.c	/^#define IO_PIC1 /;"	d	file:
IO_PIC2	picirq.c	/^#define IO_PIC2 /;"	d	file:
IO_TIMER1	timer.c	/^#define IO_TIMER1 /;"	d	file:
IP4_ADDR	lwip/include/ipv4/lwip/ip_addr.h	/^#define IP4_ADDR(/;"	d
IP6_ADDR	lwip/include/ipv6/lwip/ip_addr.h	/^#define IP6_ADDR(/;"	d
IPB	fs.h	/^#define IPB /;"	d
IPCPDEBUG	lwip/netif/ppp/pppdebug.h	/^#define IPCPDEBUG(/;"	d
IPCP_H	lwip/netif/ppp/ipcp.h	/^#define IPCP_H$/;"	d
IPCP_VJMODE_OLD	lwip/netif/ppp/ipcp.h	/^#define IPCP_VJMODE_OLD /;"	d
IPCP_VJMODE_RFC1172	lwip/netif/ppp/ipcp.h	/^#define IPCP_VJMODE_RFC1172 /;"	d
IPCP_VJMODE_RFC1332	lwip/netif/ppp/ipcp.h	/^#define IPCP_VJMODE_RFC1332 /;"	d
IPCP_VJ_COMP	lwip/netif/ppp/ipcp.h	/^#define IPCP_VJ_COMP /;"	d
IPCP_VJ_COMP_OLD	lwip/netif/ppp/ipcp.h	/^#define IPCP_VJ_COMP_OLD /;"	d
IPFRAG_STATS	lwip/include/lwip/opt.h	/^#define IPFRAG_STATS	/;"	d
IPFRAG_STATS_INC	lwip/include/lwip/stats.h	/^#define IPFRAG_STATS_INC(/;"	d
IPH_CHKSUM	lwip/include/ipv4/lwip/ip.h	/^#define IPH_CHKSUM(/;"	d
IPH_CHKSUM_SET	lwip/include/ipv4/lwip/ip.h	/^#define IPH_CHKSUM_SET(/;"	d
IPH_HL	lwip/include/ipv4/lwip/ip.h	/^#define IPH_HL(/;"	d
IPH_ID	lwip/include/ipv4/lwip/ip.h	/^#define IPH_ID(/;"	d
IPH_ID_SET	lwip/include/ipv4/lwip/ip.h	/^#define IPH_ID_SET(/;"	d
IPH_LEN	lwip/include/ipv4/lwip/ip.h	/^#define IPH_LEN(/;"	d
IPH_LEN_SET	lwip/include/ipv4/lwip/ip.h	/^#define IPH_LEN_SET(/;"	d
IPH_OFFSET	lwip/include/ipv4/lwip/ip.h	/^#define IPH_OFFSET(/;"	d
IPH_OFFSET_SET	lwip/include/ipv4/lwip/ip.h	/^#define IPH_OFFSET_SET(/;"	d
IPH_PROTO	lwip/include/ipv4/lwip/ip.h	/^#define IPH_PROTO(/;"	d
IPH_PROTO_SET	lwip/include/ipv4/lwip/ip.h	/^#define IPH_PROTO_SET(/;"	d
IPH_TOS	lwip/include/ipv4/lwip/ip.h	/^#define IPH_TOS(/;"	d
IPH_TTL	lwip/include/ipv4/lwip/ip.h	/^#define IPH_TTL(/;"	d
IPH_TTL_SET	lwip/include/ipv4/lwip/ip.h	/^#define IPH_TTL_SET(/;"	d
IPH_V	lwip/include/ipv4/lwip/ip.h	/^#define IPH_V(/;"	d
IPH_VHLTOS_SET	lwip/include/ipv4/lwip/ip.h	/^#define IPH_VHLTOS_SET(/;"	d
IPPROTO_IP	lwip/include/lwip/sockets.h	/^#define IPPROTO_IP /;"	d
IPPROTO_TCP	lwip/include/lwip/sockets.h	/^#define IPPROTO_TCP /;"	d
IPPROTO_UDP	lwip/include/lwip/sockets.h	/^#define IPPROTO_UDP /;"	d
IPTOS_LOWCOST	lwip/include/lwip/sockets.h	/^#define IPTOS_LOWCOST /;"	d
IPTOS_LOWDELAY	lwip/include/lwip/sockets.h	/^#define IPTOS_LOWDELAY /;"	d
IPTOS_MINCOST	lwip/include/lwip/sockets.h	/^#define IPTOS_MINCOST /;"	d
IPTOS_PREC	lwip/include/lwip/sockets.h	/^#define IPTOS_PREC(/;"	d
IPTOS_PREC_CRITIC_ECP	lwip/include/lwip/sockets.h	/^#define IPTOS_PREC_CRITIC_ECP /;"	d
IPTOS_PREC_FLASH	lwip/include/lwip/sockets.h	/^#define IPTOS_PREC_FLASH /;"	d
IPTOS_PREC_FLASHOVERRIDE	lwip/include/lwip/sockets.h	/^#define IPTOS_PREC_FLASHOVERRIDE /;"	d
IPTOS_PREC_IMMEDIATE	lwip/include/lwip/sockets.h	/^#define IPTOS_PREC_IMMEDIATE /;"	d
IPTOS_PREC_INTERNETCONTROL	lwip/include/lwip/sockets.h	/^#define IPTOS_PREC_INTERNETCONTROL /;"	d
IPTOS_PREC_MASK	lwip/include/lwip/sockets.h	/^#define IPTOS_PREC_MASK /;"	d
IPTOS_PREC_NETCONTROL	lwip/include/lwip/sockets.h	/^#define IPTOS_PREC_NETCONTROL /;"	d
IPTOS_PREC_PRIORITY	lwip/include/lwip/sockets.h	/^#define IPTOS_PREC_PRIORITY /;"	d
IPTOS_PREC_ROUTINE	lwip/include/lwip/sockets.h	/^#define IPTOS_PREC_ROUTINE /;"	d
IPTOS_RELIABILITY	lwip/include/lwip/sockets.h	/^#define IPTOS_RELIABILITY /;"	d
IPTOS_THROUGHPUT	lwip/include/lwip/sockets.h	/^#define IPTOS_THROUGHPUT /;"	d
IPTOS_TOS	lwip/include/lwip/sockets.h	/^#define IPTOS_TOS(/;"	d
IPTOS_TOS_MASK	lwip/include/lwip/sockets.h	/^#define IPTOS_TOS_MASK /;"	d
IP_ADDR_ANY	lwip/include/ipv4/lwip/ip_addr.h	/^#define IP_ADDR_ANY /;"	d
IP_ADDR_ANY	lwip/include/ipv6/lwip/ip_addr.h	/^#define IP_ADDR_ANY /;"	d
IP_ADDR_BROADCAST	lwip/include/ipv4/lwip/ip_addr.h	/^#define IP_ADDR_BROADCAST /;"	d
IP_DEBUG	lwip/include/lwip/opt.h	/^#define IP_DEBUG /;"	d
IP_DEBUG	lwip/xv6/lwipopts.h	/^#define IP_DEBUG /;"	d
IP_DF	lwip/include/ipv4/lwip/ip.h	/^#define IP_DF /;"	d
IP_DF	lwip/netif/ppp/vjbsdhdr.h	/^#define	IP_DF /;"	d
IP_FORWARD	lwip/include/lwip/opt.h	/^#define IP_FORWARD /;"	d
IP_FRAG	lwip/include/lwip/opt.h	/^#define IP_FRAG /;"	d
IP_HDRINCL	lwip/include/ipv4/lwip/ip.h	/^#define IP_HDRINCL /;"	d
IP_HDRINCL	lwip/include/ipv4/lwip/ip.h	/^#undef IP_HDRINCL$/;"	d
IP_HDRINCL	lwip/include/ipv6/lwip/ip.h	/^#define IP_HDRINCL /;"	d
IP_HDRINCL	lwip/include/ipv6/lwip/ip.h	/^#undef IP_HDRINCL$/;"	d
IP_HLEN	lwip/include/ipv4/lwip/ip.h	/^#define IP_HLEN /;"	d
IP_HLEN	lwip/include/ipv6/lwip/ip.h	/^#define IP_HLEN /;"	d
IP_MF	lwip/include/ipv4/lwip/ip.h	/^#define IP_MF /;"	d
IP_MF	lwip/netif/ppp/vjbsdhdr.h	/^#define	IP_MF /;"	d
IP_OFFMASK	lwip/include/ipv4/lwip/ip.h	/^#define IP_OFFMASK /;"	d
IP_OFFMASK	lwip/netif/ppp/vjbsdhdr.h	/^#define	IP_OFFMASK /;"	d
IP_OPTIONS	lwip/include/lwip/opt.h	/^#define IP_OPTIONS /;"	d
IP_PCB	lwip/include/ipv4/lwip/ip.h	/^#define IP_PCB /;"	d
IP_PCB	lwip/include/lwip/raw.h	/^  IP_PCB;$/;"	m	struct:raw_pcb	access:public
IP_PCB	lwip/include/lwip/tcp.h	/^  IP_PCB;$/;"	m	struct:tcp_pcb	access:public
IP_PCB	lwip/include/lwip/tcp.h	/^  IP_PCB;$/;"	m	struct:tcp_pcb_listen	access:public
IP_PCB	lwip/include/lwip/udp.h	/^  IP_PCB;$/;"	m	struct:udp_pcb	access:public
IP_PROTO_ICMP	lwip/include/ipv4/lwip/ip.h	/^#define IP_PROTO_ICMP /;"	d
IP_PROTO_ICMP	lwip/include/ipv6/lwip/ip.h	/^#define IP_PROTO_ICMP /;"	d
IP_PROTO_TCP	lwip/include/ipv4/lwip/ip.h	/^#define IP_PROTO_TCP /;"	d
IP_PROTO_TCP	lwip/include/ipv6/lwip/ip.h	/^#define IP_PROTO_TCP /;"	d
IP_PROTO_UDP	lwip/include/ipv4/lwip/ip.h	/^#define IP_PROTO_UDP /;"	d
IP_PROTO_UDP	lwip/include/ipv6/lwip/ip.h	/^#define IP_PROTO_UDP /;"	d
IP_PROTO_UDPLITE	lwip/include/ipv4/lwip/ip.h	/^#define IP_PROTO_UDPLITE /;"	d
IP_PROTO_UDPLITE	lwip/include/ipv6/lwip/ip.h	/^#define IP_PROTO_UDPLITE /;"	d
IP_REASSEMBLY	lwip/include/lwip/opt.h	/^#define IP_REASSEMBLY /;"	d
IP_REASS_BUFSIZE	lwip/core/ipv4/ip_frag.c	/^#define IP_REASS_BUFSIZE /;"	d	file:
IP_REASS_DEBUG	lwip/include/lwip/opt.h	/^#define IP_REASS_DEBUG /;"	d
IP_REASS_FLAG_LASTFRAG	lwip/core/ipv4/ip_frag.c	/^#define IP_REASS_FLAG_LASTFRAG /;"	d	file:
IP_REASS_MAXAGE	lwip/core/ipv4/ip_frag.c	/^#define IP_REASS_MAXAGE /;"	d	file:
IP_REASS_TMO	lwip/core/ipv4/ip_frag.c	/^#define IP_REASS_TMO /;"	d	file:
IP_RF	lwip/include/ipv4/lwip/ip.h	/^#define IP_RF /;"	d
IP_STATS	lwip/include/lwip/opt.h	/^#define IP_STATS	/;"	d
IP_STATS_INC	lwip/include/lwip/stats.h	/^#define IP_STATS_INC(/;"	d
IP_TOS	lwip/include/lwip/sockets.h	/^#define IP_TOS /;"	d
IP_TTL	lwip/include/lwip/sockets.h	/^#define IP_TTL /;"	d
IRQ_ERROR	traps.h	/^#define IRQ_ERROR /;"	d
IRQ_IDE	traps.h	/^#define IRQ_IDE /;"	d
IRQ_IDE_2	traps.h	/^#define IRQ_IDE_2 /;"	d
IRQ_KBD	traps.h	/^#define IRQ_KBD /;"	d
IRQ_MAX	picirq.h	/^#define IRQ_MAX /;"	d
IRQ_OFFSET	traps.h	/^#define IRQ_OFFSET /;"	d
IRQ_SLAVE	picirq.c	/^#define IRQ_SLAVE /;"	d	file:
IRQ_SPURIOUS	traps.h	/^#define IRQ_SPURIOUS /;"	d
IRQ_TIMER	traps.h	/^#define IRQ_TIMER /;"	d
I_BUSY	fsvar.h	/^#define I_BUSY /;"	d
I_VALID	fsvar.h	/^#define I_VALID /;"	d
KBDATAP	kbd.h	/^#define KBDATAP /;"	d
KBSTATP	kbd.h	/^#define KBSTATP /;"	d
KBS_DIB	kbd.h	/^#define KBS_DIB /;"	d
KEY_DEL	kbd.h	/^#define KEY_DEL /;"	d
KEY_DN	kbd.h	/^#define KEY_DN /;"	d
KEY_END	kbd.h	/^#define KEY_END /;"	d
KEY_HOME	kbd.h	/^#define KEY_HOME /;"	d
KEY_INS	kbd.h	/^#define KEY_INS /;"	d
KEY_LF	kbd.h	/^#define KEY_LF /;"	d
KEY_PGDN	kbd.h	/^#define KEY_PGDN /;"	d
KEY_PGUP	kbd.h	/^#define KEY_PGUP /;"	d
KEY_RT	kbd.h	/^#define KEY_RT /;"	d
KEY_UP	kbd.h	/^#define KEY_UP /;"	d
KSTACKSIZE	param.h	/^#define KSTACKSIZE /;"	d
LANManResp	lwip/netif/ppp/chpms.c	/^    u_char LANManResp[24];$/;"	m	struct:__anon25	file:	access:public
LAST_ACK	lwip/include/lwip/tcp.h	/^  LAST_ACK    = 9,$/;"	e	enum:tcp_state
LCPDEBUG	lwip/netif/ppp/pppdebug.h	/^#define LCPDEBUG(/;"	d
LCP_ECHOINTERVAL	lwip/include/lwip/opt.h	/^#define LCP_ECHOINTERVAL /;"	d
LCP_H	lwip/netif/ppp/lcp.h	/^#define LCP_H$/;"	d
LCP_MAXECHOFAILS	lwip/include/lwip/opt.h	/^#define LCP_MAXECHOFAILS /;"	d
LENCIADDR	lwip/netif/ppp/ipcp.c	/^#define LENCIADDR(/;"	d	file:
LENCICBCP	lwip/netif/ppp/lcp.c	/^#define LENCICBCP(/;"	d	file:
LENCICHAP	lwip/netif/ppp/lcp.c	/^#define LENCICHAP(/;"	d	file:
LENCIDNS	lwip/netif/ppp/ipcp.c	/^#define LENCIDNS(/;"	d	file:
LENCILONG	lwip/netif/ppp/lcp.c	/^#define LENCILONG(/;"	d	file:
LENCILQR	lwip/netif/ppp/lcp.c	/^#define LENCILQR(/;"	d	file:
LENCISHORT	lwip/netif/ppp/lcp.c	/^#define LENCISHORT(/;"	d	file:
LENCIVJ	lwip/netif/ppp/ipcp.c	/^#define LENCIVJ(/;"	d	file:
LENCIVOID	lwip/netif/ppp/lcp.c	/^#define LENCIVOID(/;"	d	file:
LEVEL	lapic.c	/^  #define LEVEL /;"	d	file:
LINK_STATS	lwip/include/lwip/opt.h	/^#define LINK_STATS	/;"	d
LINK_STATS_INC	lwip/include/lwip/stats.h	/^#define LINK_STATS_INC(/;"	d
LINT0	lapic.c	/^#define LINT0 /;"	d	file:
LINT1	lapic.c	/^#define LINT1 /;"	d	file:
LIST	sh.c	/^#define LIST /;"	d	file:
LISTEN	lwip/include/lwip/tcp.h	/^  LISTEN      = 1,$/;"	e	enum:tcp_state
LITTLE_ENDIAN	lwip/include/lwip/arch.h	/^#define LITTLE_ENDIAN /;"	d
LITTLE_ENDIAN	lwip/xv6/lwipopts.h	/^#define LITTLE_ENDIAN /;"	d
LOG_CRITICAL	lwip/netif/ppp/pppdebug.h	/^	LOG_CRITICAL = 0,$/;"	e	enum:__anon26
LOG_DEBUG	lwip/netif/ppp/pppdebug.h	/^	LOG_DEBUG = 7$/;"	e	enum:__anon26
LOG_DETAIL	lwip/netif/ppp/pppdebug.h	/^	LOG_DETAIL = 6,$/;"	e	enum:__anon26
LOG_ERR	lwip/netif/ppp/pppdebug.h	/^	LOG_ERR = 1,$/;"	e	enum:__anon26
LOG_INFO	lwip/netif/ppp/pppdebug.h	/^	LOG_INFO = 5,$/;"	e	enum:__anon26
LOG_NOTICE	lwip/netif/ppp/pppdebug.h	/^	LOG_NOTICE = 2,$/;"	e	enum:__anon26
LOG_WARNING	lwip/netif/ppp/pppdebug.h	/^	LOG_WARNING = 3,$/;"	e	enum:__anon26
LONG	console.c	/^    LONG,$/;"	e	enum:fmt_types	file:
LONGLONG	console.c	/^    LONGLONG,$/;"	e	enum:fmt_types	file:
LPTPORT	console.c	/^#define LPTPORT /;"	d	file:
LWIP_ASSERT	lwip/include/lwip/debug.h	/^#  define LWIP_ASSERT(/;"	d
LWIP_CALLBACK_API	lwip/include/lwip/opt.h	/^#define LWIP_CALLBACK_API /;"	d
LWIP_COMPAT_SOCKETS	lwip/include/lwip/opt.h	/^#define LWIP_COMPAT_SOCKETS /;"	d
LWIP_COMPAT_SOCKETS	lwip/xv6/lwipopts.h	/^#define LWIP_COMPAT_SOCKETS /;"	d
LWIP_DEBUG	lwip/xv6/lwipopts.h	/^#define LWIP_DEBUG /;"	d
LWIP_DEBUGF	lwip/include/lwip/debug.h	/^#  define LWIP_DEBUGF(/;"	d
LWIP_DHCP	lwip/include/lwip/opt.h	/^#define LWIP_DHCP /;"	d
LWIP_ERROR	lwip/include/lwip/debug.h	/^#  define LWIP_ERROR(/;"	d
LWIP_EVENT_ACCEPT	lwip/include/lwip/tcp.h	/^  LWIP_EVENT_ACCEPT,$/;"	e	enum:lwip_event
LWIP_EVENT_API	lwip/include/lwip/opt.h	/^#define LWIP_EVENT_API /;"	d
LWIP_EVENT_CONNECTED	lwip/include/lwip/tcp.h	/^  LWIP_EVENT_CONNECTED,$/;"	e	enum:lwip_event
LWIP_EVENT_ERR	lwip/include/lwip/tcp.h	/^  LWIP_EVENT_ERR$/;"	e	enum:lwip_event
LWIP_EVENT_POLL	lwip/include/lwip/tcp.h	/^  LWIP_EVENT_POLL,$/;"	e	enum:lwip_event
LWIP_EVENT_RECV	lwip/include/lwip/tcp.h	/^  LWIP_EVENT_RECV,$/;"	e	enum:lwip_event
LWIP_EVENT_SENT	lwip/include/lwip/tcp.h	/^  LWIP_EVENT_SENT,$/;"	e	enum:lwip_event
LWIP_HAVE_LOOPIF	lwip/include/lwip/opt.h	/^#define LWIP_HAVE_LOOPIF	/;"	d
LWIP_MAX	lwip/include/lwip/def.h	/^#define LWIP_MAX(/;"	d
LWIP_MIN	lwip/include/lwip/def.h	/^#define LWIP_MIN(/;"	d
LWIP_PLATFORM_ASSERT	lwip/xv6/arch/cc.h	/^#define LWIP_PLATFORM_ASSERT(/;"	d
LWIP_PLATFORM_DEBUG	lwip/xv6/arch/cc.h	/^#define LWIP_PLATFORM_DEBUG(/;"	d
LWIP_PLATFORM_DIAG	lwip/xv6/arch/cc.h	/^#define LWIP_PLATFORM_DIAG(/;"	d
LWIP_PROVIDE_ERRNO	lwip/xv6/arch/cc.h	/^#define LWIP_PROVIDE_ERRNO$/;"	d
LWIP_RAW	lwip/include/lwip/opt.h	/^#define LWIP_RAW /;"	d
LWIP_STATS	lwip/include/lwip/opt.h	/^#define LWIP_STATS /;"	d
LWIP_STATS	lwip/xv6/lwipopts.h	/^#define LWIP_STATS /;"	d
LWIP_STATS_DISPLAY	lwip/include/lwip/opt.h	/^#define LWIP_STATS_DISPLAY	/;"	d
LWIP_STATS_DISPLAY	lwip/include/lwip/opt.h	/^#define LWIP_STATS_DISPLAY /;"	d
LWIP_TCP	lwip/include/lwip/opt.h	/^#define LWIP_TCP /;"	d
LWIP_UDP	lwip/include/lwip/opt.h	/^#define LWIP_UDP /;"	d
LcpEchoCheck	lwip/netif/ppp/lcp.c	/^static void LcpEchoCheck (fsm *f)$/;"	f	file:	signature:(fsm *f)
LcpEchoCheck	lwip/netif/ppp/lcp.c	/^static void LcpEchoCheck (fsm*);$/;"	p	file:	signature:(fsm*)
LcpEchoTimeout	lwip/netif/ppp/lcp.c	/^static void LcpEchoTimeout (void *arg)$/;"	f	file:	signature:(void *arg)
LcpEchoTimeout	lwip/netif/ppp/lcp.c	/^static void LcpEchoTimeout (void*);$/;"	p	file:	signature:(void*)
LcpLinkFailure	lwip/netif/ppp/lcp.c	/^static void LcpLinkFailure (fsm *f)$/;"	f	file:	signature:(fsm *f)
LcpLinkFailure	lwip/netif/ppp/lcp.c	/^static void LcpLinkFailure (fsm*);$/;"	p	file:	signature:(fsm*)
LcpSendEchoRequest	lwip/netif/ppp/lcp.c	/^static void LcpSendEchoRequest (fsm *f)$/;"	f	file:	signature:(fsm *f)
LcpSendEchoRequest	lwip/netif/ppp/lcp.c	/^static void LcpSendEchoRequest (fsm*);$/;"	p	file:	signature:(fsm*)
LinkPhase	lwip/netif/ppp/lcp.h	/^} LinkPhase;$/;"	t	typeref:enum:__anon27
LogCodes	lwip/netif/ppp/pppdebug.h	/^} LogCodes;$/;"	t	typeref:enum:__anon26
MAGIC_H	lwip/netif/ppp/magic.h	/^#define MAGIC_H$/;"	d
MAKEHEADER	lwip/netif/ppp/ppp.h	/^#define MAKEHEADER(/;"	d
MASKED	lapic.c	/^  #define MASKED /;"	d	file:
MAXARGS	sh.c	/^#define MAXARGS /;"	d	file:
MAXFILE	fs.h	/^#define MAXFILE /;"	d
MAXNAMELEN	lwip/include/lwip/opt.h	/^#define MAXNAMELEN /;"	d
MAXSECRETLEN	lwip/include/lwip/opt.h	/^#define MAXSECRETLEN /;"	d
MAX_CHALLENGE_LENGTH	lwip/netif/ppp/chap.h	/^#define MAX_CHALLENGE_LENGTH	/;"	d
MAX_HDR	lwip/netif/ppp/vj.h	/^#define MAX_HDR	/;"	d
MAX_LINE_LEN	httpd.c	/^#define MAX_LINE_LEN /;"	d	file:
MAX_LOCKS	proc.h	/^#define MAX_LOCKS /;"	d
MAX_MTU	lwip/core/ipv4/ip_frag.c	/^#define MAX_MTU /;"	d	file:
MAX_NT_PASSWORD	lwip/netif/ppp/chpms.h	/^#define MAX_NT_PASSWORD	/;"	d
MAX_REQ_LINE	httpd.c	/^#define MAX_REQ_LINE /;"	d	file:
MAX_RESPONSE_LENGTH	lwip/netif/ppp/chap.h	/^#define MAX_RESPONSE_LENGTH	/;"	d
MAX_SIZE	lwip/netif/slipif.c	/^#define MAX_SIZE /;"	d	file:
MAX_SLOTS	lwip/netif/ppp/vj.h	/^#define MAX_SLOTS	/;"	d
MD5Final	lwip/netif/ppp/md5.c	/^void MD5Final (unsigned char hash[], MD5_CTX *mdContext)$/;"	f	signature:(unsigned char hash[], MD5_CTX *mdContext)
MD5Final	lwip/netif/ppp/md5.h	/^void MD5Final (unsigned char hash[], MD5_CTX *mdContext);$/;"	p	signature:(unsigned char hash[], MD5_CTX *mdContext)
MD5Init	lwip/netif/ppp/md5.c	/^void MD5Init (MD5_CTX *mdContext)$/;"	f	signature:(MD5_CTX *mdContext)
MD5Init	lwip/netif/ppp/md5.h	/^void MD5Init (MD5_CTX *mdContext);$/;"	p	signature:(MD5_CTX *mdContext)
MD5Update	lwip/netif/ppp/md5.c	/^void MD5Update(MD5_CTX *mdContext, unsigned char *inBuf, unsigned int inLen)$/;"	f	signature:(MD5_CTX *mdContext, unsigned char *inBuf, unsigned int inLen)
MD5Update	lwip/netif/ppp/md5.h	/^void MD5Update (MD5_CTX *mdContext, unsigned char *inBuf, unsigned int inLen);$/;"	p	signature:(MD5_CTX *mdContext, unsigned char *inBuf, unsigned int inLen)
MD5_CTX	lwip/netif/ppp/md5.h	/^} MD5_CTX;$/;"	t	typeref:struct:__anon29
MD5_H	lwip/netif/ppp/md5.h	/^#define MD5_H$/;"	d
MD5_SIGNATURE_SIZE	lwip/netif/ppp/chap.h	/^#define MD5_SIGNATURE_SIZE	/;"	d
MD5_SUPPORT	lwip/include/lwip/opt.h	/^#define MD5_SUPPORT /;"	d
MEMP_API_MSG	lwip/include/lwip/memp.h	/^  MEMP_API_MSG,$/;"	e	enum:__anon16
MEMP_DEBUG	lwip/include/lwip/opt.h	/^#define MEMP_DEBUG /;"	d
MEMP_MAX	lwip/include/lwip/memp.h	/^  MEMP_MAX$/;"	e	enum:__anon16
MEMP_NETBUF	lwip/include/lwip/memp.h	/^  MEMP_NETBUF,$/;"	e	enum:__anon16
MEMP_NETCONN	lwip/include/lwip/memp.h	/^  MEMP_NETCONN,$/;"	e	enum:__anon16
MEMP_NUM_API_MSG	lwip/include/lwip/opt.h	/^#define MEMP_NUM_API_MSG /;"	d
MEMP_NUM_NETBUF	lwip/include/lwip/opt.h	/^#define MEMP_NUM_NETBUF /;"	d
MEMP_NUM_NETCONN	lwip/include/lwip/opt.h	/^#define MEMP_NUM_NETCONN /;"	d
MEMP_NUM_PBUF	lwip/include/lwip/opt.h	/^#define MEMP_NUM_PBUF /;"	d
MEMP_NUM_RAW_PCB	lwip/include/lwip/opt.h	/^#define MEMP_NUM_RAW_PCB /;"	d
MEMP_NUM_SYS_TIMEOUT	lwip/include/lwip/opt.h	/^#define MEMP_NUM_SYS_TIMEOUT /;"	d
MEMP_NUM_TCPIP_MSG	lwip/include/lwip/opt.h	/^#define MEMP_NUM_TCPIP_MSG /;"	d
MEMP_NUM_TCP_PCB	lwip/include/lwip/opt.h	/^#define MEMP_NUM_TCP_PCB /;"	d
MEMP_NUM_TCP_PCB_LISTEN	lwip/include/lwip/opt.h	/^#define MEMP_NUM_TCP_PCB_LISTEN /;"	d
MEMP_NUM_TCP_SEG	lwip/include/lwip/opt.h	/^#define MEMP_NUM_TCP_SEG /;"	d
MEMP_NUM_TCP_SEG	lwip/xv6/lwipopts.h	/^#define MEMP_NUM_TCP_SEG /;"	d
MEMP_NUM_UDP_PCB	lwip/include/lwip/opt.h	/^#define MEMP_NUM_UDP_PCB /;"	d
MEMP_PBUF	lwip/include/lwip/memp.h	/^  MEMP_PBUF,$/;"	e	enum:__anon16
MEMP_RAW_PCB	lwip/include/lwip/memp.h	/^  MEMP_RAW_PCB,$/;"	e	enum:__anon16
MEMP_SANITY_CHECK	lwip/include/lwip/opt.h	/^#define MEMP_SANITY_CHECK	/;"	d
MEMP_STATS	lwip/include/lwip/opt.h	/^#define MEMP_STATS	/;"	d
MEMP_SYS_TIMEOUT	lwip/include/lwip/memp.h	/^  MEMP_SYS_TIMEOUT,$/;"	e	enum:__anon16
MEMP_TCPIP_MSG	lwip/include/lwip/memp.h	/^  MEMP_TCPIP_MSG,$/;"	e	enum:__anon16
MEMP_TCP_PCB	lwip/include/lwip/memp.h	/^  MEMP_TCP_PCB,$/;"	e	enum:__anon16
MEMP_TCP_PCB_LISTEN	lwip/include/lwip/memp.h	/^  MEMP_TCP_PCB_LISTEN,$/;"	e	enum:__anon16
MEMP_TCP_SEG	lwip/include/lwip/memp.h	/^  MEMP_TCP_SEG,$/;"	e	enum:__anon16
MEMP_UDP_PCB	lwip/include/lwip/memp.h	/^  MEMP_UDP_PCB,$/;"	e	enum:__anon16
MEM_ALIGN	lwip/include/lwip/mem.h	/^#define MEM_ALIGN(/;"	d
MEM_ALIGNMENT	lwip/include/lwip/opt.h	/^#define MEM_ALIGNMENT /;"	d
MEM_ALIGN_SIZE	lwip/include/lwip/mem.h	/^#define MEM_ALIGN_SIZE(/;"	d
MEM_DEBUG	lwip/include/lwip/opt.h	/^#define MEM_DEBUG /;"	d
MEM_SIZE	lwip/include/lwip/opt.h	/^#define MEM_SIZE /;"	d
MEM_SIZE	lwip/xv6/lwipopts.h	/^#define MEM_SIZE /;"	d
MEM_STATS	lwip/include/lwip/opt.h	/^#define MEM_STATS	/;"	d
MIN_CHALLENGE_LENGTH	lwip/netif/ppp/chap.h	/^#define MIN_CHALLENGE_LENGTH	/;"	d
MIN_SIZE	lwip/core/mem.c	/^#define MIN_SIZE /;"	d	file:
MPBOOT	mp.h	/^    #define MPBOOT /;"	d
MPBUS	mp.h	/^#define MPBUS /;"	d
MPIOAPIC	mp.h	/^#define MPIOAPIC /;"	d
MPIOINTR	mp.h	/^#define MPIOINTR /;"	d
MPLINTR	mp.h	/^#define MPLINTR /;"	d
MPPROC	mp.h	/^#define MPPROC /;"	d
MPSTACK	proc.h	/^#define MPSTACK /;"	d
MSCHAP_SUPPORT	lwip/include/lwip/opt.h	/^#define MSCHAP_SUPPORT /;"	d
MSG_DONTWAIT	lwip/include/lwip/sockets.h	/^#define MSG_DONTWAIT /;"	d
MSLEEPING	proc.h	/^    RUNNING, ZOMBIE, MSLEEPING};$/;"	e	enum:proc_state
MS_CHAP_RESPONSE_LEN	lwip/netif/ppp/chap.h	/^#define MS_CHAP_RESPONSE_LEN	/;"	d
MS_ChapResponse	lwip/netif/ppp/chpms.c	/^} MS_ChapResponse;$/;"	t	typeref:struct:__anon25	file:
MakeKey	lwip/netif/ppp/chpms.c	/^static void	MakeKey (u_char *, u_char *);$/;"	p	file:	signature:(u_char *, u_char *)
MakeKey	lwip/netif/ppp/chpms.c	/^static void MakeKey($/;"	f	file:	signature:( u_char *key, u_char *des_key )
NADDRS	fs.h	/^#define NADDRS /;"	d
NAKCIADDR	lwip/netif/ppp/ipcp.c	/^#define NAKCIADDR(/;"	d	file:
NAKCICHAP	lwip/netif/ppp/lcp.c	/^#define NAKCICHAP(/;"	d	file:
NAKCICHAR	lwip/netif/ppp/lcp.c	/^#define NAKCICHAR(/;"	d	file:
NAKCIDNS	lwip/netif/ppp/ipcp.c	/^#define NAKCIDNS(/;"	d	file:
NAKCILONG	lwip/netif/ppp/lcp.c	/^#define NAKCILONG(/;"	d	file:
NAKCILQR	lwip/netif/ppp/lcp.c	/^#define NAKCILQR(/;"	d	file:
NAKCISHORT	lwip/netif/ppp/lcp.c	/^#define NAKCISHORT(/;"	d	file:
NAKCIVJ	lwip/netif/ppp/ipcp.c	/^#define NAKCIVJ(/;"	d	file:
NAKCIVOID	lwip/netif/ppp/lcp.c	/^#define NAKCIVOID(/;"	d	file:
NBUF	param.h	/^#define NBUF /;"	d
NCPU	param.h	/^#define NCPU /;"	d
NDEV	param.h	/^#define NDEV /;"	d
NDIRECT	fs.h	/^#define NDIRECT /;"	d
NELEM	defs.h	/^#define NELEM(/;"	d
NETCONN_ACCEPT	lwip/include/lwip/api.h	/^  NETCONN_ACCEPT,$/;"	e	enum:netconn_state
NETCONN_CLOSE	lwip/include/lwip/api.h	/^  NETCONN_CLOSE$/;"	e	enum:netconn_state
NETCONN_CONNECT	lwip/include/lwip/api.h	/^  NETCONN_CONNECT,$/;"	e	enum:netconn_state
NETCONN_COPY	lwip/include/lwip/api.h	/^#define NETCONN_COPY /;"	d
NETCONN_EVT_RCVMINUS	lwip/include/lwip/api.h	/^  NETCONN_EVT_RCVMINUS,$/;"	e	enum:netconn_evt
NETCONN_EVT_RCVPLUS	lwip/include/lwip/api.h	/^  NETCONN_EVT_RCVPLUS,$/;"	e	enum:netconn_evt
NETCONN_EVT_SENDMINUS	lwip/include/lwip/api.h	/^  NETCONN_EVT_SENDMINUS$/;"	e	enum:netconn_evt
NETCONN_EVT_SENDPLUS	lwip/include/lwip/api.h	/^  NETCONN_EVT_SENDPLUS,$/;"	e	enum:netconn_evt
NETCONN_NOCOPY	lwip/include/lwip/api.h	/^#define NETCONN_NOCOPY /;"	d
NETCONN_NONE	lwip/include/lwip/api.h	/^  NETCONN_NONE,$/;"	e	enum:netconn_state
NETCONN_RAW	lwip/include/lwip/api.h	/^  NETCONN_RAW$/;"	e	enum:netconn_type
NETCONN_RECV	lwip/include/lwip/api.h	/^  NETCONN_RECV,$/;"	e	enum:netconn_state
NETCONN_TCP	lwip/include/lwip/api.h	/^  NETCONN_TCP,$/;"	e	enum:netconn_type
NETCONN_UDP	lwip/include/lwip/api.h	/^  NETCONN_UDP,$/;"	e	enum:netconn_type
NETCONN_UDPLITE	lwip/include/lwip/api.h	/^  NETCONN_UDPLITE,$/;"	e	enum:netconn_type
NETCONN_UDPNOCHKSUM	lwip/include/lwip/api.h	/^  NETCONN_UDPNOCHKSUM,$/;"	e	enum:netconn_type
NETCONN_WRITE	lwip/include/lwip/api.h	/^  NETCONN_WRITE,$/;"	e	enum:netconn_state
NETIF_DEBUG	lwip/include/lwip/opt.h	/^#define NETIF_DEBUG /;"	d
NETIF_DEBUG	lwip/xv6/lwipopts.h	/^#define NETIF_DEBUG /;"	d
NETIF_FLAG_BROADCAST	lwip/include/lwip/netif.h	/^#define NETIF_FLAG_BROADCAST /;"	d
NETIF_FLAG_DHCP	lwip/include/lwip/netif.h	/^#define NETIF_FLAG_DHCP /;"	d
NETIF_FLAG_LINK_UP	lwip/include/lwip/netif.h	/^#define NETIF_FLAG_LINK_UP /;"	d
NETIF_FLAG_POINTTOPOINT	lwip/include/lwip/netif.h	/^#define NETIF_FLAG_POINTTOPOINT /;"	d
NETIF_FLAG_UP	lwip/include/lwip/netif.h	/^#define NETIF_FLAG_UP /;"	d
NETIF_MAX_HWADDR_LEN	lwip/include/lwip/netif.h	/^#define NETIF_MAX_HWADDR_LEN /;"	d
NEW_A	lwip/netif/ppp/vj.h	/^#define NEW_A	/;"	d
NEW_C	lwip/netif/ppp/vj.h	/^#define NEW_C	/;"	d
NEW_I	lwip/netif/ppp/vj.h	/^#define NEW_I	/;"	d
NEW_S	lwip/netif/ppp/vj.h	/^#define NEW_S	/;"	d
NEW_U	lwip/netif/ppp/vj.h	/^#define NEW_U	/;"	d
NEW_W	lwip/netif/ppp/vj.h	/^#define NEW_W	/;"	d
NFILE	param.h	/^#define NFILE /;"	d
NINDIRECT	fs.h	/^#define NINDIRECT /;"	d
NINODE	param.h	/^#define NINODE /;"	d
NO	kbd.h	/^#define NO /;"	d
NOFILE	param.h	/^#define NOFILE /;"	d
NO_SYS	lwip/include/lwip/opt.h	/^#define NO_SYS /;"	d
NPMODE_DROP	lwip/netif/ppp/ppp.h	/^    NPMODE_DROP,        \/* silently drop the packet *\/$/;"	e	enum:NPmode
NPMODE_ERROR	lwip/netif/ppp/ppp.h	/^    NPMODE_ERROR,       \/* return an error *\/$/;"	e	enum:NPmode
NPMODE_PASS	lwip/netif/ppp/ppp.h	/^    NPMODE_PASS,        \/* pass the packet through *\/$/;"	e	enum:NPmode
NPMODE_QUEUE	lwip/netif/ppp/ppp.h	/^    NPMODE_QUEUE        \/* save it up for later. *\/$/;"	e	enum:NPmode
NPROC	param.h	/^#define NPROC /;"	d
NPmode	lwip/netif/ppp/ppp.h	/^enum NPmode {$/;"	g
NSEGS	proc.h	/^#define NSEGS /;"	d
NSLOTS	lwip/xv6/arch/sys_arch.c	/^#define NSLOTS /;"	d	file:
NTResp	lwip/netif/ppp/chpms.c	/^    u_char NTResp[24];$/;"	m	struct:__anon25	file:	access:public
NULL	defs.h	/^#define NULL /;"	d
NULL	lwip/include/lwip/def.h	/^#define NULL /;"	d
NULL	lwip/xv6/arch/sys_arch.c	/^#define NULL /;"	d	file:
NUMLOCK	kbd.h	/^#define NUMLOCK /;"	d
NUM_PPP	lwip/include/lwip/opt.h	/^#define NUM_PPP /;"	d
NUM_SOCKETS	lwip/api/sockets.c	/^#define NUM_SOCKETS /;"	d	file:
OPENED	lwip/netif/ppp/fsm.h	/^#define OPENED	/;"	d
OPT_PASSIVE	lwip/netif/ppp/fsm.h	/^#define OPT_PASSIVE	/;"	d
OPT_RESTART	lwip/netif/ppp/fsm.h	/^#define OPT_RESTART	/;"	d
OPT_SILENT	lwip/netif/ppp/fsm.h	/^#define OPT_SILENT	/;"	d
OP_ADDR_SETUP	e100.h	/^#define OP_ADDR_SETUP /;"	d
OP_CONFIG	e100.h	/^#define OP_CONFIG /;"	d
OP_DIAG	e100.h	/^#define OP_DIAG /;"	d
OP_DUMP	e100.h	/^#define OP_DUMP /;"	d
OP_LOAD_MC	e100.h	/^#define OP_LOAD_MC /;"	d
OP_MUL_ADDR_SETUP	e100.h	/^#define OP_MUL_ADDR_SETUP /;"	d
OP_NOP	e100.h	/^#define OP_NOP /;"	d
OP_TRANSMIT	e100.h	/^#define OP_TRANSMIT /;"	d
O_CREATE	fcntl.h	/^#define O_CREATE /;"	d
O_NONBLOCK	lwip/include/lwip/sockets.h	/^#define O_NONBLOCK /;"	d
O_RDONLY	fcntl.h	/^#define O_RDONLY /;"	d
O_RDWR	fcntl.h	/^#define O_RDWR /;"	d
O_WRONLY	fcntl.h	/^#define O_WRONLY /;"	d
PACK_STRUCT_BEGIN	lwip/include/lwip/arch.h	/^#define PACK_STRUCT_BEGIN$/;"	d
PACK_STRUCT_BEGIN	lwip/xv6/arch/cc.h	/^#define PACK_STRUCT_BEGIN$/;"	d
PACK_STRUCT_END	lwip/include/lwip/arch.h	/^#define PACK_STRUCT_END$/;"	d
PACK_STRUCT_END	lwip/xv6/arch/cc.h	/^#define PACK_STRUCT_END$/;"	d
PACK_STRUCT_FIELD	lwip/include/ipv4/lwip/icmp.h	/^  PACK_STRUCT_FIELD(u16_t _type_code);$/;"	p	struct:icmp_dur_hdr	access:public	signature:(u16_t _type_code)
PACK_STRUCT_FIELD	lwip/include/ipv4/lwip/icmp.h	/^  PACK_STRUCT_FIELD(u16_t _type_code);$/;"	p	struct:icmp_echo_hdr	access:public	signature:(u16_t _type_code)
PACK_STRUCT_FIELD	lwip/include/ipv4/lwip/icmp.h	/^  PACK_STRUCT_FIELD(u16_t _type_code);$/;"	p	struct:icmp_te_hdr	access:public	signature:(u16_t _type_code)
PACK_STRUCT_FIELD	lwip/include/ipv4/lwip/icmp.h	/^  PACK_STRUCT_FIELD(u16_t chksum);$/;"	p	struct:icmp_dur_hdr	access:public	signature:(u16_t chksum)
PACK_STRUCT_FIELD	lwip/include/ipv4/lwip/icmp.h	/^  PACK_STRUCT_FIELD(u16_t chksum);$/;"	p	struct:icmp_echo_hdr	access:public	signature:(u16_t chksum)
PACK_STRUCT_FIELD	lwip/include/ipv4/lwip/icmp.h	/^  PACK_STRUCT_FIELD(u16_t chksum);$/;"	p	struct:icmp_te_hdr	access:public	signature:(u16_t chksum)
PACK_STRUCT_FIELD	lwip/include/ipv4/lwip/icmp.h	/^  PACK_STRUCT_FIELD(u16_t id);$/;"	p	struct:icmp_echo_hdr	access:public	signature:(u16_t id)
PACK_STRUCT_FIELD	lwip/include/ipv4/lwip/icmp.h	/^  PACK_STRUCT_FIELD(u16_t seqno);$/;"	p	struct:icmp_echo_hdr	access:public	signature:(u16_t seqno)
PACK_STRUCT_FIELD	lwip/include/ipv4/lwip/icmp.h	/^  PACK_STRUCT_FIELD(u32_t unused);$/;"	p	struct:icmp_dur_hdr	access:public	signature:(u32_t unused)
PACK_STRUCT_FIELD	lwip/include/ipv4/lwip/icmp.h	/^  PACK_STRUCT_FIELD(u32_t unused);$/;"	p	struct:icmp_te_hdr	access:public	signature:(u32_t unused)
PACK_STRUCT_FIELD	lwip/include/ipv4/lwip/ip.h	/^  PACK_STRUCT_FIELD(struct ip_addr dest); $/;"	p	struct:ip_hdr	access:public	signature:(struct ip_addr dest)
PACK_STRUCT_FIELD	lwip/include/ipv4/lwip/ip.h	/^  PACK_STRUCT_FIELD(struct ip_addr src);$/;"	p	struct:ip_hdr	access:public	signature:(struct ip_addr src)
PACK_STRUCT_FIELD	lwip/include/ipv4/lwip/ip.h	/^  PACK_STRUCT_FIELD(u16_t _chksum);$/;"	p	struct:ip_hdr	access:public	signature:(u16_t _chksum)
PACK_STRUCT_FIELD	lwip/include/ipv4/lwip/ip.h	/^  PACK_STRUCT_FIELD(u16_t _id);$/;"	p	struct:ip_hdr	access:public	signature:(u16_t _id)
PACK_STRUCT_FIELD	lwip/include/ipv4/lwip/ip.h	/^  PACK_STRUCT_FIELD(u16_t _len);$/;"	p	struct:ip_hdr	access:public	signature:(u16_t _len)
PACK_STRUCT_FIELD	lwip/include/ipv4/lwip/ip.h	/^  PACK_STRUCT_FIELD(u16_t _offset);$/;"	p	struct:ip_hdr	access:public	signature:(u16_t _offset)
PACK_STRUCT_FIELD	lwip/include/ipv4/lwip/ip.h	/^  PACK_STRUCT_FIELD(u16_t _ttl_proto);$/;"	p	struct:ip_hdr	access:public	signature:(u16_t _ttl_proto)
PACK_STRUCT_FIELD	lwip/include/ipv4/lwip/ip.h	/^  PACK_STRUCT_FIELD(u16_t _v_hl_tos);$/;"	p	struct:ip_hdr	access:public	signature:(u16_t _v_hl_tos)
PACK_STRUCT_FIELD	lwip/include/ipv4/lwip/ip_addr.h	/^  PACK_STRUCT_FIELD(u32_t addr);$/;"	p	struct:ip_addr	access:public	signature:(u32_t addr)
PACK_STRUCT_FIELD	lwip/include/lwip/arch.h	/^#define PACK_STRUCT_FIELD(/;"	d
PACK_STRUCT_FIELD	lwip/include/lwip/dhcp.h	/^  PACK_STRUCT_FIELD(u16_t flags);$/;"	p	struct:dhcp_msg	access:public	signature:(u16_t flags)
PACK_STRUCT_FIELD	lwip/include/lwip/dhcp.h	/^  PACK_STRUCT_FIELD(u16_t secs);$/;"	p	struct:dhcp_msg	access:public	signature:(u16_t secs)
PACK_STRUCT_FIELD	lwip/include/lwip/dhcp.h	/^  PACK_STRUCT_FIELD(u32_t ciaddr);$/;"	p	struct:dhcp_msg	access:public	signature:(u32_t ciaddr)
PACK_STRUCT_FIELD	lwip/include/lwip/dhcp.h	/^  PACK_STRUCT_FIELD(u32_t cookie);$/;"	p	struct:dhcp_msg	access:public	signature:(u32_t cookie)
PACK_STRUCT_FIELD	lwip/include/lwip/dhcp.h	/^  PACK_STRUCT_FIELD(u32_t giaddr);$/;"	p	struct:dhcp_msg	access:public	signature:(u32_t giaddr)
PACK_STRUCT_FIELD	lwip/include/lwip/dhcp.h	/^  PACK_STRUCT_FIELD(u32_t siaddr);$/;"	p	struct:dhcp_msg	access:public	signature:(u32_t siaddr)
PACK_STRUCT_FIELD	lwip/include/lwip/dhcp.h	/^  PACK_STRUCT_FIELD(u32_t xid);$/;"	p	struct:dhcp_msg	access:public	signature:(u32_t xid)
PACK_STRUCT_FIELD	lwip/include/lwip/dhcp.h	/^  PACK_STRUCT_FIELD(u32_t yiaddr);$/;"	p	struct:dhcp_msg	access:public	signature:(u32_t yiaddr)
PACK_STRUCT_FIELD	lwip/include/lwip/dhcp.h	/^  PACK_STRUCT_FIELD(u8_t chaddr[DHCP_CHADDR_LEN]);$/;"	p	struct:dhcp_msg	access:public	signature:(u8_t chaddr[DHCP_CHADDR_LEN])
PACK_STRUCT_FIELD	lwip/include/lwip/dhcp.h	/^  PACK_STRUCT_FIELD(u8_t file[DHCP_FILE_LEN]);$/;"	p	struct:dhcp_msg	access:public	signature:(u8_t file[DHCP_FILE_LEN])
PACK_STRUCT_FIELD	lwip/include/lwip/dhcp.h	/^  PACK_STRUCT_FIELD(u8_t hlen);$/;"	p	struct:dhcp_msg	access:public	signature:(u8_t hlen)
PACK_STRUCT_FIELD	lwip/include/lwip/dhcp.h	/^  PACK_STRUCT_FIELD(u8_t hops);$/;"	p	struct:dhcp_msg	access:public	signature:(u8_t hops)
PACK_STRUCT_FIELD	lwip/include/lwip/dhcp.h	/^  PACK_STRUCT_FIELD(u8_t htype);$/;"	p	struct:dhcp_msg	access:public	signature:(u8_t htype)
PACK_STRUCT_FIELD	lwip/include/lwip/dhcp.h	/^  PACK_STRUCT_FIELD(u8_t op);$/;"	p	struct:dhcp_msg	access:public	signature:(u8_t op)
PACK_STRUCT_FIELD	lwip/include/lwip/dhcp.h	/^  PACK_STRUCT_FIELD(u8_t options[DHCP_OPTIONS_LEN]);$/;"	p	struct:dhcp_msg	access:public	signature:(u8_t options[DHCP_OPTIONS_LEN])
PACK_STRUCT_FIELD	lwip/include/lwip/dhcp.h	/^  PACK_STRUCT_FIELD(u8_t sname[DHCP_SNAME_LEN]);$/;"	p	struct:dhcp_msg	access:public	signature:(u8_t sname[DHCP_SNAME_LEN])
PACK_STRUCT_FIELD	lwip/include/lwip/tcp.h	/^  PACK_STRUCT_FIELD(u16_t _hdrlen_rsvd_flags);$/;"	p	struct:tcp_hdr	access:public	signature:(u16_t _hdrlen_rsvd_flags)
PACK_STRUCT_FIELD	lwip/include/lwip/tcp.h	/^  PACK_STRUCT_FIELD(u16_t chksum);$/;"	p	struct:tcp_hdr	access:public	signature:(u16_t chksum)
PACK_STRUCT_FIELD	lwip/include/lwip/tcp.h	/^  PACK_STRUCT_FIELD(u16_t dest);$/;"	p	struct:tcp_hdr	access:public	signature:(u16_t dest)
PACK_STRUCT_FIELD	lwip/include/lwip/tcp.h	/^  PACK_STRUCT_FIELD(u16_t src);$/;"	p	struct:tcp_hdr	access:public	signature:(u16_t src)
PACK_STRUCT_FIELD	lwip/include/lwip/tcp.h	/^  PACK_STRUCT_FIELD(u16_t urgp);$/;"	p	struct:tcp_hdr	access:public	signature:(u16_t urgp)
PACK_STRUCT_FIELD	lwip/include/lwip/tcp.h	/^  PACK_STRUCT_FIELD(u16_t wnd);$/;"	p	struct:tcp_hdr	access:public	signature:(u16_t wnd)
PACK_STRUCT_FIELD	lwip/include/lwip/tcp.h	/^  PACK_STRUCT_FIELD(u32_t ackno);$/;"	p	struct:tcp_hdr	access:public	signature:(u32_t ackno)
PACK_STRUCT_FIELD	lwip/include/lwip/tcp.h	/^  PACK_STRUCT_FIELD(u32_t seqno);$/;"	p	struct:tcp_hdr	access:public	signature:(u32_t seqno)
PACK_STRUCT_FIELD	lwip/include/lwip/udp.h	/^  PACK_STRUCT_FIELD(u16_t chksum);$/;"	p	struct:udp_hdr	access:public	signature:(u16_t chksum)
PACK_STRUCT_FIELD	lwip/include/lwip/udp.h	/^  PACK_STRUCT_FIELD(u16_t dest);  \/* src\/dest UDP ports *\/$/;"	p	struct:udp_hdr	access:public	signature:(u16_t dest)
PACK_STRUCT_FIELD	lwip/include/lwip/udp.h	/^  PACK_STRUCT_FIELD(u16_t len);$/;"	p	struct:udp_hdr	access:public	signature:(u16_t len)
PACK_STRUCT_FIELD	lwip/include/lwip/udp.h	/^  PACK_STRUCT_FIELD(u16_t src);$/;"	p	struct:udp_hdr	access:public	signature:(u16_t src)
PACK_STRUCT_FIELD	lwip/include/netif/etharp.h	/^  PACK_STRUCT_FIELD(struct eth_addr dest);$/;"	p	struct:eth_hdr	access:public	signature:(struct eth_addr dest)
PACK_STRUCT_FIELD	lwip/include/netif/etharp.h	/^  PACK_STRUCT_FIELD(struct eth_addr dhwaddr);$/;"	p	struct:etharp_hdr	access:public	signature:(struct eth_addr dhwaddr)
PACK_STRUCT_FIELD	lwip/include/netif/etharp.h	/^  PACK_STRUCT_FIELD(struct eth_addr shwaddr);$/;"	p	struct:etharp_hdr	access:public	signature:(struct eth_addr shwaddr)
PACK_STRUCT_FIELD	lwip/include/netif/etharp.h	/^  PACK_STRUCT_FIELD(struct eth_addr src);$/;"	p	struct:eth_hdr	access:public	signature:(struct eth_addr src)
PACK_STRUCT_FIELD	lwip/include/netif/etharp.h	/^  PACK_STRUCT_FIELD(struct eth_hdr eth);$/;"	p	struct:ethip_hdr	access:public	signature:(struct eth_hdr eth)
PACK_STRUCT_FIELD	lwip/include/netif/etharp.h	/^  PACK_STRUCT_FIELD(struct eth_hdr ethhdr);$/;"	p	struct:etharp_hdr	access:public	signature:(struct eth_hdr ethhdr)
PACK_STRUCT_FIELD	lwip/include/netif/etharp.h	/^  PACK_STRUCT_FIELD(struct ip_addr dipaddr);$/;"	p	struct:etharp_hdr	access:public	signature:(struct ip_addr dipaddr)
PACK_STRUCT_FIELD	lwip/include/netif/etharp.h	/^  PACK_STRUCT_FIELD(struct ip_addr sipaddr);$/;"	p	struct:etharp_hdr	access:public	signature:(struct ip_addr sipaddr)
PACK_STRUCT_FIELD	lwip/include/netif/etharp.h	/^  PACK_STRUCT_FIELD(struct ip_hdr ip);$/;"	p	struct:ethip_hdr	access:public	signature:(struct ip_hdr ip)
PACK_STRUCT_FIELD	lwip/include/netif/etharp.h	/^  PACK_STRUCT_FIELD(u16_t _hwlen_protolen);$/;"	p	struct:etharp_hdr	access:public	signature:(u16_t _hwlen_protolen)
PACK_STRUCT_FIELD	lwip/include/netif/etharp.h	/^  PACK_STRUCT_FIELD(u16_t hwtype);$/;"	p	struct:etharp_hdr	access:public	signature:(u16_t hwtype)
PACK_STRUCT_FIELD	lwip/include/netif/etharp.h	/^  PACK_STRUCT_FIELD(u16_t opcode);$/;"	p	struct:etharp_hdr	access:public	signature:(u16_t opcode)
PACK_STRUCT_FIELD	lwip/include/netif/etharp.h	/^  PACK_STRUCT_FIELD(u16_t proto);$/;"	p	struct:etharp_hdr	access:public	signature:(u16_t proto)
PACK_STRUCT_FIELD	lwip/include/netif/etharp.h	/^  PACK_STRUCT_FIELD(u16_t type);$/;"	p	struct:eth_hdr	access:public	signature:(u16_t type)
PACK_STRUCT_FIELD	lwip/include/netif/etharp.h	/^  PACK_STRUCT_FIELD(u8_t addr[6]);$/;"	p	struct:eth_addr	access:public	signature:(u8_t addr[6])
PACK_STRUCT_FIELD	lwip/xv6/arch/cc.h	/^#define PACK_STRUCT_FIELD(/;"	d
PACK_STRUCT_STRUCT	lwip/include/ipv4/lwip/icmp.h	/^} PACK_STRUCT_STRUCT;$/;"	v	typeref:struct:icmp_dur_hdr
PACK_STRUCT_STRUCT	lwip/include/ipv4/lwip/icmp.h	/^} PACK_STRUCT_STRUCT;$/;"	v	typeref:struct:icmp_echo_hdr
PACK_STRUCT_STRUCT	lwip/include/ipv4/lwip/icmp.h	/^} PACK_STRUCT_STRUCT;$/;"	v	typeref:struct:icmp_te_hdr
PACK_STRUCT_STRUCT	lwip/include/ipv4/lwip/ip.h	/^} PACK_STRUCT_STRUCT;$/;"	v	typeref:struct:ip_hdr
PACK_STRUCT_STRUCT	lwip/include/ipv4/lwip/ip_addr.h	/^} PACK_STRUCT_STRUCT;$/;"	v	typeref:struct:ip_addr
PACK_STRUCT_STRUCT	lwip/include/lwip/dhcp.h	/^} PACK_STRUCT_STRUCT;$/;"	v	typeref:struct:dhcp_msg
PACK_STRUCT_STRUCT	lwip/include/lwip/tcp.h	/^} PACK_STRUCT_STRUCT;$/;"	v	typeref:struct:tcp_hdr
PACK_STRUCT_STRUCT	lwip/include/lwip/udp.h	/^} PACK_STRUCT_STRUCT;$/;"	v	typeref:struct:udp_hdr
PACK_STRUCT_STRUCT	lwip/include/netif/etharp.h	/^} PACK_STRUCT_STRUCT;$/;"	v	typeref:struct:eth_addr
PACK_STRUCT_STRUCT	lwip/include/netif/etharp.h	/^} PACK_STRUCT_STRUCT;$/;"	v	typeref:struct:eth_hdr
PACK_STRUCT_STRUCT	lwip/include/netif/etharp.h	/^} PACK_STRUCT_STRUCT;$/;"	v	typeref:struct:etharp_hdr
PACK_STRUCT_STRUCT	lwip/xv6/arch/cc.h	/^#define PACK_STRUCT_STRUCT /;"	d
PADDING	lwip/netif/ppp/md5.c	/^static unsigned char PADDING[64] = {$/;"	v	file:
PAGE	param.h	/^#define PAGE /;"	d
PAP_H	lwip/netif/ppp/pap.h	/^#define PAP_H$/;"	d
PAP_PEER	lwip/netif/ppp/auth.c	/^#define PAP_PEER /;"	d	file:
PAP_SUPPORT	lwip/include/lwip/opt.h	/^#define PAP_SUPPORT /;"	d
PAP_WITHPEER	lwip/netif/ppp/auth.c	/^#define PAP_WITHPEER /;"	d	file:
PBUF_DEBUG	lwip/include/lwip/opt.h	/^#define PBUF_DEBUG /;"	d
PBUF_DEBUG	lwip/xv6/lwipopts.h	/^#define PBUF_DEBUG /;"	d
PBUF_FLAG_LINK_BROADCAST	lwip/include/lwip/pbuf.h	/^#define PBUF_FLAG_LINK_BROADCAST /;"	d
PBUF_FLAG_POOL	lwip/include/lwip/pbuf.h	/^#define PBUF_FLAG_POOL /;"	d
PBUF_FLAG_RAM	lwip/include/lwip/pbuf.h	/^#define PBUF_FLAG_RAM /;"	d
PBUF_FLAG_REF	lwip/include/lwip/pbuf.h	/^#define PBUF_FLAG_REF /;"	d
PBUF_FLAG_ROM	lwip/include/lwip/pbuf.h	/^#define PBUF_FLAG_ROM /;"	d
PBUF_IP	lwip/include/lwip/pbuf.h	/^  PBUF_IP,$/;"	e	enum:__anon14
PBUF_IP_HLEN	lwip/include/lwip/pbuf.h	/^#define PBUF_IP_HLEN /;"	d
PBUF_LINK	lwip/include/lwip/pbuf.h	/^  PBUF_LINK,$/;"	e	enum:__anon14
PBUF_LINK_HLEN	lwip/include/lwip/opt.h	/^#define PBUF_LINK_HLEN /;"	d
PBUF_LINK_HLEN	lwip/xv6/lwipopts.h	/^#define PBUF_LINK_HLEN /;"	d
PBUF_POOL	lwip/include/lwip/pbuf.h	/^  PBUF_POOL$/;"	e	enum:__anon15
PBUF_POOL_BUFSIZE	lwip/include/lwip/opt.h	/^#define PBUF_POOL_BUFSIZE /;"	d
PBUF_POOL_FAST_FREE	lwip/core/pbuf.c	/^#define PBUF_POOL_FAST_FREE(/;"	d	file:
PBUF_POOL_FREE	lwip/core/pbuf.c	/^#define PBUF_POOL_FREE(/;"	d	file:
PBUF_POOL_SIZE	lwip/include/lwip/opt.h	/^#define PBUF_POOL_SIZE /;"	d
PBUF_POOL_SIZE	lwip/xv6/lwipopts.h	/^#define PBUF_POOL_SIZE /;"	d
PBUF_RAM	lwip/include/lwip/pbuf.h	/^  PBUF_RAM,$/;"	e	enum:__anon15
PBUF_RAW	lwip/include/lwip/pbuf.h	/^  PBUF_RAW$/;"	e	enum:__anon14
PBUF_REF	lwip/include/lwip/pbuf.h	/^  PBUF_REF,$/;"	e	enum:__anon15
PBUF_ROM	lwip/include/lwip/pbuf.h	/^  PBUF_ROM,$/;"	e	enum:__anon15
PBUF_STATS	lwip/include/lwip/opt.h	/^#define PBUF_STATS	/;"	d
PBUF_TRANSPORT	lwip/include/lwip/pbuf.h	/^  PBUF_TRANSPORT,$/;"	e	enum:__anon14
PBUF_TRANSPORT_HLEN	lwip/include/lwip/pbuf.h	/^#define PBUF_TRANSPORT_HLEN /;"	d
PCI32_DMA_BOUNCE_THRESHOLD	pcireg.h	/^#define PCI32_DMA_BOUNCE_THRESHOLD	/;"	d
PCINT	lapic.c	/^#define PCINT /;"	d	file:
PCI_BHLC_CODE	pcireg.h	/^#define PCI_BHLC_CODE(/;"	d
PCI_BHLC_REG	pcireg.h	/^#define	PCI_BHLC_REG	/;"	d
PCI_BIST	pcireg.h	/^#define	PCI_BIST(/;"	d
PCI_BIST_MASK	pcireg.h	/^#define	PCI_BIST_MASK	/;"	d
PCI_BIST_SHIFT	pcireg.h	/^#define	PCI_BIST_SHIFT	/;"	d
PCI_BRIDGE_BUS_PRIMARY_SHIFT	pcireg.h	/^#define   PCI_BRIDGE_BUS_PRIMARY_SHIFT	/;"	d
PCI_BRIDGE_BUS_REG	pcireg.h	/^#define PCI_BRIDGE_BUS_REG	/;"	d
PCI_BRIDGE_BUS_SECONDARY_SHIFT	pcireg.h	/^#define   PCI_BRIDGE_BUS_SECONDARY_SHIFT	/;"	d
PCI_BRIDGE_BUS_SUBORDINATE_SHIFT	pcireg.h	/^#define   PCI_BRIDGE_BUS_SUBORDINATE_SHIFT	/;"	d
PCI_BRIDGE_CONTROL_DISC_TIMER_SERR	pcireg.h	/^#define   PCI_BRIDGE_CONTROL_DISC_TIMER_SERR	/;"	d
PCI_BRIDGE_CONTROL_DISC_TIMER_STAT	pcireg.h	/^#define   PCI_BRIDGE_CONTROL_DISC_TIMER_STAT	/;"	d
PCI_BRIDGE_CONTROL_ISA	pcireg.h	/^#define   PCI_BRIDGE_CONTROL_ISA	/;"	d
PCI_BRIDGE_CONTROL_MABRT	pcireg.h	/^#define   PCI_BRIDGE_CONTROL_MABRT	/;"	d
PCI_BRIDGE_CONTROL_MASK	pcireg.h	/^#define	  PCI_BRIDGE_CONTROL_MASK	/;"	d
PCI_BRIDGE_CONTROL_PERE	pcireg.h	/^#define   PCI_BRIDGE_CONTROL_PERE	/;"	d
PCI_BRIDGE_CONTROL_PRI_DISC_TIMER	pcireg.h	/^#define   PCI_BRIDGE_CONTROL_PRI_DISC_TIMER	/;"	d
PCI_BRIDGE_CONTROL_REG	pcireg.h	/^#define PCI_BRIDGE_CONTROL_REG	/;"	d
PCI_BRIDGE_CONTROL_SECBR	pcireg.h	/^#define   PCI_BRIDGE_CONTROL_SECBR	/;"	d
PCI_BRIDGE_CONTROL_SECFASTB2B	pcireg.h	/^#define   PCI_BRIDGE_CONTROL_SECFASTB2B	/;"	d
PCI_BRIDGE_CONTROL_SEC_DISC_TIMER	pcireg.h	/^#define   PCI_BRIDGE_CONTROL_SEC_DISC_TIMER	/;"	d
PCI_BRIDGE_CONTROL_SERR	pcireg.h	/^#define   PCI_BRIDGE_CONTROL_SERR	/;"	d
PCI_BRIDGE_CONTROL_SHIFT	pcireg.h	/^#define	  PCI_BRIDGE_CONTROL_SHIFT	/;"	d
PCI_BRIDGE_CONTROL_VGA	pcireg.h	/^#define   PCI_BRIDGE_CONTROL_VGA	/;"	d
PCI_BRIDGE_IOHIGH_BASE_MASK	pcireg.h	/^#define	  PCI_BRIDGE_IOHIGH_BASE_MASK	/;"	d
PCI_BRIDGE_IOHIGH_BASE_SHIFT	pcireg.h	/^#define	  PCI_BRIDGE_IOHIGH_BASE_SHIFT	/;"	d
PCI_BRIDGE_IOHIGH_LIMIT_MASK	pcireg.h	/^#define	  PCI_BRIDGE_IOHIGH_LIMIT_MASK	/;"	d
PCI_BRIDGE_IOHIGH_LIMIT_SHIFT	pcireg.h	/^#define	  PCI_BRIDGE_IOHIGH_LIMIT_SHIFT	/;"	d
PCI_BRIDGE_IOHIGH_REG	pcireg.h	/^#define PCI_BRIDGE_IOHIGH_REG	/;"	d
PCI_BRIDGE_IO_32BITS	pcireg.h	/^#define	  PCI_BRIDGE_IO_32BITS(/;"	d
PCI_BRIDGE_MEMORY_BASE_MASK	pcireg.h	/^#define	  PCI_BRIDGE_MEMORY_BASE_MASK	/;"	d
PCI_BRIDGE_MEMORY_BASE_SHIFT	pcireg.h	/^#define	  PCI_BRIDGE_MEMORY_BASE_SHIFT	/;"	d
PCI_BRIDGE_MEMORY_LIMIT_MASK	pcireg.h	/^#define	  PCI_BRIDGE_MEMORY_LIMIT_MASK	/;"	d
PCI_BRIDGE_MEMORY_LIMIT_SHIFT	pcireg.h	/^#define	  PCI_BRIDGE_MEMORY_LIMIT_SHIFT	/;"	d
PCI_BRIDGE_MEMORY_REG	pcireg.h	/^#define PCI_BRIDGE_MEMORY_REG	/;"	d
PCI_BRIDGE_PREFETCHBASE32_REG	pcireg.h	/^#define PCI_BRIDGE_PREFETCHBASE32_REG	/;"	d
PCI_BRIDGE_PREFETCHLIMIT32_REG	pcireg.h	/^#define PCI_BRIDGE_PREFETCHLIMIT32_REG	/;"	d
PCI_BRIDGE_PREFETCHMEM_64BITS	pcireg.h	/^#define	  PCI_BRIDGE_PREFETCHMEM_64BITS(/;"	d
PCI_BRIDGE_PREFETCHMEM_BASE_MASK	pcireg.h	/^#define	  PCI_BRIDGE_PREFETCHMEM_BASE_MASK	/;"	d
PCI_BRIDGE_PREFETCHMEM_BASE_SHIFT	pcireg.h	/^#define	  PCI_BRIDGE_PREFETCHMEM_BASE_SHIFT	/;"	d
PCI_BRIDGE_PREFETCHMEM_LIMIT_MASK	pcireg.h	/^#define	  PCI_BRIDGE_PREFETCHMEM_LIMIT_MASK	/;"	d
PCI_BRIDGE_PREFETCHMEM_LIMIT_SHIFT	pcireg.h	/^#define	  PCI_BRIDGE_PREFETCHMEM_LIMIT_SHIFT	/;"	d
PCI_BRIDGE_PREFETCHMEM_REG	pcireg.h	/^#define PCI_BRIDGE_PREFETCHMEM_REG	/;"	d
PCI_BRIDGE_STATIO_IOBASE_MASK	pcireg.h	/^#define	  PCI_BRIDGE_STATIO_IOBASE_MASK	/;"	d
PCI_BRIDGE_STATIO_IOBASE_SHIFT	pcireg.h	/^#define	  PCI_BRIDGE_STATIO_IOBASE_SHIFT	/;"	d
PCI_BRIDGE_STATIO_IOLIMIT_MASK	pcireg.h	/^#define	  PCI_BRIDGE_STATIO_IOLIMIT_MASK	/;"	d
PCI_BRIDGE_STATIO_IOLIMIT_SHIFT	pcireg.h	/^#define	  PCI_BRIDGE_STATIO_IOLIMIT_SHIFT	/;"	d
PCI_BRIDGE_STATIO_REG	pcireg.h	/^#define PCI_BRIDGE_STATIO_REG	/;"	d
PCI_BRIDGE_STATIO_STATUS_MASK	pcireg.h	/^#define	  PCI_BRIDGE_STATIO_STATUS_MASK	/;"	d
PCI_BRIDGE_STATIO_STATUS_SHIFT	pcireg.h	/^#define	  PCI_BRIDGE_STATIO_STATUS_SHIFT	/;"	d
PCI_CACHELINE	pcireg.h	/^#define	PCI_CACHELINE(/;"	d
PCI_CACHELINE_MASK	pcireg.h	/^#define	PCI_CACHELINE_MASK	/;"	d
PCI_CACHELINE_SHIFT	pcireg.h	/^#define	PCI_CACHELINE_SHIFT	/;"	d
PCI_CAPLISTPTR_REG	pcireg.h	/^#define	PCI_CAPLISTPTR_REG	/;"	d
PCI_CAPLIST_CAP	pcireg.h	/^#define	PCI_CAPLIST_CAP(/;"	d
PCI_CAPLIST_NEXT	pcireg.h	/^#define	PCI_CAPLIST_NEXT(/;"	d
PCI_CAPLIST_PTR	pcireg.h	/^#define	PCI_CAPLIST_PTR(/;"	d
PCI_CAP_AGP	pcireg.h	/^#define	PCI_CAP_AGP	/;"	d
PCI_CAP_AGP8	pcireg.h	/^#define	PCI_CAP_AGP8	/;"	d
PCI_CAP_AGP_MAJOR	pcireg.h	/^#define PCI_CAP_AGP_MAJOR(/;"	d
PCI_CAP_AGP_MINOR	pcireg.h	/^#define PCI_CAP_AGP_MINOR(/;"	d
PCI_CAP_CPCI_HOTSWAP	pcireg.h	/^#define	PCI_CAP_CPCI_HOTSWAP	/;"	d
PCI_CAP_CPCI_RSRCCTL	pcireg.h	/^#define	PCI_CAP_CPCI_RSRCCTL	/;"	d
PCI_CAP_DEBUGPORT	pcireg.h	/^#define	PCI_CAP_DEBUGPORT	/;"	d
PCI_CAP_HOTPLUG	pcireg.h	/^#define	PCI_CAP_HOTPLUG	/;"	d
PCI_CAP_LDT	pcireg.h	/^#define	PCI_CAP_LDT	/;"	d
PCI_CAP_MSI	pcireg.h	/^#define	PCI_CAP_MSI	/;"	d
PCI_CAP_MSIX	pcireg.h	/^#define	PCI_CAP_MSIX	/;"	d
PCI_CAP_PCIEXPRESS	pcireg.h	/^#define	PCI_CAP_PCIEXPRESS /;"	d
PCI_CAP_PCIX	pcireg.h	/^#define	PCI_CAP_PCIX	/;"	d
PCI_CAP_PWRMGMT	pcireg.h	/^#define	PCI_CAP_PWRMGMT	/;"	d
PCI_CAP_RESERVED0	pcireg.h	/^#define	PCI_CAP_RESERVED0	/;"	d
PCI_CAP_SECURE	pcireg.h	/^#define	PCI_CAP_SECURE	/;"	d
PCI_CAP_SLOTID	pcireg.h	/^#define	PCI_CAP_SLOTID	/;"	d
PCI_CAP_VENDSPEC	pcireg.h	/^#define	PCI_CAP_VENDSPEC	/;"	d
PCI_CAP_VPD	pcireg.h	/^#define	PCI_CAP_VPD	/;"	d
PCI_CARDBUS_CAPLISTPTR_REG	pcireg.h	/^#define	PCI_CARDBUS_CAPLISTPTR_REG	/;"	d
PCI_CARDBUS_CIS_REG	pcireg.h	/^#define PCI_CARDBUS_CIS_REG /;"	d
PCI_CLASS	pcireg.h	/^#define	PCI_CLASS(/;"	d
PCI_CLASS_BRIDGE	pcireg.h	/^#define	PCI_CLASS_BRIDGE	/;"	d
PCI_CLASS_CODE	pcireg.h	/^#define	PCI_CLASS_CODE(/;"	d
PCI_CLASS_COMMUNICATIONS	pcireg.h	/^#define	PCI_CLASS_COMMUNICATIONS	/;"	d
PCI_CLASS_CRYPTO	pcireg.h	/^#define	PCI_CLASS_CRYPTO	/;"	d
PCI_CLASS_DASP	pcireg.h	/^#define	PCI_CLASS_DASP	/;"	d
PCI_CLASS_DISPLAY	pcireg.h	/^#define	PCI_CLASS_DISPLAY	/;"	d
PCI_CLASS_DOCK	pcireg.h	/^#define	PCI_CLASS_DOCK	/;"	d
PCI_CLASS_I2O	pcireg.h	/^#define	PCI_CLASS_I2O	/;"	d
PCI_CLASS_INPUT	pcireg.h	/^#define	PCI_CLASS_INPUT	/;"	d
PCI_CLASS_MASK	pcireg.h	/^#define	PCI_CLASS_MASK	/;"	d
PCI_CLASS_MASS_STORAGE	pcireg.h	/^#define	PCI_CLASS_MASS_STORAGE	/;"	d
PCI_CLASS_MEMORY	pcireg.h	/^#define	PCI_CLASS_MEMORY	/;"	d
PCI_CLASS_MULTIMEDIA	pcireg.h	/^#define	PCI_CLASS_MULTIMEDIA	/;"	d
PCI_CLASS_NETWORK	pcireg.h	/^#define	PCI_CLASS_NETWORK	/;"	d
PCI_CLASS_PREHISTORIC	pcireg.h	/^#define	PCI_CLASS_PREHISTORIC	/;"	d
PCI_CLASS_PROCESSOR	pcireg.h	/^#define	PCI_CLASS_PROCESSOR	/;"	d
PCI_CLASS_REG	pcireg.h	/^#define	PCI_CLASS_REG	/;"	d
PCI_CLASS_SATCOM	pcireg.h	/^#define	PCI_CLASS_SATCOM	/;"	d
PCI_CLASS_SERIALBUS	pcireg.h	/^#define	PCI_CLASS_SERIALBUS	/;"	d
PCI_CLASS_SHIFT	pcireg.h	/^#define	PCI_CLASS_SHIFT	/;"	d
PCI_CLASS_SYSTEM	pcireg.h	/^#define	PCI_CLASS_SYSTEM	/;"	d
PCI_CLASS_UNDEFINED	pcireg.h	/^#define	PCI_CLASS_UNDEFINED	/;"	d
PCI_CLASS_WIRELESS	pcireg.h	/^#define	PCI_CLASS_WIRELESS	/;"	d
PCI_COMMAND_BACKTOBACK_ENABLE	pcireg.h	/^#define	PCI_COMMAND_BACKTOBACK_ENABLE	/;"	d
PCI_COMMAND_INVALIDATE_ENABLE	pcireg.h	/^#define	PCI_COMMAND_INVALIDATE_ENABLE	/;"	d
PCI_COMMAND_IO_ENABLE	pcireg.h	/^#define	PCI_COMMAND_IO_ENABLE	/;"	d
PCI_COMMAND_MASK	pcireg.h	/^#define	PCI_COMMAND_MASK	/;"	d
PCI_COMMAND_MASTER_ENABLE	pcireg.h	/^#define	PCI_COMMAND_MASTER_ENABLE	/;"	d
PCI_COMMAND_MEM_ENABLE	pcireg.h	/^#define	PCI_COMMAND_MEM_ENABLE	/;"	d
PCI_COMMAND_PALETTE_ENABLE	pcireg.h	/^#define	PCI_COMMAND_PALETTE_ENABLE	/;"	d
PCI_COMMAND_PARITY_ENABLE	pcireg.h	/^#define	PCI_COMMAND_PARITY_ENABLE	/;"	d
PCI_COMMAND_SERR_ENABLE	pcireg.h	/^#define	PCI_COMMAND_SERR_ENABLE	/;"	d
PCI_COMMAND_SHIFT	pcireg.h	/^#define	PCI_COMMAND_SHIFT	/;"	d
PCI_COMMAND_SPECIAL_ENABLE	pcireg.h	/^#define	PCI_COMMAND_SPECIAL_ENABLE	/;"	d
PCI_COMMAND_STATUS_CODE	pcireg.h	/^#define PCI_COMMAND_STATUS_CODE(/;"	d
PCI_COMMAND_STATUS_REG	pcireg.h	/^#define	PCI_COMMAND_STATUS_REG	/;"	d
PCI_COMMAND_STEPPING_ENABLE	pcireg.h	/^#define	PCI_COMMAND_STEPPING_ENABLE	/;"	d
PCI_HDRTYPE	pcireg.h	/^#define	PCI_HDRTYPE(/;"	d
PCI_HDRTYPE_DEVICE	pcireg.h	/^#define PCI_HDRTYPE_DEVICE	/;"	d
PCI_HDRTYPE_MASK	pcireg.h	/^#define	PCI_HDRTYPE_MASK	/;"	d
PCI_HDRTYPE_MULTIFN	pcireg.h	/^#define	PCI_HDRTYPE_MULTIFN(/;"	d
PCI_HDRTYPE_PCB	pcireg.h	/^#define PCI_HDRTYPE_PCB	/;"	d
PCI_HDRTYPE_PPB	pcireg.h	/^#define PCI_HDRTYPE_PPB	/;"	d
PCI_HDRTYPE_SHIFT	pcireg.h	/^#define	PCI_HDRTYPE_SHIFT	/;"	d
PCI_HDRTYPE_TYPE	pcireg.h	/^#define	PCI_HDRTYPE_TYPE(/;"	d
PCI_ID_CODE	pcireg.h	/^#define PCI_ID_CODE(/;"	d
PCI_ID_REG	pcireg.h	/^#define	PCI_ID_REG	/;"	d
PCI_INTERFACE	pcireg.h	/^#define	PCI_INTERFACE(/;"	d
PCI_INTERFACE_MASK	pcireg.h	/^#define	PCI_INTERFACE_MASK	/;"	d
PCI_INTERFACE_SHIFT	pcireg.h	/^#define	PCI_INTERFACE_SHIFT	/;"	d
PCI_INTERRUPT_CODE	pcireg.h	/^#define PCI_INTERRUPT_CODE(/;"	d
PCI_INTERRUPT_GRANT	pcireg.h	/^#define	PCI_INTERRUPT_GRANT(/;"	d
PCI_INTERRUPT_GRANT_MASK	pcireg.h	/^#define	PCI_INTERRUPT_GRANT_MASK	/;"	d
PCI_INTERRUPT_GRANT_SHIFT	pcireg.h	/^#define	PCI_INTERRUPT_GRANT_SHIFT	/;"	d
PCI_INTERRUPT_LATENCY	pcireg.h	/^#define	PCI_INTERRUPT_LATENCY(/;"	d
PCI_INTERRUPT_LATENCY_MASK	pcireg.h	/^#define	PCI_INTERRUPT_LATENCY_MASK	/;"	d
PCI_INTERRUPT_LATENCY_SHIFT	pcireg.h	/^#define	PCI_INTERRUPT_LATENCY_SHIFT	/;"	d
PCI_INTERRUPT_LINE	pcireg.h	/^#define	PCI_INTERRUPT_LINE(/;"	d
PCI_INTERRUPT_LINE_MASK	pcireg.h	/^#define	PCI_INTERRUPT_LINE_MASK	/;"	d
PCI_INTERRUPT_LINE_SHIFT	pcireg.h	/^#define	PCI_INTERRUPT_LINE_SHIFT	/;"	d
PCI_INTERRUPT_PIN	pcireg.h	/^#define	PCI_INTERRUPT_PIN(/;"	d
PCI_INTERRUPT_PIN_A	pcireg.h	/^#define	PCI_INTERRUPT_PIN_A	/;"	d
PCI_INTERRUPT_PIN_B	pcireg.h	/^#define	PCI_INTERRUPT_PIN_B	/;"	d
PCI_INTERRUPT_PIN_C	pcireg.h	/^#define	PCI_INTERRUPT_PIN_C	/;"	d
PCI_INTERRUPT_PIN_D	pcireg.h	/^#define	PCI_INTERRUPT_PIN_D	/;"	d
PCI_INTERRUPT_PIN_MASK	pcireg.h	/^#define	PCI_INTERRUPT_PIN_MASK	/;"	d
PCI_INTERRUPT_PIN_MAX	pcireg.h	/^#define	PCI_INTERRUPT_PIN_MAX	/;"	d
PCI_INTERRUPT_PIN_NONE	pcireg.h	/^#define	PCI_INTERRUPT_PIN_NONE	/;"	d
PCI_INTERRUPT_PIN_SHIFT	pcireg.h	/^#define	PCI_INTERRUPT_PIN_SHIFT	/;"	d
PCI_INTERRUPT_REG	pcireg.h	/^#define	PCI_INTERRUPT_REG	/;"	d
PCI_LATTIMER	pcireg.h	/^#define	PCI_LATTIMER(/;"	d
PCI_LATTIMER_MASK	pcireg.h	/^#define	PCI_LATTIMER_MASK	/;"	d
PCI_LATTIMER_SHIFT	pcireg.h	/^#define	PCI_LATTIMER_SHIFT	/;"	d
PCI_MAPREG_END	pcireg.h	/^#define	PCI_MAPREG_END	/;"	d
PCI_MAPREG_IO_ADDR	pcireg.h	/^#define	PCI_MAPREG_IO_ADDR(/;"	d
PCI_MAPREG_IO_ADDR_MASK	pcireg.h	/^#define	PCI_MAPREG_IO_ADDR_MASK	/;"	d
PCI_MAPREG_IO_SIZE	pcireg.h	/^#define	PCI_MAPREG_IO_SIZE(/;"	d
PCI_MAPREG_MEM64_ADDR	pcireg.h	/^#define	PCI_MAPREG_MEM64_ADDR(/;"	d
PCI_MAPREG_MEM64_ADDR_MASK	pcireg.h	/^#define	PCI_MAPREG_MEM64_ADDR_MASK	/;"	d
PCI_MAPREG_MEM64_SIZE	pcireg.h	/^#define	PCI_MAPREG_MEM64_SIZE(/;"	d
PCI_MAPREG_MEM_ADDR	pcireg.h	/^#define	PCI_MAPREG_MEM_ADDR(/;"	d
PCI_MAPREG_MEM_ADDR_MASK	pcireg.h	/^#define	PCI_MAPREG_MEM_ADDR_MASK	/;"	d
PCI_MAPREG_MEM_PREFETCHABLE	pcireg.h	/^#define	PCI_MAPREG_MEM_PREFETCHABLE(/;"	d
PCI_MAPREG_MEM_PREFETCHABLE_MASK	pcireg.h	/^#define	PCI_MAPREG_MEM_PREFETCHABLE_MASK	/;"	d
PCI_MAPREG_MEM_SIZE	pcireg.h	/^#define	PCI_MAPREG_MEM_SIZE(/;"	d
PCI_MAPREG_MEM_TYPE	pcireg.h	/^#define	PCI_MAPREG_MEM_TYPE(/;"	d
PCI_MAPREG_MEM_TYPE_32BIT	pcireg.h	/^#define	PCI_MAPREG_MEM_TYPE_32BIT	/;"	d
PCI_MAPREG_MEM_TYPE_32BIT_1M	pcireg.h	/^#define	PCI_MAPREG_MEM_TYPE_32BIT_1M	/;"	d
PCI_MAPREG_MEM_TYPE_64BIT	pcireg.h	/^#define	PCI_MAPREG_MEM_TYPE_64BIT	/;"	d
PCI_MAPREG_MEM_TYPE_MASK	pcireg.h	/^#define	PCI_MAPREG_MEM_TYPE_MASK	/;"	d
PCI_MAPREG_NUM	pcireg.h	/^#define PCI_MAPREG_NUM(/;"	d
PCI_MAPREG_PCB_END	pcireg.h	/^#define	PCI_MAPREG_PCB_END	/;"	d
PCI_MAPREG_PPB_END	pcireg.h	/^#define	PCI_MAPREG_PPB_END	/;"	d
PCI_MAPREG_ROM	pcireg.h	/^#define	PCI_MAPREG_ROM	/;"	d
PCI_MAPREG_ROM_ENABLE	pcireg.h	/^#define	PCI_MAPREG_ROM_ENABLE	/;"	d
PCI_MAPREG_SIZE_TO_MASK	pcireg.h	/^#define PCI_MAPREG_SIZE_TO_MASK(/;"	d
PCI_MAPREG_START	pcireg.h	/^#define	PCI_MAPREG_START	/;"	d
PCI_MAPREG_TYPE	pcireg.h	/^#define	PCI_MAPREG_TYPE(/;"	d
PCI_MAPREG_TYPE_IO	pcireg.h	/^#define	PCI_MAPREG_TYPE_IO	/;"	d
PCI_MAPREG_TYPE_MASK	pcireg.h	/^#define	PCI_MAPREG_TYPE_MASK	/;"	d
PCI_MAPREG_TYPE_MEM	pcireg.h	/^#define	PCI_MAPREG_TYPE_MEM	/;"	d
PCI_MAX_LAT	pcireg.h	/^#define	PCI_MAX_LAT(/;"	d
PCI_MAX_LAT_MASK	pcireg.h	/^#define	PCI_MAX_LAT_MASK	/;"	d
PCI_MAX_LAT_SHIFT	pcireg.h	/^#define PCI_MAX_LAT_SHIFT	/;"	d
PCI_MIN_GNT	pcireg.h	/^#define	PCI_MIN_GNT(/;"	d
PCI_MIN_GNT_MASK	pcireg.h	/^#define	PCI_MIN_GNT_MASK	/;"	d
PCI_MIN_GNT_SHIFT	pcireg.h	/^#define PCI_MIN_GNT_SHIFT	/;"	d
PCI_PCIX_CMD	pcireg.h	/^#define PCI_PCIX_CMD	/;"	d
PCI_PCIX_CMD_BCNT_1024	pcireg.h	/^#define		PCI_PCIX_CMD_BCNT_1024	/;"	d
PCI_PCIX_CMD_BCNT_2048	pcireg.h	/^#define		PCI_PCIX_CMD_BCNT_2048	/;"	d
PCI_PCIX_CMD_BCNT_4096	pcireg.h	/^#define		PCI_PCIX_CMD_BCNT_4096	/;"	d
PCI_PCIX_CMD_BCNT_512	pcireg.h	/^#define		PCI_PCIX_CMD_BCNT_512	/;"	d
PCI_PCIX_CMD_BYTECNT_MASK	pcireg.h	/^#define PCI_PCIX_CMD_BYTECNT_MASK	/;"	d
PCI_PCIX_CMD_BYTECNT_SHIFT	pcireg.h	/^#define	PCI_PCIX_CMD_BYTECNT_SHIFT	/;"	d
PCI_PCIX_CMD_PERR_RECOVER	pcireg.h	/^#define PCI_PCIX_CMD_PERR_RECOVER	/;"	d
PCI_PCIX_CMD_RELAXED_ORDER	pcireg.h	/^#define PCI_PCIX_CMD_RELAXED_ORDER	/;"	d
PCI_PCIX_CMD_SPLTRANS_1	pcireg.h	/^#define		PCI_PCIX_CMD_SPLTRANS_1	/;"	d
PCI_PCIX_CMD_SPLTRANS_12	pcireg.h	/^#define		PCI_PCIX_CMD_SPLTRANS_12	/;"	d
PCI_PCIX_CMD_SPLTRANS_16	pcireg.h	/^#define		PCI_PCIX_CMD_SPLTRANS_16	/;"	d
PCI_PCIX_CMD_SPLTRANS_2	pcireg.h	/^#define		PCI_PCIX_CMD_SPLTRANS_2	/;"	d
PCI_PCIX_CMD_SPLTRANS_3	pcireg.h	/^#define		PCI_PCIX_CMD_SPLTRANS_3	/;"	d
PCI_PCIX_CMD_SPLTRANS_32	pcireg.h	/^#define		PCI_PCIX_CMD_SPLTRANS_32	/;"	d
PCI_PCIX_CMD_SPLTRANS_4	pcireg.h	/^#define		PCI_PCIX_CMD_SPLTRANS_4	/;"	d
PCI_PCIX_CMD_SPLTRANS_8	pcireg.h	/^#define		PCI_PCIX_CMD_SPLTRANS_8	/;"	d
PCI_PCIX_CMD_SPLTRANS_MASK	pcireg.h	/^#define PCI_PCIX_CMD_SPLTRANS_MASK	/;"	d
PCI_PCIX_STATUS	pcireg.h	/^#define PCI_PCIX_STATUS	/;"	d
PCI_PCIX_STATUS_133	pcireg.h	/^#define PCI_PCIX_STATUS_133	/;"	d
PCI_PCIX_STATUS_64BIT	pcireg.h	/^#define PCI_PCIX_STATUS_64BIT	/;"	d
PCI_PCIX_STATUS_BUS_MASK	pcireg.h	/^#define PCI_PCIX_STATUS_BUS_MASK	/;"	d
PCI_PCIX_STATUS_DEVCPLX	pcireg.h	/^#define PCI_PCIX_STATUS_DEVCPLX	/;"	d
PCI_PCIX_STATUS_DEV_MASK	pcireg.h	/^#define PCI_PCIX_STATUS_DEV_MASK	/;"	d
PCI_PCIX_STATUS_FN_MASK	pcireg.h	/^#define PCI_PCIX_STATUS_FN_MASK	/;"	d
PCI_PCIX_STATUS_MAXB_1024	pcireg.h	/^#define		PCI_PCIX_STATUS_MAXB_1024	/;"	d
PCI_PCIX_STATUS_MAXB_2048	pcireg.h	/^#define		PCI_PCIX_STATUS_MAXB_2048	/;"	d
PCI_PCIX_STATUS_MAXB_4096	pcireg.h	/^#define		PCI_PCIX_STATUS_MAXB_4096	/;"	d
PCI_PCIX_STATUS_MAXB_512	pcireg.h	/^#define		PCI_PCIX_STATUS_MAXB_512	/;"	d
PCI_PCIX_STATUS_MAXB_MASK	pcireg.h	/^#define PCI_PCIX_STATUS_MAXB_MASK	/;"	d
PCI_PCIX_STATUS_MAXB_SHIFT	pcireg.h	/^#define	PCI_PCIX_STATUS_MAXB_SHIFT	/;"	d
PCI_PCIX_STATUS_MAXRS_128K	pcireg.h	/^#define		PCI_PCIX_STATUS_MAXRS_128K	/;"	d
PCI_PCIX_STATUS_MAXRS_16K	pcireg.h	/^#define		PCI_PCIX_STATUS_MAXRS_16K	/;"	d
PCI_PCIX_STATUS_MAXRS_1K	pcireg.h	/^#define		PCI_PCIX_STATUS_MAXRS_1K	/;"	d
PCI_PCIX_STATUS_MAXRS_2K	pcireg.h	/^#define		PCI_PCIX_STATUS_MAXRS_2K	/;"	d
PCI_PCIX_STATUS_MAXRS_32K	pcireg.h	/^#define		PCI_PCIX_STATUS_MAXRS_32K	/;"	d
PCI_PCIX_STATUS_MAXRS_4K	pcireg.h	/^#define		PCI_PCIX_STATUS_MAXRS_4K	/;"	d
PCI_PCIX_STATUS_MAXRS_64K	pcireg.h	/^#define		PCI_PCIX_STATUS_MAXRS_64K	/;"	d
PCI_PCIX_STATUS_MAXRS_8K	pcireg.h	/^#define		PCI_PCIX_STATUS_MAXRS_8K	/;"	d
PCI_PCIX_STATUS_MAXRS_MASK	pcireg.h	/^#define PCI_PCIX_STATUS_MAXRS_MASK	/;"	d
PCI_PCIX_STATUS_MAXST_1	pcireg.h	/^#define		PCI_PCIX_STATUS_MAXST_1	/;"	d
PCI_PCIX_STATUS_MAXST_12	pcireg.h	/^#define		PCI_PCIX_STATUS_MAXST_12	/;"	d
PCI_PCIX_STATUS_MAXST_16	pcireg.h	/^#define		PCI_PCIX_STATUS_MAXST_16	/;"	d
PCI_PCIX_STATUS_MAXST_2	pcireg.h	/^#define		PCI_PCIX_STATUS_MAXST_2	/;"	d
PCI_PCIX_STATUS_MAXST_3	pcireg.h	/^#define		PCI_PCIX_STATUS_MAXST_3	/;"	d
PCI_PCIX_STATUS_MAXST_32	pcireg.h	/^#define		PCI_PCIX_STATUS_MAXST_32	/;"	d
PCI_PCIX_STATUS_MAXST_4	pcireg.h	/^#define		PCI_PCIX_STATUS_MAXST_4	/;"	d
PCI_PCIX_STATUS_MAXST_8	pcireg.h	/^#define		PCI_PCIX_STATUS_MAXST_8	/;"	d
PCI_PCIX_STATUS_MAXST_MASK	pcireg.h	/^#define PCI_PCIX_STATUS_MAXST_MASK	/;"	d
PCI_PCIX_STATUS_SCERR	pcireg.h	/^#define PCI_PCIX_STATUS_SCERR	/;"	d
PCI_PCIX_STATUS_SPLDISC	pcireg.h	/^#define PCI_PCIX_STATUS_SPLDISC	/;"	d
PCI_PCIX_STATUS_SPLUNEX	pcireg.h	/^#define PCI_PCIX_STATUS_SPLUNEX	/;"	d
PCI_PMCR	pcireg.h	/^#define PCI_PMCR	/;"	d
PCI_PMCR_D1SUPP	pcireg.h	/^#define PCI_PMCR_D1SUPP	/;"	d
PCI_PMCR_D2SUPP	pcireg.h	/^#define PCI_PMCR_D2SUPP	/;"	d
PCI_PMCSR	pcireg.h	/^#define PCI_PMCSR	/;"	d
PCI_PMCSR_STATE_D0	pcireg.h	/^#define PCI_PMCSR_STATE_D0 /;"	d
PCI_PMCSR_STATE_D1	pcireg.h	/^#define PCI_PMCSR_STATE_D1 /;"	d
PCI_PMCSR_STATE_D2	pcireg.h	/^#define PCI_PMCSR_STATE_D2 /;"	d
PCI_PMCSR_STATE_D3	pcireg.h	/^#define PCI_PMCSR_STATE_D3 /;"	d
PCI_PMCSR_STATE_MASK	pcireg.h	/^#define PCI_PMCSR_STATE_MASK	/;"	d
PCI_PRODUCT	pcireg.h	/^#define	PCI_PRODUCT(/;"	d
PCI_PRODUCT_E100	e100.h	/^#define PCI_PRODUCT_E100 /;"	d
PCI_PRODUCT_MASK	pcireg.h	/^#define	PCI_PRODUCT_MASK	/;"	d
PCI_PRODUCT_SHIFT	pcireg.h	/^#define	PCI_PRODUCT_SHIFT	/;"	d
PCI_REVISION	pcireg.h	/^#define	PCI_REVISION(/;"	d
PCI_REVISION_MASK	pcireg.h	/^#define	PCI_REVISION_MASK	/;"	d
PCI_REVISION_SHIFT	pcireg.h	/^#define	PCI_REVISION_SHIFT	/;"	d
PCI_STATUS_66MHZ_SUPPORT	pcireg.h	/^#define	PCI_STATUS_66MHZ_SUPPORT	/;"	d
PCI_STATUS_BACKTOBACK_SUPPORT	pcireg.h	/^#define	PCI_STATUS_BACKTOBACK_SUPPORT	/;"	d
PCI_STATUS_CAPLIST_SUPPORT	pcireg.h	/^#define	PCI_STATUS_CAPLIST_SUPPORT	/;"	d
PCI_STATUS_DEVSEL_FAST	pcireg.h	/^#define	PCI_STATUS_DEVSEL_FAST	/;"	d
PCI_STATUS_DEVSEL_MASK	pcireg.h	/^#define	PCI_STATUS_DEVSEL_MASK	/;"	d
PCI_STATUS_DEVSEL_MEDIUM	pcireg.h	/^#define	PCI_STATUS_DEVSEL_MEDIUM	/;"	d
PCI_STATUS_DEVSEL_SLOW	pcireg.h	/^#define	PCI_STATUS_DEVSEL_SLOW	/;"	d
PCI_STATUS_MASK	pcireg.h	/^#define	PCI_STATUS_MASK	/;"	d
PCI_STATUS_MASTER_ABORT	pcireg.h	/^#define	PCI_STATUS_MASTER_ABORT	/;"	d
PCI_STATUS_MASTER_TARGET_ABORT	pcireg.h	/^#define	PCI_STATUS_MASTER_TARGET_ABORT	/;"	d
PCI_STATUS_PARITY_DETECT	pcireg.h	/^#define	PCI_STATUS_PARITY_DETECT	/;"	d
PCI_STATUS_PARITY_ERROR	pcireg.h	/^#define	PCI_STATUS_PARITY_ERROR	/;"	d
PCI_STATUS_SHIFT	pcireg.h	/^#define	PCI_STATUS_SHIFT	/;"	d
PCI_STATUS_SPECIAL_ERROR	pcireg.h	/^#define	PCI_STATUS_SPECIAL_ERROR	/;"	d
PCI_STATUS_TARGET_TARGET_ABORT	pcireg.h	/^#define	PCI_STATUS_TARGET_TARGET_ABORT	/;"	d
PCI_STATUS_UDF_SUPPORT	pcireg.h	/^#define	PCI_STATUS_UDF_SUPPORT	/;"	d
PCI_SUBCLASS	pcireg.h	/^#define	PCI_SUBCLASS(/;"	d
PCI_SUBCLASS_ANY	pci.c	/^#define PCI_SUBCLASS_ANY /;"	d	file:
PCI_SUBCLASS_BRIDGE_CARDBUS	pcireg.h	/^#define	PCI_SUBCLASS_BRIDGE_CARDBUS	/;"	d
PCI_SUBCLASS_BRIDGE_EISA	pcireg.h	/^#define	PCI_SUBCLASS_BRIDGE_EISA	/;"	d
PCI_SUBCLASS_BRIDGE_HOST	pcireg.h	/^#define	PCI_SUBCLASS_BRIDGE_HOST	/;"	d
PCI_SUBCLASS_BRIDGE_INFINIBAND	pcireg.h	/^#define	PCI_SUBCLASS_BRIDGE_INFINIBAND	/;"	d
PCI_SUBCLASS_BRIDGE_ISA	pcireg.h	/^#define	PCI_SUBCLASS_BRIDGE_ISA	/;"	d
PCI_SUBCLASS_BRIDGE_MC	pcireg.h	/^#define	PCI_SUBCLASS_BRIDGE_MC	/;"	d
PCI_SUBCLASS_BRIDGE_MISC	pcireg.h	/^#define	PCI_SUBCLASS_BRIDGE_MISC	/;"	d
PCI_SUBCLASS_BRIDGE_NUBUS	pcireg.h	/^#define	PCI_SUBCLASS_BRIDGE_NUBUS	/;"	d
PCI_SUBCLASS_BRIDGE_PCI	pcireg.h	/^#define	PCI_SUBCLASS_BRIDGE_PCI	/;"	d
PCI_SUBCLASS_BRIDGE_PCMCIA	pcireg.h	/^#define	PCI_SUBCLASS_BRIDGE_PCMCIA	/;"	d
PCI_SUBCLASS_BRIDGE_RACEWAY	pcireg.h	/^#define	PCI_SUBCLASS_BRIDGE_RACEWAY	/;"	d
PCI_SUBCLASS_BRIDGE_STPCI	pcireg.h	/^#define	PCI_SUBCLASS_BRIDGE_STPCI	/;"	d
PCI_SUBCLASS_COMMUNICATIONS_GPIB	pcireg.h	/^#define	PCI_SUBCLASS_COMMUNICATIONS_GPIB	/;"	d
PCI_SUBCLASS_COMMUNICATIONS_MISC	pcireg.h	/^#define	PCI_SUBCLASS_COMMUNICATIONS_MISC	/;"	d
PCI_SUBCLASS_COMMUNICATIONS_MODEM	pcireg.h	/^#define	PCI_SUBCLASS_COMMUNICATIONS_MODEM	/;"	d
PCI_SUBCLASS_COMMUNICATIONS_MPSERIAL	pcireg.h	/^#define	PCI_SUBCLASS_COMMUNICATIONS_MPSERIAL	/;"	d
PCI_SUBCLASS_COMMUNICATIONS_PARALLEL	pcireg.h	/^#define	PCI_SUBCLASS_COMMUNICATIONS_PARALLEL	/;"	d
PCI_SUBCLASS_COMMUNICATIONS_SERIAL	pcireg.h	/^#define	PCI_SUBCLASS_COMMUNICATIONS_SERIAL	/;"	d
PCI_SUBCLASS_COMMUNICATIONS_SMARTCARD	pcireg.h	/^#define	PCI_SUBCLASS_COMMUNICATIONS_SMARTCARD	/;"	d
PCI_SUBCLASS_CRYPTO_ENTERTAINMENT	pcireg.h	/^#define	PCI_SUBCLASS_CRYPTO_ENTERTAINMENT	/;"	d
PCI_SUBCLASS_CRYPTO_MISC	pcireg.h	/^#define	PCI_SUBCLASS_CRYPTO_MISC	/;"	d
PCI_SUBCLASS_CRYPTO_NETCOMP	pcireg.h	/^#define	PCI_SUBCLASS_CRYPTO_NETCOMP	/;"	d
PCI_SUBCLASS_DASP_DPIO	pcireg.h	/^#define	PCI_SUBCLASS_DASP_DPIO	/;"	d
PCI_SUBCLASS_DASP_MGMT	pcireg.h	/^#define	PCI_SUBCLASS_DASP_MGMT	/;"	d
PCI_SUBCLASS_DASP_MISC	pcireg.h	/^#define	PCI_SUBCLASS_DASP_MISC	/;"	d
PCI_SUBCLASS_DASP_SYNC	pcireg.h	/^#define	PCI_SUBCLASS_DASP_SYNC	/;"	d
PCI_SUBCLASS_DASP_TIMEFREQ	pcireg.h	/^#define	PCI_SUBCLASS_DASP_TIMEFREQ	/;"	d
PCI_SUBCLASS_DISPLAY_3D	pcireg.h	/^#define	PCI_SUBCLASS_DISPLAY_3D	/;"	d
PCI_SUBCLASS_DISPLAY_MISC	pcireg.h	/^#define	PCI_SUBCLASS_DISPLAY_MISC	/;"	d
PCI_SUBCLASS_DISPLAY_VGA	pcireg.h	/^#define	PCI_SUBCLASS_DISPLAY_VGA	/;"	d
PCI_SUBCLASS_DISPLAY_XGA	pcireg.h	/^#define	PCI_SUBCLASS_DISPLAY_XGA	/;"	d
PCI_SUBCLASS_DOCK_GENERIC	pcireg.h	/^#define	PCI_SUBCLASS_DOCK_GENERIC	/;"	d
PCI_SUBCLASS_DOCK_MISC	pcireg.h	/^#define	PCI_SUBCLASS_DOCK_MISC	/;"	d
PCI_SUBCLASS_I2O_STANDARD	pcireg.h	/^#define	PCI_SUBCLASS_I2O_STANDARD	/;"	d
PCI_SUBCLASS_INPUT_DIGITIZER	pcireg.h	/^#define	PCI_SUBCLASS_INPUT_DIGITIZER	/;"	d
PCI_SUBCLASS_INPUT_GAMEPORT	pcireg.h	/^#define	PCI_SUBCLASS_INPUT_GAMEPORT	/;"	d
PCI_SUBCLASS_INPUT_KEYBOARD	pcireg.h	/^#define	PCI_SUBCLASS_INPUT_KEYBOARD	/;"	d
PCI_SUBCLASS_INPUT_MISC	pcireg.h	/^#define	PCI_SUBCLASS_INPUT_MISC	/;"	d
PCI_SUBCLASS_INPUT_MOUSE	pcireg.h	/^#define	PCI_SUBCLASS_INPUT_MOUSE	/;"	d
PCI_SUBCLASS_INPUT_SCANNER	pcireg.h	/^#define	PCI_SUBCLASS_INPUT_SCANNER	/;"	d
PCI_SUBCLASS_MASK	pcireg.h	/^#define	PCI_SUBCLASS_MASK	/;"	d
PCI_SUBCLASS_MASS_STORAGE_ATA	pcireg.h	/^#define	PCI_SUBCLASS_MASS_STORAGE_ATA	/;"	d
PCI_SUBCLASS_MASS_STORAGE_FLOPPY	pcireg.h	/^#define	PCI_SUBCLASS_MASS_STORAGE_FLOPPY	/;"	d
PCI_SUBCLASS_MASS_STORAGE_IDE	pcireg.h	/^#define	PCI_SUBCLASS_MASS_STORAGE_IDE	/;"	d
PCI_SUBCLASS_MASS_STORAGE_IPI	pcireg.h	/^#define	PCI_SUBCLASS_MASS_STORAGE_IPI	/;"	d
PCI_SUBCLASS_MASS_STORAGE_MISC	pcireg.h	/^#define	PCI_SUBCLASS_MASS_STORAGE_MISC	/;"	d
PCI_SUBCLASS_MASS_STORAGE_RAID	pcireg.h	/^#define	PCI_SUBCLASS_MASS_STORAGE_RAID	/;"	d
PCI_SUBCLASS_MASS_STORAGE_SATA	pcireg.h	/^#define	PCI_SUBCLASS_MASS_STORAGE_SATA	/;"	d
PCI_SUBCLASS_MASS_STORAGE_SCSI	pcireg.h	/^#define	PCI_SUBCLASS_MASS_STORAGE_SCSI	/;"	d
PCI_SUBCLASS_MEMORY_FLASH	pcireg.h	/^#define	PCI_SUBCLASS_MEMORY_FLASH	/;"	d
PCI_SUBCLASS_MEMORY_MISC	pcireg.h	/^#define	PCI_SUBCLASS_MEMORY_MISC	/;"	d
PCI_SUBCLASS_MEMORY_RAM	pcireg.h	/^#define	PCI_SUBCLASS_MEMORY_RAM	/;"	d
PCI_SUBCLASS_MULTIMEDIA_AUDIO	pcireg.h	/^#define	PCI_SUBCLASS_MULTIMEDIA_AUDIO	/;"	d
PCI_SUBCLASS_MULTIMEDIA_MISC	pcireg.h	/^#define	PCI_SUBCLASS_MULTIMEDIA_MISC	/;"	d
PCI_SUBCLASS_MULTIMEDIA_TELEPHONY	pcireg.h	/^#define	PCI_SUBCLASS_MULTIMEDIA_TELEPHONY	/;"	d
PCI_SUBCLASS_MULTIMEDIA_VIDEO	pcireg.h	/^#define	PCI_SUBCLASS_MULTIMEDIA_VIDEO	/;"	d
PCI_SUBCLASS_NETWORK_ATM	pcireg.h	/^#define	PCI_SUBCLASS_NETWORK_ATM	/;"	d
PCI_SUBCLASS_NETWORK_ETHERNET	pcireg.h	/^#define	PCI_SUBCLASS_NETWORK_ETHERNET	/;"	d
PCI_SUBCLASS_NETWORK_FDDI	pcireg.h	/^#define	PCI_SUBCLASS_NETWORK_FDDI	/;"	d
PCI_SUBCLASS_NETWORK_ISDN	pcireg.h	/^#define	PCI_SUBCLASS_NETWORK_ISDN	/;"	d
PCI_SUBCLASS_NETWORK_MISC	pcireg.h	/^#define	PCI_SUBCLASS_NETWORK_MISC	/;"	d
PCI_SUBCLASS_NETWORK_PCIMGMULTICOMP	pcireg.h	/^#define	PCI_SUBCLASS_NETWORK_PCIMGMULTICOMP	/;"	d
PCI_SUBCLASS_NETWORK_TOKENRING	pcireg.h	/^#define	PCI_SUBCLASS_NETWORK_TOKENRING	/;"	d
PCI_SUBCLASS_NETWORK_WORLDFIP	pcireg.h	/^#define	PCI_SUBCLASS_NETWORK_WORLDFIP	/;"	d
PCI_SUBCLASS_PREHISTORIC_MISC	pcireg.h	/^#define	PCI_SUBCLASS_PREHISTORIC_MISC	/;"	d
PCI_SUBCLASS_PREHISTORIC_VGA	pcireg.h	/^#define	PCI_SUBCLASS_PREHISTORIC_VGA	/;"	d
PCI_SUBCLASS_PROCESSOR_386	pcireg.h	/^#define	PCI_SUBCLASS_PROCESSOR_386	/;"	d
PCI_SUBCLASS_PROCESSOR_486	pcireg.h	/^#define	PCI_SUBCLASS_PROCESSOR_486	/;"	d
PCI_SUBCLASS_PROCESSOR_ALPHA	pcireg.h	/^#define	PCI_SUBCLASS_PROCESSOR_ALPHA	/;"	d
PCI_SUBCLASS_PROCESSOR_COPROC	pcireg.h	/^#define	PCI_SUBCLASS_PROCESSOR_COPROC	/;"	d
PCI_SUBCLASS_PROCESSOR_MIPS	pcireg.h	/^#define	PCI_SUBCLASS_PROCESSOR_MIPS	/;"	d
PCI_SUBCLASS_PROCESSOR_PENTIUM	pcireg.h	/^#define	PCI_SUBCLASS_PROCESSOR_PENTIUM	/;"	d
PCI_SUBCLASS_PROCESSOR_POWERPC	pcireg.h	/^#define	PCI_SUBCLASS_PROCESSOR_POWERPC	/;"	d
PCI_SUBCLASS_SATCOM_AUDIO	pcireg.h	/^#define	PCI_SUBCLASS_SATCOM_AUDIO	/;"	d
PCI_SUBCLASS_SATCOM_DATA	pcireg.h	/^#define	PCI_SUBCLASS_SATCOM_DATA	/;"	d
PCI_SUBCLASS_SATCOM_TV	pcireg.h	/^#define	PCI_SUBCLASS_SATCOM_TV	/;"	d
PCI_SUBCLASS_SATCOM_VOICE	pcireg.h	/^#define	PCI_SUBCLASS_SATCOM_VOICE	/;"	d
PCI_SUBCLASS_SERIALBUS_ACCESS	pcireg.h	/^#define	PCI_SUBCLASS_SERIALBUS_ACCESS	/;"	d
PCI_SUBCLASS_SERIALBUS_CANBUS	pcireg.h	/^#define	PCI_SUBCLASS_SERIALBUS_CANBUS	/;"	d
PCI_SUBCLASS_SERIALBUS_FIBER	pcireg.h	/^#define	PCI_SUBCLASS_SERIALBUS_FIBER	/;"	d
PCI_SUBCLASS_SERIALBUS_FIREWIRE	pcireg.h	/^#define	PCI_SUBCLASS_SERIALBUS_FIREWIRE	/;"	d
PCI_SUBCLASS_SERIALBUS_INFINIBAND	pcireg.h	/^#define	PCI_SUBCLASS_SERIALBUS_INFINIBAND	/;"	d
PCI_SUBCLASS_SERIALBUS_IPMI	pcireg.h	/^#define	PCI_SUBCLASS_SERIALBUS_IPMI	/;"	d
PCI_SUBCLASS_SERIALBUS_SERCOS	pcireg.h	/^#define	PCI_SUBCLASS_SERIALBUS_SERCOS	/;"	d
PCI_SUBCLASS_SERIALBUS_SMBUS	pcireg.h	/^#define	PCI_SUBCLASS_SERIALBUS_SMBUS	/;"	d
PCI_SUBCLASS_SERIALBUS_SSA	pcireg.h	/^#define	PCI_SUBCLASS_SERIALBUS_SSA	/;"	d
PCI_SUBCLASS_SERIALBUS_USB	pcireg.h	/^#define	PCI_SUBCLASS_SERIALBUS_USB	/;"	d
PCI_SUBCLASS_SHIFT	pcireg.h	/^#define	PCI_SUBCLASS_SHIFT	/;"	d
PCI_SUBCLASS_SYSTEM_DMA	pcireg.h	/^#define	PCI_SUBCLASS_SYSTEM_DMA	/;"	d
PCI_SUBCLASS_SYSTEM_MISC	pcireg.h	/^#define	PCI_SUBCLASS_SYSTEM_MISC	/;"	d
PCI_SUBCLASS_SYSTEM_PCIHOTPLUG	pcireg.h	/^#define	PCI_SUBCLASS_SYSTEM_PCIHOTPLUG	/;"	d
PCI_SUBCLASS_SYSTEM_PIC	pcireg.h	/^#define	PCI_SUBCLASS_SYSTEM_PIC	/;"	d
PCI_SUBCLASS_SYSTEM_RTC	pcireg.h	/^#define	PCI_SUBCLASS_SYSTEM_RTC	/;"	d
PCI_SUBCLASS_SYSTEM_TIMER	pcireg.h	/^#define	PCI_SUBCLASS_SYSTEM_TIMER	/;"	d
PCI_SUBCLASS_WIRELESS_802_11A	pcireg.h	/^#define	PCI_SUBCLASS_WIRELESS_802_11A	/;"	d
PCI_SUBCLASS_WIRELESS_802_11B	pcireg.h	/^#define	PCI_SUBCLASS_WIRELESS_802_11B	/;"	d
PCI_SUBCLASS_WIRELESS_BLUETOOTH	pcireg.h	/^#define	PCI_SUBCLASS_WIRELESS_BLUETOOTH	/;"	d
PCI_SUBCLASS_WIRELESS_BROADBAND	pcireg.h	/^#define	PCI_SUBCLASS_WIRELESS_BROADBAND	/;"	d
PCI_SUBCLASS_WIRELESS_CONSUMERIR	pcireg.h	/^#define	PCI_SUBCLASS_WIRELESS_CONSUMERIR	/;"	d
PCI_SUBCLASS_WIRELESS_IRDA	pcireg.h	/^#define	PCI_SUBCLASS_WIRELESS_IRDA	/;"	d
PCI_SUBCLASS_WIRELESS_MISC	pcireg.h	/^#define	PCI_SUBCLASS_WIRELESS_MISC	/;"	d
PCI_SUBCLASS_WIRELESS_RF	pcireg.h	/^#define	PCI_SUBCLASS_WIRELESS_RF	/;"	d
PCI_SUBSYS_ID_REG	pcireg.h	/^#define PCI_SUBSYS_ID_REG /;"	d
PCI_VENDOR	pcireg.h	/^#define	PCI_VENDOR(/;"	d
PCI_VENDOR_INTEL	e100.h	/^#define PCI_VENDOR_INTEL /;"	d
PCI_VENDOR_MASK	pcireg.h	/^#define	PCI_VENDOR_MASK	/;"	d
PCI_VENDOR_SHIFT	pcireg.h	/^#define	PCI_VENDOR_SHIFT	/;"	d
PCI_VPDRES_ISLARGE	pcireg.h	/^#define	PCI_VPDRES_ISLARGE(/;"	d
PCI_VPDRES_LARGE_NAME	pcireg.h	/^#define	PCI_VPDRES_LARGE_NAME(/;"	d
PCI_VPDRES_SMALL_LENGTH	pcireg.h	/^#define	PCI_VPDRES_SMALL_LENGTH(/;"	d
PCI_VPDRES_SMALL_NAME	pcireg.h	/^#define	PCI_VPDRES_SMALL_NAME(/;"	d
PCI_VPDRES_TYPE_COMPATIBLE_DEVICE_ID	pcireg.h	/^#define	PCI_VPDRES_TYPE_COMPATIBLE_DEVICE_ID	/;"	d
PCI_VPDRES_TYPE_END_TAG	pcireg.h	/^#define	PCI_VPDRES_TYPE_END_TAG	/;"	d
PCI_VPDRES_TYPE_IDENTIFIER_STRING	pcireg.h	/^#define	PCI_VPDRES_TYPE_IDENTIFIER_STRING	/;"	d
PCI_VPDRES_TYPE_VENDOR_DEFINED	pcireg.h	/^#define	PCI_VPDRES_TYPE_VENDOR_DEFINED	/;"	d
PCI_VPDRES_TYPE_VPD	pcireg.h	/^#define	PCI_VPDRES_TYPE_VPD	/;"	d
PCI_VPD_ADDRESS	pcireg.h	/^#define	PCI_VPD_ADDRESS(/;"	d
PCI_VPD_ADDRESS_MASK	pcireg.h	/^#define	PCI_VPD_ADDRESS_MASK	/;"	d
PCI_VPD_ADDRESS_SHIFT	pcireg.h	/^#define	PCI_VPD_ADDRESS_SHIFT	/;"	d
PCI_VPD_DATAREG	pcireg.h	/^#define	PCI_VPD_DATAREG(/;"	d
PCI_VPD_OPFLAG	pcireg.h	/^#define	PCI_VPD_OPFLAG	/;"	d
PDADDRESS	lwip/netif/ppp/ppp.c	/^    PDADDRESS,                  \/* Process address field. *\/$/;"	e	enum:__anon24	file:
PDCONTROL	lwip/netif/ppp/ppp.c	/^    PDCONTROL,                  \/* Process control field. *\/$/;"	e	enum:__anon24	file:
PDDATA	lwip/netif/ppp/ppp.c	/^    PDDATA                      \/* Process data byte. *\/$/;"	e	enum:__anon24	file:
PDIDLE	lwip/netif/ppp/ppp.c	/^    PDIDLE = 0,                 \/* Idle state - waiting. *\/$/;"	e	enum:__anon24	file:
PDPROTOCOL1	lwip/netif/ppp/ppp.c	/^    PDPROTOCOL1,                \/* Process protocol field 1. *\/$/;"	e	enum:__anon24	file:
PDPROTOCOL2	lwip/netif/ppp/ppp.c	/^    PDPROTOCOL2,                \/* Process protocol field 2. *\/$/;"	e	enum:__anon24	file:
PDSTART	lwip/netif/ppp/ppp.c	/^    PDSTART,                    \/* Process start flag. *\/$/;"	e	enum:__anon24	file:
PERF_START	lwip/xv6/arch/perf.h	/^#define PERF_START$/;"	d
PERF_STOP	lwip/xv6/arch/perf.h	/^#define PERF_STOP(/;"	d
PERIODIC	lapic.c	/^  #define PERIODIC /;"	d	file:
PF_INET	lwip/include/lwip/sockets.h	/^#define PF_INET /;"	d
PF_UNSPEC	lwip/include/lwip/sockets.h	/^#define PF_UNSPEC /;"	d
PHASE_AUTHENTICATE	lwip/netif/ppp/lcp.h	/^	PHASE_AUTHENTICATE,$/;"	e	enum:__anon27
PHASE_CALLBACK	lwip/netif/ppp/lcp.h	/^	PHASE_CALLBACK,$/;"	e	enum:__anon27
PHASE_DEAD	lwip/netif/ppp/lcp.h	/^	PHASE_DEAD = 0,$/;"	e	enum:__anon27
PHASE_ESTABLISH	lwip/netif/ppp/lcp.h	/^	PHASE_ESTABLISH,$/;"	e	enum:__anon27
PHASE_INITIALIZE	lwip/netif/ppp/lcp.h	/^	PHASE_INITIALIZE,$/;"	e	enum:__anon27
PHASE_NETWORK	lwip/netif/ppp/lcp.h	/^	PHASE_NETWORK,$/;"	e	enum:__anon27
PHASE_TERMINATE	lwip/netif/ppp/lcp.h	/^	PHASE_TERMINATE$/;"	e	enum:__anon27
PIPE	sh.c	/^#define PIPE /;"	d	file:
PIPESIZE	pipe.c	/^#define PIPESIZE /;"	d	file:
PORT_DUMP	e100.h	/^#define PORT_DUMP /;"	d
PORT_DUMP_WAKE	e100.h	/^#define PORT_DUMP_WAKE /;"	d
PORT_SELF_TEST	e100.h	/^#define PORT_SELF_TEST /;"	d
PORT_SElECT_TEST	e100.h	/^#define PORT_SElECT_TEST /;"	d
PORT_SOFT_RESET	e100.h	/^#define PORT_SOFT_RESET /;"	d
PPPAUTHTYPE_ANY	lwip/netif/ppp/ppp.h	/^    PPPAUTHTYPE_ANY,$/;"	e	enum:pppAuthType
PPPAUTHTYPE_CHAP	lwip/netif/ppp/ppp.h	/^    PPPAUTHTYPE_CHAP$/;"	e	enum:pppAuthType
PPPAUTHTYPE_NONE	lwip/netif/ppp/ppp.h	/^    PPPAUTHTYPE_NONE,$/;"	e	enum:pppAuthType
PPPAUTHTYPE_PAP	lwip/netif/ppp/ppp.h	/^    PPPAUTHTYPE_PAP,$/;"	e	enum:pppAuthType
PPPCTLG_ERRCODE	lwip/netif/ppp/ppp.h	/^#define PPPCTLG_ERRCODE /;"	d
PPPCTLG_FD	lwip/netif/ppp/ppp.h	/^#define	PPPCTLG_FD	/;"	d
PPPCTLG_UPSTATUS	lwip/netif/ppp/ppp.h	/^#define PPPCTLG_UPSTATUS /;"	d
PPPCTLS_ERRCODE	lwip/netif/ppp/ppp.h	/^#define PPPCTLS_ERRCODE /;"	d
PPPControl	lwip/netif/ppp/ppp.c	/^} PPPControl;$/;"	t	typeref:struct:PPPControl_s	file:
PPPControl_s	lwip/netif/ppp/ppp.c	/^typedef struct PPPControl_s {$/;"	s	file:
PPPControl_s::accomp	lwip/netif/ppp/ppp.c	/^    int  accomp;                        \/* Does peer accept addr\/ctl compression? *\/$/;"	m	struct:PPPControl_s	file:	access:public
PPPControl_s::addrs	lwip/netif/ppp/ppp.c	/^    struct ppp_addrs addrs;$/;"	m	struct:PPPControl_s	typeref:struct:PPPControl_s::ppp_addrs	file:	access:public
PPPControl_s::errCode	lwip/netif/ppp/ppp.c	/^    int  errCode;                       \/* Code indicating why interface is down. *\/$/;"	m	struct:PPPControl_s	file:	access:public
PPPControl_s::fd	lwip/netif/ppp/ppp.c	/^    sio_fd_t fd;                    \/* File device ID of port. *\/$/;"	m	struct:PPPControl_s	file:	access:public
PPPControl_s::if_up	lwip/netif/ppp/ppp.c	/^    int  if_up;                         \/* True when the interface is up. *\/$/;"	m	struct:PPPControl_s	file:	access:public
PPPControl_s::inACCM	lwip/netif/ppp/ppp.c	/^    ext_accm inACCM;                    \/* Async-Ctl-Char-Map for input. *\/$/;"	m	struct:PPPControl_s	file:	access:public
PPPControl_s::inEscaped	lwip/netif/ppp/ppp.c	/^    char inEscaped;                     \/* Escape next character. *\/$/;"	m	struct:PPPControl_s	file:	access:public
PPPControl_s::inFCS	lwip/netif/ppp/ppp.c	/^    u16_t inFCS;                        \/* Input Frame Check Sequence value. *\/$/;"	m	struct:PPPControl_s	file:	access:public
PPPControl_s::inHead	lwip/netif/ppp/ppp.c	/^    struct pbuf *inHead, *inTail;       \/* The input packet. *\/$/;"	m	struct:PPPControl_s	typeref:struct:PPPControl_s::pbuf	file:	access:public
PPPControl_s::inProtocol	lwip/netif/ppp/ppp.c	/^    u16_t inProtocol;                   \/* The input protocol code. *\/$/;"	m	struct:PPPControl_s	file:	access:public
PPPControl_s::inState	lwip/netif/ppp/ppp.c	/^    PPPDevStates inState;               \/* The input process state. *\/$/;"	m	struct:PPPControl_s	file:	access:public
PPPControl_s::inTail	lwip/netif/ppp/ppp.c	/^    struct pbuf *inHead, *inTail;       \/* The input packet. *\/$/;"	m	struct:PPPControl_s	typeref:struct:PPPControl_s::	file:	access:public
PPPControl_s::kill_link	lwip/netif/ppp/ppp.c	/^    int  kill_link;                     \/* Shut the link down. *\/$/;"	m	struct:PPPControl_s	file:	access:public
PPPControl_s::lastXMit	lwip/netif/ppp/ppp.c	/^    u_long lastXMit;                    \/* Time of last transmission. *\/$/;"	m	struct:PPPControl_s	file:	access:public
PPPControl_s::linkStatusCB	lwip/netif/ppp/ppp.c	/^    void (*linkStatusCB)(void *ctx, int errCode, void *arg);$/;"	m	struct:PPPControl_s	file:	access:public
PPPControl_s::linkStatusCtx	lwip/netif/ppp/ppp.c	/^    void *linkStatusCtx;$/;"	m	struct:PPPControl_s	file:	access:public
PPPControl_s::mtu	lwip/netif/ppp/ppp.c	/^    int  mtu;                           \/* Peer's mru *\/$/;"	m	struct:PPPControl_s	file:	access:public
PPPControl_s::netif	lwip/netif/ppp/ppp.c	/^    struct netif netif;$/;"	m	struct:PPPControl_s	typeref:struct:PPPControl_s::netif	file:	access:public
PPPControl_s::oldFrame	lwip/netif/ppp/ppp.c	/^    char oldFrame;                      \/* Old framing character for fd. *\/$/;"	m	struct:PPPControl_s	file:	access:public
PPPControl_s::openFlag	lwip/netif/ppp/ppp.c	/^    char openFlag;                      \/* True when in use. *\/$/;"	m	struct:PPPControl_s	file:	access:public
PPPControl_s::outACCM	lwip/netif/ppp/ppp.c	/^    ext_accm outACCM;                   \/* Async-Ctl-Char-Map for output. *\/$/;"	m	struct:PPPControl_s	file:	access:public
PPPControl_s::pcomp	lwip/netif/ppp/ppp.c	/^    int  pcomp;                         \/* Does peer accept protocol compression? *\/$/;"	m	struct:PPPControl_s	file:	access:public
PPPControl_s::sig_hup	lwip/netif/ppp/ppp.c	/^    int  sig_hup;                       \/* Carrier lost. *\/$/;"	m	struct:PPPControl_s	file:	access:public
PPPControl_s::vjComp	lwip/netif/ppp/ppp.c	/^    struct vjcompress vjComp;           \/* Van Jabobsen compression header. *\/$/;"	m	struct:PPPControl_s	typeref:struct:PPPControl_s::vjcompress	file:	access:public
PPPControl_s::vjEnabled	lwip/netif/ppp/ppp.c	/^    int  vjEnabled;                     \/* Flag indicating VJ compression enabled. *\/$/;"	m	struct:PPPControl_s	file:	access:public
PPPDEBUG	lwip/netif/ppp/pppdebug.h	/^#define PPPDEBUG(/;"	d
PPPDEBUG_H	lwip/netif/ppp/pppdebug.h	/^#define PPPDEBUG_H$/;"	d
PPPDevStates	lwip/netif/ppp/ppp.c	/^} PPPDevStates;$/;"	t	typeref:enum:__anon24	file:
PPPERR_ALLOC	lwip/netif/ppp/ppp.h	/^#define PPPERR_ALLOC /;"	d
PPPERR_AUTHFAIL	lwip/netif/ppp/ppp.h	/^#define PPPERR_AUTHFAIL /;"	d
PPPERR_CONNECT	lwip/netif/ppp/ppp.h	/^#define PPPERR_CONNECT /;"	d
PPPERR_DEVICE	lwip/netif/ppp/ppp.h	/^#define PPPERR_DEVICE /;"	d
PPPERR_NONE	lwip/netif/ppp/ppp.h	/^#define PPPERR_NONE /;"	d
PPPERR_OPEN	lwip/netif/ppp/ppp.h	/^#define PPPERR_OPEN /;"	d
PPPERR_PARAM	lwip/netif/ppp/ppp.h	/^#define PPPERR_PARAM /;"	d
PPPERR_PROTOCOL	lwip/netif/ppp/ppp.h	/^#define PPPERR_PROTOCOL /;"	d
PPPERR_USER	lwip/netif/ppp/ppp.h	/^#define PPPERR_USER /;"	d
PPP_ADDRESS	lwip/netif/ppp/ppp.c	/^#define PPP_ADDRESS(/;"	d	file:
PPP_ALLSTATIONS	lwip/netif/ppp/ppp.h	/^#define PPP_ALLSTATIONS /;"	d
PPP_AT	lwip/netif/ppp/ppp.h	/^#define PPP_AT /;"	d
PPP_ATCP	lwip/netif/ppp/ppp.h	/^#define PPP_ATCP /;"	d
PPP_CBCP	lwip/netif/ppp/ppp.h	/^#define PPP_CBCP /;"	d
PPP_CCP	lwip/netif/ppp/ppp.h	/^#define PPP_CCP /;"	d
PPP_CHAP	lwip/netif/ppp/ppp.h	/^#define PPP_CHAP /;"	d
PPP_COMP	lwip/netif/ppp/ppp.h	/^#define PPP_COMP /;"	d
PPP_CONTROL	lwip/netif/ppp/ppp.c	/^#define PPP_CONTROL(/;"	d	file:
PPP_DEBUG	lwip/include/lwip/opt.h	/^#define PPP_DEBUG /;"	d
PPP_DEFMRU	lwip/include/lwip/opt.h	/^#define PPP_DEFMRU /;"	d
PPP_ESCAPE	lwip/netif/ppp/ppp.h	/^#define PPP_ESCAPE /;"	d
PPP_FCS	lwip/netif/ppp/ppp.h	/^#define PPP_FCS(/;"	d
PPP_FCSLEN	lwip/netif/ppp/ppp.h	/^#define PPP_FCSLEN /;"	d
PPP_FLAG	lwip/netif/ppp/ppp.h	/^#define PPP_FLAG /;"	d
PPP_GOODFCS	lwip/netif/ppp/ppp.h	/^#define PPP_GOODFCS /;"	d
PPP_H	lwip/netif/ppp/ppp.h	/^#define PPP_H$/;"	d
PPP_HDRLEN	lwip/netif/ppp/ppp.h	/^#define PPP_HDRLEN /;"	d
PPP_INITFCS	lwip/netif/ppp/ppp.h	/^#define PPP_INITFCS /;"	d
PPP_IP	lwip/netif/ppp/ppp.h	/^#define PPP_IP /;"	d
PPP_IPCP	lwip/netif/ppp/ppp.h	/^#define PPP_IPCP /;"	d
PPP_LCP	lwip/netif/ppp/ppp.h	/^#define PPP_LCP /;"	d
PPP_LQR	lwip/netif/ppp/ppp.h	/^#define PPP_LQR /;"	d
PPP_MAXIDLEFLAG	lwip/include/lwip/opt.h	/^#define PPP_MAXIDLEFLAG /;"	d
PPP_MAXMRU	lwip/include/lwip/opt.h	/^#define PPP_MAXMRU /;"	d
PPP_MAXMTU	lwip/include/lwip/opt.h	/^#define PPP_MAXMTU /;"	d
PPP_MINMRU	lwip/include/lwip/opt.h	/^#define PPP_MINMRU /;"	d
PPP_MINMTU	lwip/include/lwip/opt.h	/^#define PPP_MINMTU /;"	d
PPP_MRU	lwip/include/lwip/opt.h	/^#define PPP_MRU /;"	d
PPP_MTU	lwip/include/lwip/opt.h	/^#define PPP_MTU /;"	d
PPP_PAP	lwip/netif/ppp/ppp.h	/^#define PPP_PAP /;"	d
PPP_PROTOCOL	lwip/netif/ppp/ppp.c	/^#define PPP_PROTOCOL(/;"	d	file:
PPP_SUPPORT	lwip/include/lwip/opt.h	/^#define PPP_SUPPORT /;"	d
PPP_SUPPORT	lwip/xv6/lwipopts.h	/^#define PPP_SUPPORT /;"	d
PPP_THREAD_PRIO	lwip/include/lwip/opt.h	/^#define PPP_THREAD_PRIO /;"	d
PPP_TRANS	lwip/netif/ppp/ppp.h	/^#define PPP_TRANS /;"	d
PPP_UI	lwip/netif/ppp/ppp.h	/^#define PPP_UI /;"	d
PPP_VJC_COMP	lwip/netif/ppp/ppp.h	/^#define PPP_VJC_COMP /;"	d
PPP_VJC_UNCOMP	lwip/netif/ppp/ppp.h	/^#define PPP_VJC_UNCOMP /;"	d
PRINTMSG	lwip/netif/ppp/ppp.h	/^#define PRINTMSG(/;"	d
PROTO_NAME	lwip/netif/ppp/fsm.c	/^#define PROTO_NAME(/;"	d	file:
PROTREJ	lwip/netif/ppp/lcp.h	/^#define PROTREJ	/;"	d
PUTCHAR	lwip/netif/ppp/ppp.h	/^#define PUTCHAR(/;"	d
PUTLONG	lwip/netif/ppp/ppp.h	/^#define PUTLONG(/;"	d
PUTSHORT	lwip/netif/ppp/ppp.h	/^#define PUTSHORT(/;"	d
RANDM_H	lwip/netif/ppp/randm.h	/^#define RANDM_H$/;"	d
RANDPOOLSZ	lwip/netif/ppp/randm.c	/^#define RANDPOOLSZ /;"	d	file:
RAW_DEBUG	lwip/include/lwip/opt.h	/^#define RAW_DEBUG /;"	d
RAW_STATS	lwip/include/lwip/opt.h	/^#define RAW_STATS	/;"	d
RAW_TTL	lwip/include/lwip/opt.h	/^#define RAW_TTL /;"	d
REDIR	sh.c	/^#define REDIR /;"	d	file:
REG_ID	ioapic.c	/^#define REG_ID /;"	d	file:
REG_TABLE	ioapic.c	/^#define REG_TABLE /;"	d	file:
REG_VER	ioapic.c	/^#define REG_VER /;"	d	file:
REJCIADDR	lwip/netif/ppp/ipcp.c	/^#define REJCIADDR(/;"	d	file:
REJCICBCP	lwip/netif/ppp/lcp.c	/^#define REJCICBCP(/;"	d	file:
REJCICHAP	lwip/netif/ppp/lcp.c	/^#define REJCICHAP(/;"	d	file:
REJCIDNS	lwip/netif/ppp/ipcp.c	/^#define REJCIDNS(/;"	d	file:
REJCILONG	lwip/netif/ppp/lcp.c	/^#define REJCILONG(/;"	d	file:
REJCILQR	lwip/netif/ppp/lcp.c	/^#define REJCILQR(/;"	d	file:
REJCISHORT	lwip/netif/ppp/lcp.c	/^#define REJCISHORT(/;"	d	file:
REJCIVJ	lwip/netif/ppp/ipcp.c	/^#define REJCIVJ(/;"	d	file:
REJCIVOID	lwip/netif/ppp/lcp.c	/^#define REJCIVOID(/;"	d	file:
REQSENT	lwip/netif/ppp/fsm.h	/^#define REQSENT	/;"	d
ROOTDEV	param.h	/^#define ROOTDEV /;"	d
ROTATE_LEFT	lwip/netif/ppp/md5.c	/^#define ROTATE_LEFT(/;"	d	file:
RUC_ABORT	e100.h	/^#define RUC_ABORT /;"	d
RUC_LOAD_BASE	e100.h	/^#define RUC_LOAD_BASE /;"	d
RUC_LOAD_HDS	e100.h	/^#define RUC_LOAD_HDS /;"	d
RUC_NOP	e100.h	/^#define RUC_NOP /;"	d
RUC_RCV_DMA	e100.h	/^#define RUC_RCV_DMA /;"	d
RUC_RESUME	e100.h	/^#define RUC_RESUME /;"	d
RUC_START	e100.h	/^#define RUC_START /;"	d
RUNNABLE	proc.h	/^enum proc_state { UNUSED, EMBRYO, SLEEPING, RUNNABLE, $/;"	e	enum:proc_state
RUNNING	proc.h	/^    RUNNING, ZOMBIE, MSLEEPING};$/;"	e	enum:proc_state
S11	lwip/netif/ppp/md5.c	/^#define S11 /;"	d	file:
S12	lwip/netif/ppp/md5.c	/^#define S12 /;"	d	file:
S13	lwip/netif/ppp/md5.c	/^#define S13 /;"	d	file:
S14	lwip/netif/ppp/md5.c	/^#define S14 /;"	d	file:
S21	lwip/netif/ppp/md5.c	/^#define S21 /;"	d	file:
S22	lwip/netif/ppp/md5.c	/^#define S22 /;"	d	file:
S23	lwip/netif/ppp/md5.c	/^#define S23 /;"	d	file:
S24	lwip/netif/ppp/md5.c	/^#define S24 /;"	d	file:
S31	lwip/netif/ppp/md5.c	/^#define S31 /;"	d	file:
S32	lwip/netif/ppp/md5.c	/^#define S32 /;"	d	file:
S33	lwip/netif/ppp/md5.c	/^#define S33 /;"	d	file:
S34	lwip/netif/ppp/md5.c	/^#define S34 /;"	d	file:
S41	lwip/netif/ppp/md5.c	/^#define S41 /;"	d	file:
S42	lwip/netif/ppp/md5.c	/^#define S42 /;"	d	file:
S43	lwip/netif/ppp/md5.c	/^#define S43 /;"	d	file:
S44	lwip/netif/ppp/md5.c	/^#define S44 /;"	d	file:
SCB_COMMAND	e100.h	/^#define SCB_COMMAND /;"	d
SCB_EEPROM_CTL	e100.h	/^#define SCB_EEPROM_CTL /;"	d
SCB_FLOW_CTL	e100.h	/^#define SCB_FLOW_CTL /;"	d
SCB_FORCE_EVT	e100.h	/^#define SCB_FORCE_EVT /;"	d
SCB_FUNC_EVT	e100.h	/^#define SCB_FUNC_EVT /;"	d
SCB_FUNC_STATE	e100.h	/^#define SCB_FUNC_STATE /;"	d
SCB_FUN_MASK	e100.h	/^#define SCB_FUN_MASK /;"	d
SCB_GENPTR	e100.h	/^#define SCB_GENPTR /;"	d
SCB_GEN_CTL	e100.h	/^#define SCB_GEN_CTL /;"	d
SCB_GEN_STATUS	e100.h	/^#define SCB_GEN_STATUS /;"	d
SCB_MDI_CTL	e100.h	/^#define SCB_MDI_CTL /;"	d
SCB_PMDR	e100.h	/^#define SCB_PMDR /;"	d
SCB_PORT	e100.h	/^#define SCB_PORT /;"	d
SCB_RX_COUNT	e100.h	/^#define SCB_RX_COUNT /;"	d
SCB_STATUS	e100.h	/^#define SCB_STATUS /;"	d
SCROLLLOCK	kbd.h	/^#define SCROLLLOCK /;"	d
SECTSIZE	bootmain.c	/^#define SECTSIZE /;"	d	file:
SEG	mmu.h	/^#define SEG(/;"	d
SEG16	mmu.h	/^#define SEG16(/;"	d
SEG_ASM	asm.h	/^#define SEG_ASM(/;"	d
SEG_KCODE	proc.h	/^#define SEG_KCODE /;"	d
SEG_KDATA	proc.h	/^#define SEG_KDATA /;"	d
SEG_NULL	mmu.h	/^#define SEG_NULL /;"	d
SEG_NULLASM	asm.h	/^#define SEG_NULLASM /;"	d
SEG_TSS	proc.h	/^#define SEG_TSS /;"	d
SEG_UCODE	proc.h	/^#define SEG_UCODE /;"	d
SEG_UDATA	proc.h	/^#define SEG_UDATA /;"	d
SETGATE	mmu.h	/^#define SETGATE(/;"	d
SHIFT	kbd.h	/^#define SHIFT /;"	d
SHORT	console.c	/^    SHORT,$/;"	e	enum:fmt_types	file:
SIOCATMARK	lwip/include/lwip/sockets.h	/^#define SIOCATMARK /;"	d
SIOCGHIWAT	lwip/include/lwip/sockets.h	/^#define SIOCGHIWAT /;"	d
SIOCGLOWAT	lwip/include/lwip/sockets.h	/^#define SIOCGLOWAT /;"	d
SIOCSHIWAT	lwip/include/lwip/sockets.h	/^#define SIOCSHIWAT /;"	d
SIOCSLOWAT	lwip/include/lwip/sockets.h	/^#define SIOCSLOWAT /;"	d
SIZEOF_STRUCT_MEM	lwip/core/mem.c	/^#define SIZEOF_STRUCT_MEM /;"	d	file:
SLEEPING	proc.h	/^enum proc_state { UNUSED, EMBRYO, SLEEPING, RUNNABLE, $/;"	e	enum:proc_state
SLIPIF_THREAD_PRIO	lwip/include/lwip/opt.h	/^#define SLIPIF_THREAD_PRIO /;"	d
SLIP_DEBUG	lwip/include/lwip/opt.h	/^#define SLIP_DEBUG /;"	d
SLIP_END	lwip/netif/slipif.c	/^#define SLIP_END /;"	d	file:
SLIP_ESC	lwip/netif/slipif.c	/^#define SLIP_ESC /;"	d	file:
SLIP_ESC_END	lwip/netif/slipif.c	/^#define SLIP_ESC_END /;"	d	file:
SLIP_ESC_ESC	lwip/netif/slipif.c	/^#define SLIP_ESC_ESC /;"	d	file:
SOCKETS_DEBUG	lwip/include/lwip/opt.h	/^#define SOCKETS_DEBUG /;"	d
SOCKETS_DEBUG	lwip/xv6/lwipopts.h	/^#define SOCKETS_DEBUG /;"	d
SOCK_DGRAM	lwip/include/lwip/sockets.h	/^#define SOCK_DGRAM /;"	d
SOCK_RAW	lwip/include/lwip/sockets.h	/^#define SOCK_RAW /;"	d
SOCK_STREAM	lwip/include/lwip/sockets.h	/^#define SOCK_STREAM /;"	d
SOF_ACCEPTCONN	lwip/include/ipv4/lwip/ip.h	/^#define	SOF_ACCEPTCONN	/;"	d
SOF_BROADCAST	lwip/include/ipv4/lwip/ip.h	/^#define	SOF_BROADCAST	/;"	d
SOF_DEBUG	lwip/include/ipv4/lwip/ip.h	/^#define	SOF_DEBUG	/;"	d
SOF_DONTROUTE	lwip/include/ipv4/lwip/ip.h	/^#define	SOF_DONTROUTE	/;"	d
SOF_KEEPALIVE	lwip/include/ipv4/lwip/ip.h	/^#define	SOF_KEEPALIVE	/;"	d
SOF_LINGER	lwip/include/ipv4/lwip/ip.h	/^#define	SOF_LINGER	/;"	d
SOF_OOBINLINE	lwip/include/ipv4/lwip/ip.h	/^#define	SOF_OOBINLINE	/;"	d
SOF_REUSEADDR	lwip/include/ipv4/lwip/ip.h	/^#define	SOF_REUSEADDR	/;"	d
SOF_REUSEPORT	lwip/include/ipv4/lwip/ip.h	/^#define	SOF_REUSEPORT	/;"	d
SOF_USELOOPBACK	lwip/include/ipv4/lwip/ip.h	/^#define	SOF_USELOOPBACK	/;"	d
SOL_SOCKET	lwip/include/lwip/sockets.h	/^#define  SOL_SOCKET /;"	d
SO_ACCEPTCONN	lwip/include/lwip/sockets.h	/^#define  SO_ACCEPTCONN /;"	d
SO_BROADCAST	lwip/include/lwip/sockets.h	/^#define  SO_BROADCAST /;"	d
SO_DEBUG	lwip/include/lwip/sockets.h	/^#define  SO_DEBUG /;"	d
SO_DONTLINGER	lwip/include/lwip/sockets.h	/^#define SO_DONTLINGER /;"	d
SO_DONTROUTE	lwip/include/lwip/sockets.h	/^#define  SO_DONTROUTE /;"	d
SO_ERROR	lwip/include/lwip/sockets.h	/^#define  SO_ERROR /;"	d
SO_KEEPALIVE	lwip/include/lwip/sockets.h	/^#define  SO_KEEPALIVE /;"	d
SO_LINGER	lwip/include/lwip/sockets.h	/^#define  SO_LINGER /;"	d
SO_OOBINLINE	lwip/include/lwip/sockets.h	/^#define  SO_OOBINLINE /;"	d
SO_RCVBUF	lwip/include/lwip/sockets.h	/^#define SO_RCVBUF /;"	d
SO_RCVLOWAT	lwip/include/lwip/sockets.h	/^#define SO_RCVLOWAT /;"	d
SO_RCVTIMEO	lwip/include/lwip/sockets.h	/^#define SO_RCVTIMEO /;"	d
SO_REUSE	lwip/include/lwip/opt.h	/^# define SO_REUSE /;"	d
SO_REUSEADDR	lwip/include/lwip/sockets.h	/^#define  SO_REUSEADDR /;"	d
SO_REUSEPORT	lwip/include/lwip/sockets.h	/^#define	 SO_REUSEPORT	/;"	d
SO_SNDBUF	lwip/include/lwip/sockets.h	/^#define SO_SNDBUF /;"	d
SO_SNDLOWAT	lwip/include/lwip/sockets.h	/^#define SO_SNDLOWAT /;"	d
SO_SNDTIMEO	lwip/include/lwip/sockets.h	/^#define SO_SNDTIMEO /;"	d
SO_TYPE	lwip/include/lwip/sockets.h	/^#define  SO_TYPE /;"	d
SO_USELOOPBACK	lwip/include/lwip/sockets.h	/^#define  SO_USELOOPBACK /;"	d
SPECIALS_MASK	lwip/netif/ppp/vj.h	/^#define SPECIALS_MASK /;"	d
SPECIAL_D	lwip/netif/ppp/vj.h	/^#define SPECIAL_D /;"	d
SPECIAL_I	lwip/netif/ppp/vj.h	/^#define SPECIAL_I /;"	d
STARTING	lwip/netif/ppp/fsm.h	/^#define STARTING	/;"	d
STARTUP	lapic.c	/^  #define STARTUP /;"	d	file:
STATS_INC	lwip/include/lwip/stats.h	/^#define STATS_INC(/;"	d
STA_A	asm.h	/^#define STA_A /;"	d
STA_A	mmu.h	/^#define STA_A /;"	d
STA_C	asm.h	/^#define STA_C /;"	d
STA_C	mmu.h	/^#define STA_C /;"	d
STA_E	asm.h	/^#define STA_E /;"	d
STA_E	mmu.h	/^#define STA_E /;"	d
STA_R	asm.h	/^#define STA_R /;"	d
STA_R	mmu.h	/^#define STA_R /;"	d
STA_W	asm.h	/^#define STA_W /;"	d
STA_W	mmu.h	/^#define STA_W /;"	d
STA_X	asm.h	/^#define STA_X /;"	d
STA_X	mmu.h	/^#define STA_X /;"	d
STOPPED	lwip/netif/ppp/fsm.h	/^#define STOPPED	/;"	d
STOPPING	lwip/netif/ppp/fsm.h	/^#define STOPPING	/;"	d
STS_CG16	mmu.h	/^#define STS_CG16 /;"	d
STS_CG32	mmu.h	/^#define STS_CG32 /;"	d
STS_IG16	mmu.h	/^#define STS_IG16 /;"	d
STS_IG32	mmu.h	/^#define STS_IG32 /;"	d
STS_LDT	mmu.h	/^#define STS_LDT /;"	d
STS_T16A	mmu.h	/^#define STS_T16A /;"	d
STS_T16B	mmu.h	/^#define STS_T16B /;"	d
STS_T32A	mmu.h	/^#define STS_T32A /;"	d
STS_T32B	mmu.h	/^#define STS_T32B /;"	d
STS_TG	mmu.h	/^#define STS_TG /;"	d
STS_TG16	mmu.h	/^#define STS_TG16 /;"	d
STS_TG32	mmu.h	/^#define STS_TG32 /;"	d
SVR	lapic.c	/^#define SVR /;"	d	file:
SYN_RCVD	lwip/include/lwip/tcp.h	/^  SYN_RCVD    = 3,$/;"	e	enum:tcp_state
SYN_SENT	lwip/include/lwip/tcp.h	/^  SYN_SENT    = 2,$/;"	e	enum:tcp_state
SYS_ARCH_DECL_PROTECT	lwip/include/lwip/sys.h	/^#define SYS_ARCH_DECL_PROTECT(/;"	d
SYS_ARCH_DECL_PROTECT	lwip/xv6/arch/sys_arch.h	/^#define SYS_ARCH_DECL_PROTECT(/;"	d
SYS_ARCH_PROTECT	lwip/include/lwip/sys.h	/^#define SYS_ARCH_PROTECT(/;"	d
SYS_ARCH_PROTECT	lwip/xv6/arch/sys_arch.h	/^#define SYS_ARCH_PROTECT(/;"	d
SYS_ARCH_TIMEOUT	lwip/include/lwip/sys.h	/^#define SYS_ARCH_TIMEOUT /;"	d
SYS_ARCH_UNPROTECT	lwip/include/lwip/sys.h	/^#define SYS_ARCH_UNPROTECT(/;"	d
SYS_ARCH_UNPROTECT	lwip/xv6/arch/sys_arch.h	/^#define SYS_ARCH_UNPROTECT(/;"	d
SYS_DEBUG	lwip/include/lwip/opt.h	/^#define SYS_DEBUG /;"	d
SYS_DEBUG	lwip/xv6/lwipopts.h	/^#define SYS_DEBUG /;"	d
SYS_LIGHTWEIGHT_PROT	lwip/include/lwip/opt.h	/^#define SYS_LIGHTWEIGHT_PROT /;"	d
SYS_MBOX_NULL	lwip/xv6/arch/sys_arch.h	/^#define SYS_MBOX_NULL /;"	d
SYS_SEM_NULL	lwip/xv6/arch/sys_arch.h	/^#define SYS_SEM_NULL /;"	d
SYS_STATS	lwip/include/lwip/opt.h	/^#define SYS_STATS	/;"	d
SYS_TIMEOUTS_DEFINED	lwip/include/lwip/sys.h	/^#define SYS_TIMEOUTS_DEFINED$/;"	d
SYS_TIMEOUTS_DEFINED	thread.h	/^#define SYS_TIMEOUTS_DEFINED$/;"	d
SYS_accept	syscall.h	/^#define SYS_accept /;"	d
SYS_bind	syscall.h	/^#define SYS_bind /;"	d
SYS_chdir	syscall.h	/^#define SYS_chdir /;"	d
SYS_close	syscall.h	/^#define SYS_close /;"	d
SYS_connect	syscall.h	/^#define SYS_connect /;"	d
SYS_dup	syscall.h	/^#define SYS_dup /;"	d
SYS_exec	syscall.h	/^#define SYS_exec /;"	d
SYS_exit	syscall.h	/^#define SYS_exit /;"	d
SYS_fork	syscall.h	/^#define SYS_fork /;"	d
SYS_fstat	syscall.h	/^#define SYS_fstat /;"	d
SYS_getpeername	syscall.h	/^#define SYS_getpeername /;"	d
SYS_getpid	syscall.h	/^#define SYS_getpid /;"	d
SYS_getsockname	syscall.h	/^#define SYS_getsockname /;"	d
SYS_getsockopt	syscall.h	/^#define SYS_getsockopt /;"	d
SYS_kill	syscall.h	/^#define SYS_kill /;"	d
SYS_link	syscall.h	/^#define SYS_link /;"	d
SYS_listen	syscall.h	/^#define SYS_listen /;"	d
SYS_mkdir	syscall.h	/^#define SYS_mkdir /;"	d
SYS_mknod	syscall.h	/^#define SYS_mknod /;"	d
SYS_open	syscall.h	/^#define SYS_open /;"	d
SYS_pipe	syscall.h	/^#define SYS_pipe /;"	d
SYS_read	syscall.h	/^#define SYS_read /;"	d
SYS_recv	syscall.h	/^#define SYS_recv /;"	d
SYS_recvfrom	syscall.h	/^#define SYS_recvfrom /;"	d
SYS_sbrk	syscall.h	/^#define SYS_sbrk /;"	d
SYS_send	syscall.h	/^#define SYS_send /;"	d
SYS_sendto	syscall.h	/^#define SYS_sendto /;"	d
SYS_setsockopt	syscall.h	/^#define SYS_setsockopt /;"	d
SYS_shutdown	syscall.h	/^#define SYS_shutdown /;"	d
SYS_sleep	syscall.h	/^#define SYS_sleep /;"	d
SYS_sockclose	syscall.h	/^#define SYS_sockclose /;"	d
SYS_socket	syscall.h	/^#define SYS_socket /;"	d
SYS_unlink	syscall.h	/^#define SYS_unlink /;"	d
SYS_upmsec	syscall.h	/^#define SYS_upmsec /;"	d
SYS_wait	syscall.h	/^#define SYS_wait /;"	d
SYS_write	syscall.h	/^#define SYS_write /;"	d
StdText	lwip/netif/ppp/chpms.c	/^static u_char *StdText = (u_char *)"KGS!@#$%"; \/* key from rasapi32.dll *\/$/;"	v	file:
TBD_DATA_LIMIT	e100.h	/^#define TBD_DATA_LIMIT /;"	d
TCCR	lapic.c	/^#define TCCR /;"	d	file:
TCPH_FLAGS	lwip/include/lwip/tcp.h	/^#define TCPH_FLAGS(/;"	d
TCPH_FLAGS_SET	lwip/include/lwip/tcp.h	/^#define TCPH_FLAGS_SET(/;"	d
TCPH_HDRLEN	lwip/include/lwip/tcp.h	/^#define TCPH_HDRLEN(/;"	d
TCPH_HDRLEN_SET	lwip/include/lwip/tcp.h	/^#define TCPH_HDRLEN_SET(/;"	d
TCPH_OFFSET	lwip/include/lwip/tcp.h	/^#define TCPH_OFFSET(/;"	d
TCPH_OFFSET_SET	lwip/include/lwip/tcp.h	/^#define TCPH_OFFSET_SET(/;"	d
TCPH_SET_FLAG	lwip/include/lwip/tcp.h	/^#define TCPH_SET_FLAG(/;"	d
TCPH_UNSET_FLAG	lwip/include/lwip/tcp.h	/^#define TCPH_UNSET_FLAG(/;"	d
TCPIP_DEBUG	lwip/include/lwip/opt.h	/^#define TCPIP_DEBUG /;"	d
TCPIP_DEBUG	lwip/xv6/lwipopts.h	/^#define TCPIP_DEBUG /;"	d
TCPIP_MSG_API	lwip/include/lwip/tcpip.h	/^  TCPIP_MSG_API,$/;"	e	enum:tcpip_msg_type
TCPIP_MSG_CALLBACK	lwip/include/lwip/tcpip.h	/^  TCPIP_MSG_CALLBACK$/;"	e	enum:tcpip_msg_type
TCPIP_MSG_INPUT	lwip/include/lwip/tcpip.h	/^  TCPIP_MSG_INPUT,$/;"	e	enum:tcpip_msg_type
TCPIP_THREAD_PRIO	lwip/include/lwip/opt.h	/^#define TCPIP_THREAD_PRIO /;"	d
TCP_ACK	lwip/include/lwip/tcp.h	/^#define TCP_ACK /;"	d
TCP_CWND_DEBUG	lwip/include/lwip/opt.h	/^#define TCP_CWND_DEBUG /;"	d
TCP_CWR	lwip/include/lwip/tcp.h	/^#define TCP_CWR /;"	d
TCP_DEBUG	lwip/include/lwip/opt.h	/^#define TCP_DEBUG /;"	d
TCP_DEBUG	lwip/xv6/lwipopts.h	/^#define TCP_DEBUG /;"	d
TCP_ECE	lwip/include/lwip/tcp.h	/^#define TCP_ECE /;"	d
TCP_EVENT_ACCEPT	lwip/include/lwip/tcp.h	/^#define TCP_EVENT_ACCEPT(/;"	d
TCP_EVENT_CONNECTED	lwip/include/lwip/tcp.h	/^#define TCP_EVENT_CONNECTED(/;"	d
TCP_EVENT_ERR	lwip/include/lwip/tcp.h	/^#define TCP_EVENT_ERR(/;"	d
TCP_EVENT_POLL	lwip/include/lwip/tcp.h	/^#define TCP_EVENT_POLL(/;"	d
TCP_EVENT_RECV	lwip/include/lwip/tcp.h	/^#define TCP_EVENT_RECV(/;"	d
TCP_EVENT_SENT	lwip/include/lwip/tcp.h	/^#define TCP_EVENT_SENT(/;"	d
TCP_FAST_INTERVAL	lwip/include/lwip/tcp.h	/^#define TCP_FAST_INTERVAL /;"	d
TCP_FIN	lwip/include/lwip/tcp.h	/^#define TCP_FIN /;"	d
TCP_FIN_WAIT_TIMEOUT	lwip/include/lwip/tcp.h	/^#define TCP_FIN_WAIT_TIMEOUT /;"	d
TCP_FLAGS	lwip/include/lwip/tcp.h	/^#define TCP_FLAGS /;"	d
TCP_FR_DEBUG	lwip/include/lwip/opt.h	/^#define TCP_FR_DEBUG /;"	d
TCP_HLEN	lwip/include/lwip/tcp.h	/^#define TCP_HLEN /;"	d
TCP_INPUT_DEBUG	lwip/include/lwip/opt.h	/^#define TCP_INPUT_DEBUG /;"	d
TCP_INPUT_DEBUG	lwip/xv6/lwipopts.h	/^#define TCP_INPUT_DEBUG /;"	d
TCP_KEEPALIVE	lwip/include/lwip/tcp.h	/^#define TCP_KEEPALIVE /;"	d
TCP_KEEPCNT	lwip/include/lwip/tcp.h	/^#define  TCP_KEEPCNT /;"	d
TCP_KEEPDEFAULT	lwip/include/lwip/tcp.h	/^#define  TCP_KEEPDEFAULT /;"	d
TCP_KEEPINTVL	lwip/include/lwip/tcp.h	/^#define  TCP_KEEPINTVL /;"	d
TCP_LOCAL_PORT_RANGE_END	lwip/core/tcp.c	/^#define TCP_LOCAL_PORT_RANGE_END /;"	d	file:
TCP_LOCAL_PORT_RANGE_START	lwip/core/tcp.c	/^#define TCP_LOCAL_PORT_RANGE_START /;"	d	file:
TCP_MAXIDLE	lwip/include/lwip/tcp.h	/^#define  TCP_MAXIDLE /;"	d
TCP_MAXRTX	lwip/include/lwip/opt.h	/^#define TCP_MAXRTX /;"	d
TCP_MSL	lwip/include/lwip/tcp.h	/^#define TCP_MSL /;"	d
TCP_MSS	lwip/include/lwip/opt.h	/^#define TCP_MSS /;"	d
TCP_MSS	lwip/xv6/lwipopts.h	/^#define TCP_MSS /;"	d
TCP_NODELAY	lwip/include/lwip/tcp.h	/^#define	TCP_NODELAY	/;"	d
TCP_OOSEQ_TIMEOUT	lwip/include/lwip/tcp.h	/^#define TCP_OOSEQ_TIMEOUT /;"	d
TCP_OUTPUT_DEBUG	lwip/include/lwip/opt.h	/^#define TCP_OUTPUT_DEBUG /;"	d
TCP_OUTPUT_DEBUG	lwip/xv6/lwipopts.h	/^#define TCP_OUTPUT_DEBUG /;"	d
TCP_PRIO_MAX	lwip/include/lwip/tcp.h	/^#define TCP_PRIO_MAX /;"	d
TCP_PRIO_MIN	lwip/include/lwip/tcp.h	/^#define TCP_PRIO_MIN /;"	d
TCP_PRIO_NORMAL	lwip/include/lwip/tcp.h	/^#define TCP_PRIO_NORMAL /;"	d
TCP_PSH	lwip/include/lwip/tcp.h	/^#define TCP_PSH /;"	d
TCP_PUSH_BIT	lwip/netif/ppp/vj.h	/^#define TCP_PUSH_BIT /;"	d
TCP_QLEN_DEBUG	lwip/include/lwip/opt.h	/^#define TCP_QLEN_DEBUG /;"	d
TCP_QLEN_DEBUG	lwip/xv6/lwipopts.h	/^#define TCP_QLEN_DEBUG /;"	d
TCP_QUEUE_OOSEQ	lwip/include/lwip/opt.h	/^#define TCP_QUEUE_OOSEQ /;"	d
TCP_REG	lwip/include/lwip/tcp.h	/^#define TCP_REG(/;"	d
TCP_REXMIT_DEBUG	lwip/include/lwip/opt.h	/^#define TCP_REXMIT_DEBUG /;"	d
TCP_RMV	lwip/include/lwip/tcp.h	/^#define TCP_RMV(/;"	d
TCP_RST	lwip/include/lwip/tcp.h	/^#define TCP_RST /;"	d
TCP_RST_DEBUG	lwip/include/lwip/opt.h	/^#define TCP_RST_DEBUG /;"	d
TCP_RST_DEBUG	lwip/xv6/lwipopts.h	/^#define TCP_RST_DEBUG /;"	d
TCP_RTO_DEBUG	lwip/include/lwip/opt.h	/^#define TCP_RTO_DEBUG /;"	d
TCP_SEQ_GEQ	lwip/include/lwip/tcp.h	/^#define TCP_SEQ_GEQ(/;"	d
TCP_SEQ_GT	lwip/include/lwip/tcp.h	/^#define TCP_SEQ_GT(/;"	d
TCP_SEQ_LEQ	lwip/include/lwip/tcp.h	/^#define TCP_SEQ_LEQ(/;"	d
TCP_SEQ_LT	lwip/include/lwip/tcp.h	/^#define TCP_SEQ_LT(/;"	d
TCP_SLOW_INTERVAL	lwip/include/lwip/tcp.h	/^#define TCP_SLOW_INTERVAL /;"	d
TCP_SNDLOWAT	lwip/include/lwip/opt.h	/^#define TCP_SNDLOWAT /;"	d
TCP_SND_BUF	lwip/include/lwip/opt.h	/^#define TCP_SND_BUF /;"	d
TCP_SND_BUF	lwip/xv6/lwipopts.h	/^#define TCP_SND_BUF /;"	d
TCP_SND_QUEUELEN	lwip/include/lwip/opt.h	/^#define TCP_SND_QUEUELEN /;"	d
TCP_SND_QUEUELEN	lwip/xv6/lwipopts.h	/^#define TCP_SND_QUEUELEN /;"	d
TCP_STATS	lwip/include/lwip/opt.h	/^#define TCP_STATS	/;"	d
TCP_STATS_INC	lwip/include/lwip/stats.h	/^#define TCP_STATS_INC(/;"	d
TCP_SYN	lwip/include/lwip/tcp.h	/^#define TCP_SYN /;"	d
TCP_SYNMAXRTX	lwip/include/lwip/opt.h	/^#define TCP_SYNMAXRTX /;"	d
TCP_SYN_RCVD_TIMEOUT	lwip/include/lwip/tcp.h	/^#define TCP_SYN_RCVD_TIMEOUT /;"	d
TCP_TCPLEN	lwip/include/lwip/tcp.h	/^#define TCP_TCPLEN(/;"	d
TCP_TMR_INTERVAL	lwip/include/lwip/tcp.h	/^#define TCP_TMR_INTERVAL /;"	d
TCP_TTL	lwip/include/lwip/opt.h	/^#define TCP_TTL /;"	d
TCP_URG	lwip/include/lwip/tcp.h	/^#define TCP_URG /;"	d
TCP_WND	lwip/include/lwip/opt.h	/^#define TCP_WND /;"	d
TCP_WND	lwip/xv6/lwipopts.h	/^#define TCP_WND /;"	d
TCP_WND_DEBUG	lwip/include/lwip/opt.h	/^#define TCP_WND_DEBUG /;"	d
TDCR	lapic.c	/^#define TDCR /;"	d	file:
TERMACK	lwip/netif/ppp/fsm.h	/^#define TERMACK	/;"	d
TERMREQ	lwip/netif/ppp/fsm.h	/^#define TERMREQ	/;"	d
TF_ACK_DELAY	lwip/include/lwip/tcp.h	/^#define TF_ACK_DELAY /;"	d
TF_ACK_NOW	lwip/include/lwip/tcp.h	/^#define TF_ACK_NOW /;"	d
TF_CLOSED	lwip/include/lwip/tcp.h	/^#define TF_CLOSED /;"	d
TF_GOT_FIN	lwip/include/lwip/tcp.h	/^#define TF_GOT_FIN /;"	d
TF_INFR	lwip/include/lwip/tcp.h	/^#define TF_INFR /;"	d
TF_NODELAY	lwip/include/lwip/tcp.h	/^#define TF_NODELAY /;"	d
TF_RESET	lwip/include/lwip/tcp.h	/^#define TF_RESET /;"	d
TICR	lapic.c	/^#define TICR /;"	d	file:
TIMEOUT	lwip/netif/ppp/ppp.h	/^#define TIMEOUT(/;"	d
TIMER	lapic.c	/^#define TIMER /;"	d	file:
TIMER_16BIT	timer.c	/^#define TIMER_16BIT /;"	d	file:
TIMER_DIV	timer.c	/^#define TIMER_DIV(/;"	d	file:
TIMER_FREQ	timer.c	/^#define TIMER_FREQ /;"	d	file:
TIMER_MODE	timer.c	/^#define TIMER_MODE /;"	d	file:
TIMER_RATEGEN	timer.c	/^#define TIMER_RATEGEN /;"	d	file:
TIMER_SEL0	timer.c	/^#define TIMER_SEL0 /;"	d	file:
TIME_WAIT	lwip/include/lwip/tcp.h	/^  TIME_WAIT   = 10$/;"	e	enum:tcp_state
TPR	lapic.c	/^#define TPR /;"	d	file:
TRACELCP	lwip/netif/ppp/pppdebug.h	/^#define TRACELCP /;"	d
TYPE_COMPRESSED_TCP	lwip/netif/ppp/vj.h	/^#define TYPE_COMPRESSED_TCP /;"	d
TYPE_ERROR	lwip/netif/ppp/vj.h	/^#define TYPE_ERROR /;"	d
TYPE_IP	lwip/netif/ppp/vj.h	/^#define TYPE_IP /;"	d
TYPE_UNCOMPRESSED_TCP	lwip/netif/ppp/vj.h	/^#define TYPE_UNCOMPRESSED_TCP /;"	d
T_ALIGN	traps.h	/^#define T_ALIGN /;"	d
T_BOUND	traps.h	/^#define T_BOUND /;"	d
T_BRKPT	traps.h	/^#define T_BRKPT /;"	d
T_DBLFLT	traps.h	/^#define T_DBLFLT /;"	d
T_DEBUG	traps.h	/^#define T_DEBUG /;"	d
T_DEFAULT	traps.h	/^#define T_DEFAULT /;"	d
T_DEV	fs.h	/^#define T_DEV /;"	d
T_DEVICE	traps.h	/^#define T_DEVICE /;"	d
T_DIR	fs.h	/^#define T_DIR /;"	d
T_DIVIDE	traps.h	/^#define T_DIVIDE /;"	d
T_FILE	fs.h	/^#define T_FILE /;"	d
T_FPERR	traps.h	/^#define T_FPERR /;"	d
T_GPFLT	traps.h	/^#define T_GPFLT /;"	d
T_ILLOP	traps.h	/^#define T_ILLOP /;"	d
T_MCHK	traps.h	/^#define T_MCHK /;"	d
T_NMI	traps.h	/^#define T_NMI /;"	d
T_OFLOW	traps.h	/^#define T_OFLOW /;"	d
T_PGFLT	traps.h	/^#define T_PGFLT /;"	d
T_SEGNP	traps.h	/^#define T_SEGNP /;"	d
T_SIMDERR	traps.h	/^#define T_SIMDERR /;"	d
T_STACK	traps.h	/^#define T_STACK /;"	d
T_SYSCALL	traps.h	/^#define T_SYSCALL /;"	d
T_TSS	traps.h	/^#define T_TSS /;"	d
Transform	lwip/netif/ppp/md5.c	/^static void Transform (u32_t *buf, u32_t *in)$/;"	f	file:	signature:(u32_t *buf, u32_t *in)
Transform	lwip/netif/ppp/md5.c	/^static void Transform (u32_t *buf, u32_t *in);$/;"	p	file:	signature:(u32_t *buf, u32_t *in)
UDP_DEBUG	lwip/include/lwip/opt.h	/^#define UDP_DEBUG /;"	d
UDP_DEBUG	lwip/xv6/lwipopts.h	/^#define UDP_DEBUG /;"	d
UDP_FLAGS_CONNECTED	lwip/include/lwip/udp.h	/^#define UDP_FLAGS_CONNECTED /;"	d
UDP_FLAGS_NOCHKSUM	lwip/include/lwip/udp.h	/^#define UDP_FLAGS_NOCHKSUM /;"	d
UDP_FLAGS_UDPLITE	lwip/include/lwip/udp.h	/^#define UDP_FLAGS_UDPLITE /;"	d
UDP_HLEN	lwip/include/lwip/udp.h	/^#define UDP_HLEN /;"	d
UDP_LOCAL_PORT_RANGE_END	lwip/core/udp.c	/^#define UDP_LOCAL_PORT_RANGE_END /;"	d	file:
UDP_LOCAL_PORT_RANGE_START	lwip/core/udp.c	/^#define UDP_LOCAL_PORT_RANGE_START /;"	d	file:
UDP_STATS	lwip/include/lwip/opt.h	/^#define UDP_STATS	/;"	d
UDP_STATS_INC	lwip/include/lwip/stats.h	/^#define UDP_STATS_INC(/;"	d
UDP_TTL	lwip/include/lwip/opt.h	/^#define UDP_TTL /;"	d
UL	lwip/netif/ppp/md5.c	/^#define UL(/;"	d	file:
UNTIMEOUT	lwip/netif/ppp/ppp.h	/^#define UNTIMEOUT(/;"	d
UNUSED	proc.h	/^enum proc_state { UNUSED, EMBRYO, SLEEPING, RUNNABLE, $/;"	e	enum:proc_state
UPAPCS_AUTHREQ	lwip/netif/ppp/pap.h	/^#define UPAPCS_AUTHREQ	/;"	d
UPAPCS_BADAUTH	lwip/netif/ppp/pap.h	/^#define UPAPCS_BADAUTH	/;"	d
UPAPCS_CLOSED	lwip/netif/ppp/pap.h	/^#define UPAPCS_CLOSED	/;"	d
UPAPCS_INITIAL	lwip/netif/ppp/pap.h	/^#define UPAPCS_INITIAL	/;"	d
UPAPCS_OPEN	lwip/netif/ppp/pap.h	/^#define UPAPCS_OPEN	/;"	d
UPAPCS_PENDING	lwip/netif/ppp/pap.h	/^#define UPAPCS_PENDING	/;"	d
UPAPDEBUG	lwip/netif/ppp/pppdebug.h	/^#define UPAPDEBUG(/;"	d
UPAPSS_BADAUTH	lwip/netif/ppp/pap.h	/^#define UPAPSS_BADAUTH	/;"	d
UPAPSS_CLOSED	lwip/netif/ppp/pap.h	/^#define UPAPSS_CLOSED	/;"	d
UPAPSS_INITIAL	lwip/netif/ppp/pap.h	/^#define UPAPSS_INITIAL	/;"	d
UPAPSS_LISTEN	lwip/netif/ppp/pap.h	/^#define UPAPSS_LISTEN	/;"	d
UPAPSS_OPEN	lwip/netif/ppp/pap.h	/^#define UPAPSS_OPEN	/;"	d
UPAPSS_PENDING	lwip/netif/ppp/pap.h	/^#define UPAPSS_PENDING	/;"	d
UPAP_AUTHACK	lwip/netif/ppp/pap.h	/^#define UPAP_AUTHACK	/;"	d
UPAP_AUTHNAK	lwip/netif/ppp/pap.h	/^#define UPAP_AUTHNAK	/;"	d
UPAP_AUTHREQ	lwip/netif/ppp/pap.h	/^#define UPAP_AUTHREQ	/;"	d
UPAP_DEFREQTIME	lwip/include/lwip/opt.h	/^#define UPAP_DEFREQTIME /;"	d
UPAP_DEFTIMEOUT	lwip/include/lwip/opt.h	/^#define UPAP_DEFTIMEOUT /;"	d
UPAP_HEADERLEN	lwip/netif/ppp/pap.h	/^#define UPAP_HEADERLEN	/;"	d
USE_CRYPT	lwip/netif/ppp/chpms.c	/^#define USE_CRYPT$/;"	d	file:
UseNT	lwip/netif/ppp/chpms.c	/^    u_char UseNT;		\/* If 1, ignore the LANMan response field *\/$/;"	m	struct:__anon25	file:	access:public
VER	lapic.c	/^#define VER /;"	d	file:
VJBSDHDR_H	lwip/netif/ppp/vjbsdhdr.h	/^#define VJBSDHDR_H$/;"	d
VJF_TOSS	lwip/netif/ppp/vj.h	/^#define VJF_TOSS /;"	d
VJ_H	lwip/netif/ppp/vj.h	/^#define VJ_H$/;"	d
VJ_SUPPORT	lwip/include/lwip/opt.h	/^#define VJ_SUPPORT /;"	d
X1	lapic.c	/^  #define X1 /;"	d	file:
XV6_ASSERT_H_	assert.h	/^#define XV6_ASSERT_H_$/;"	d
XV6_DEFS_H_	defs.h	/^#define XV6_DEFS_H_$/;"	d
XV6_E100_H_	e100.h	/^#define XV6_E100_H_$/;"	d
XV6_LWIP_CC_H_	lwip/xv6/arch/cc.h	/^#define XV6_LWIP_CC_H_$/;"	d
XV6_LWIP_ETHERNETIF_H_	lwip/include/netif/ethernetif.h	/^#define XV6_LWIP_ETHERNETIF_H_$/;"	d
XV6_LWIP_PERF_H_	lwip/xv6/arch/perf.h	/^#define XV6_LWIP_PERF_H_$/;"	d
XV6_LWIP_SYS_ARCH_H_	lwip/xv6/arch/sys_arch.h	/^#define XV6_LWIP_SYS_ARCH_H_$/;"	d
XV6_MMU_H_	mmu.h	/^#define XV6_MMU_H_$/;"	d
XV6_PARAM_H_	param.h	/^#define XV6_PARAM_H_$/;"	d
XV6_PCI_H_	pci.h	/^#define XV6_PCI_H_$/;"	d
XV6_PICIRQ_H_	picirq.h	/^#define XV6_PICIRQ_H_$/;"	d
XV6_SEM_H_	sem.h	/^#define XV6_SEM_H_$/;"	d
XV6_SPINLOCK_H_	spinlock.h	/^#define XV6_SPINLOCK_H_$/;"	d
XV6_THREAD_H_	thread.h	/^#define XV6_THREAD_H_$/;"	d
XV6_TYPES_H_	types.h	/^#define XV6_TYPES_H_$/;"	d
XV6_X86_H_	x86.h	/^#define XV6_X86_H_$/;"	d
ZOMBIE	proc.h	/^    RUNNING, ZOMBIE, MSLEEPING};$/;"	e	enum:proc_state
_DEV_PCI_PCIREG_H_	pcireg.h	/^#define	_DEV_PCI_PCIREG_H_$/;"	d
_IO	lwip/include/lwip/sockets.h	/^#define _IO(/;"	d
_IOR	lwip/include/lwip/sockets.h	/^#define _IOR(/;"	d
_IOW	lwip/include/lwip/sockets.h	/^#define _IOW(/;"	d
__LWIP_API_H__	lwip/include/lwip/api.h	/^#define __LWIP_API_H__$/;"	d
__LWIP_API_MSG_H__	lwip/include/lwip/api_msg.h	/^#define __LWIP_API_MSG_H__$/;"	d
__LWIP_ARCH_H__	lwip/include/lwip/arch.h	/^#define __LWIP_ARCH_H__$/;"	d
__LWIP_DEBUG_H__	lwip/include/lwip/debug.h	/^#define __LWIP_DEBUG_H__$/;"	d
__LWIP_DEF_H__	lwip/include/lwip/def.h	/^#define __LWIP_DEF_H__$/;"	d
__LWIP_DHCP_H__	lwip/include/lwip/dhcp.h	/^#define __LWIP_DHCP_H__$/;"	d
__LWIP_ERR_H__	lwip/include/lwip/err.h	/^#define __LWIP_ERR_H__$/;"	d
__LWIP_ICMP_H__	lwip/include/ipv4/lwip/icmp.h	/^#define __LWIP_ICMP_H__$/;"	d
__LWIP_ICMP_H__	lwip/include/ipv6/lwip/icmp.h	/^#define __LWIP_ICMP_H__$/;"	d
__LWIP_INET_H__	lwip/include/ipv4/lwip/inet.h	/^#define __LWIP_INET_H__$/;"	d
__LWIP_INET_H__	lwip/include/ipv6/lwip/inet.h	/^#define __LWIP_INET_H__$/;"	d
__LWIP_IP_ADDR_H__	lwip/include/ipv4/lwip/ip_addr.h	/^#define __LWIP_IP_ADDR_H__$/;"	d
__LWIP_IP_ADDR_H__	lwip/include/ipv6/lwip/ip_addr.h	/^#define __LWIP_IP_ADDR_H__$/;"	d
__LWIP_IP_FRAG_H__	lwip/include/ipv4/lwip/ip_frag.h	/^#define __LWIP_IP_FRAG_H__$/;"	d
__LWIP_IP_H__	lwip/include/ipv4/lwip/ip.h	/^#define __LWIP_IP_H__$/;"	d
__LWIP_IP_H__	lwip/include/ipv6/lwip/ip.h	/^#define __LWIP_IP_H__$/;"	d
__LWIP_MEMP_H__	lwip/include/lwip/memp.h	/^#define __LWIP_MEMP_H__$/;"	d
__LWIP_MEM_H__	lwip/include/lwip/mem.h	/^#define __LWIP_MEM_H__$/;"	d
__LWIP_NETIF_H__	lwip/include/lwip/netif.h	/^#define __LWIP_NETIF_H__$/;"	d
__LWIP_OPT_H__	lwip/include/lwip/opt.h	/^#define __LWIP_OPT_H__$/;"	d
__LWIP_PBUF_H__	lwip/include/lwip/pbuf.h	/^#define __LWIP_PBUF_H__$/;"	d
__LWIP_RAW_H__	lwip/include/lwip/raw.h	/^#define __LWIP_RAW_H__$/;"	d
__LWIP_SNMP_H__	lwip/include/lwip/snmp.h	/^#define __LWIP_SNMP_H__$/;"	d
__LWIP_SOCKETS_H__	lwip/include/lwip/sockets.h	/^#define __LWIP_SOCKETS_H__$/;"	d
__LWIP_STATS_H__	lwip/include/lwip/stats.h	/^#define __LWIP_STATS_H__$/;"	d
__LWIP_SYS_H__	lwip/include/lwip/sys.h	/^#define __LWIP_SYS_H__$/;"	d
__LWIP_TCPIP_H__	lwip/include/lwip/tcpip.h	/^#define __LWIP_TCPIP_H__$/;"	d
__LWIP_TCP_H__	lwip/include/lwip/tcp.h	/^#define __LWIP_TCP_H__$/;"	d
__LWIP_UDP_H__	lwip/include/lwip/udp.h	/^#define __LWIP_UDP_H__$/;"	d
__NETIF_ETHARP_H__	lwip/include/netif/etharp.h	/^#define __NETIF_ETHARP_H__$/;"	d
__NETIF_LOOPIF_H__	lwip/include/netif/loopif.h	/^#define __NETIF_LOOPIF_H__$/;"	d
__NETIF_SLIPIF_H__	lwip/include/netif/slipif.h	/^#define __NETIF_SLIPIF_H__$/;"	d
__anon1::buf	console.c	/^  char buf[INPUT_BUF];$/;"	m	struct:__anon1	file:	access:public
__anon1::e	console.c	/^  int e;  \/\/ Edit index$/;"	m	struct:__anon1	file:	access:public
__anon1::lock	console.c	/^  struct spinlock lock;$/;"	m	struct:__anon1	typeref:struct:__anon1::spinlock	file:	access:public
__anon1::r	console.c	/^  int r;  \/\/ Read index$/;"	m	struct:__anon1	file:	access:public
__anon1::w	console.c	/^  int w;  \/\/ Write index$/;"	m	struct:__anon1	file:	access:public
__anon25::LANManResp	lwip/netif/ppp/chpms.c	/^    u_char LANManResp[24];$/;"	m	struct:__anon25	file:	access:public
__anon25::NTResp	lwip/netif/ppp/chpms.c	/^    u_char NTResp[24];$/;"	m	struct:__anon25	file:	access:public
__anon25::UseNT	lwip/netif/ppp/chpms.c	/^    u_char UseNT;		\/* If 1, ignore the LANMan response field *\/$/;"	m	struct:__anon25	file:	access:public
__anon29::buf	lwip/netif/ppp/md5.h	/^  u32_t buf[4];                                    \/* scratch buffer *\/$/;"	m	struct:__anon29	access:public
__anon29::digest	lwip/netif/ppp/md5.h	/^  unsigned char digest[16];     \/* actual digest after MD5Final call *\/$/;"	m	struct:__anon29	access:public
__anon29::i	lwip/netif/ppp/md5.h	/^  u32_t i[2];                   \/* number of _bits_ handled mod 2^64 *\/$/;"	m	struct:__anon29	access:public
__anon29::in	lwip/netif/ppp/md5.h	/^  unsigned char in[64];                              \/* input buffer *\/$/;"	m	struct:__anon29	access:public
__anon2::inode	fs.c	/^  struct inode inode[NINODE];$/;"	m	struct:__anon2	typeref:struct:__anon2::inode	file:	access:public
__anon2::lock	fs.c	/^  struct spinlock lock;$/;"	m	struct:__anon2	typeref:struct:__anon2::spinlock	file:	access:public
__assert	assert.c	/^void __assert(const char *func, const char *file, $/;"	f	signature:(const char *func, const char *file, int line, const char *expr)
__assert	assert.h	/^void __assert(const char *, const char *, int, const char *);$/;"	p	signature:(const char *, const char *, int, const char *)
_inet_ntoa	lwip/netif/ppp/ipcp.c	/^char * _inet_ntoa(u32_t n)$/;"	f	signature:(u32_t n)
_namei	fs.c	/^_namei(char *path, int parent, char *name)$/;"	f	file:	signature:(char *path, int parent, char *name)
accept	lwip/include/lwip/sockets.h	/^#define accept(/;"	d
accept	lwip/include/lwip/tcp.h	/^  err_t (* accept)(void *arg, struct tcp_pcb *newpcb, err_t err);$/;"	m	struct:tcp_pcb	access:public
accept	lwip/include/lwip/tcp.h	/^  err_t (* accept)(void *arg, struct tcp_pcb *newpcb, err_t err);$/;"	m	struct:tcp_pcb_listen	access:public
accept	user.h	/^int accept(int s, struct sockaddr *addr, socklen_t *addrlen);$/;"	p	signature:(int s, struct sockaddr *addr, socklen_t *addrlen)
accept_function	lwip/api/api_msg.c	/^accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)$/;"	f	file:	signature:(void *arg, struct tcp_pcb *newpcb, err_t err)
accept_local	lwip/netif/ppp/ipcp.h	/^    u_int accept_local : 1;		\/* accept peer's value for ouraddr *\/$/;"	m	struct:ipcp_options	access:public
accept_remote	lwip/netif/ppp/ipcp.h	/^    u_int accept_remote : 1;		\/* accept peer's value for hisaddr *\/$/;"	m	struct:ipcp_options	access:public
acceptmbox	lwip/include/lwip/api.h	/^  sys_mbox_t acceptmbox;$/;"	m	struct:netconn	access:public
accomp	lwip/netif/ppp/ppp.c	/^    int  accomp;                        \/* Does peer accept addr\/ctl compression? *\/$/;"	m	struct:PPPControl_s	file:	access:public
ackci	lwip/netif/ppp/fsm.h	/^    int  (*ackci)			\/* ACK our Configuration Information *\/$/;"	m	struct:fsm_callbacks	access:public
acked	lwip/include/lwip/tcp.h	/^  u16_t acked;$/;"	m	struct:tcp_pcb	access:public
ackno	lwip/core/tcp_in.c	/^static u32_t seqno, ackno;$/;"	v	file:
acquire	defs.h	/^void            acquire(struct spinlock*);$/;"	p	signature:(struct spinlock*)
acquire	spinlock.c	/^acquire(struct spinlock *lock)$/;"	f	signature:(struct spinlock *lock)
addci	lwip/netif/ppp/fsm.h	/^    void (*addci) 			\/* Add our Configuration Information *\/$/;"	m	struct:fsm_callbacks	access:public
addr	lwip/include/ipv6/lwip/ip_addr.h	/^  u32_t addr[4];$/;"	m	struct:ip_addr	access:public
addr	mp.h	/^  uint *addr;                  \/\/ I\/O APIC address$/;"	m	struct:mpioapic	access:public
addresses	lwip/netif/ppp/auth.c	/^static struct wordlist *addresses[NUM_PPP];$/;"	v	typeref:struct:wordlist	file:
addrs	fs.h	/^  uint addrs[NADDRS];   \/\/ Data block addresses$/;"	m	struct:dinode	access:public
addrs	fsvar.h	/^  uint addrs[NADDRS];$/;"	m	struct:inode	access:public
addrs	lwip/netif/ppp/ppp.c	/^    struct ppp_addrs addrs;$/;"	m	struct:PPPControl_s	typeref:struct:PPPControl_s::ppp_addrs	file:	access:public
align	elf.h	/^  uint align;$/;"	m	struct:proghdr	access:public
align_err	e100.h	/^    char align_err :1;$/;"	m	struct:rf_status	access:public
alloc_locked	lwip/include/lwip/stats.h	/^  u16_t alloc_locked;$/;"	m	struct:stats_pbuf	access:public
alloc_socket	lwip/api/sockets.c	/^alloc_socket(struct netconn *newconn)$/;"	f	file:	signature:(struct netconn *newconn)
allocproc	defs.h	/^struct proc*    allocproc(void);$/;"	p	signature:(void)
allocproc	proc.c	/^allocproc(void)$/;"	f	signature:(void)
api_msg	lwip/include/lwip/api_msg.h	/^struct api_msg {$/;"	s
api_msg::msg	lwip/include/lwip/api_msg.h	/^  struct api_msg_msg msg;$/;"	m	struct:api_msg	typeref:struct:api_msg::api_msg_msg	access:public
api_msg::type	lwip/include/lwip/api_msg.h	/^  enum api_msg_type type;$/;"	m	struct:api_msg	typeref:enum:api_msg::api_msg_type	access:public
api_msg_decode	lwip/api/api_msg.c	/^typedef void (* api_msg_decode)(struct api_msg_msg *msg);$/;"	t	file:
api_msg_input	lwip/api/api_msg.c	/^api_msg_input(struct api_msg *msg)$/;"	f	signature:(struct api_msg *msg)
api_msg_input	lwip/include/lwip/api_msg.h	/^void api_msg_input(struct api_msg *msg);$/;"	p	signature:(struct api_msg *msg)
api_msg_msg	lwip/include/lwip/api_msg.h	/^struct api_msg_msg {$/;"	s
api_msg_msg::ipaddr	lwip/include/lwip/api_msg.h	/^      struct ip_addr *ipaddr;$/;"	m	struct:api_msg_msg	typeref:struct:api_msg_msg::ip_addr	access:public
api_msg_msg::port	lwip/include/lwip/api_msg.h	/^      u16_t port;$/;"	m	struct:api_msg_msg	access:public
api_msg_msg::copy	lwip/include/lwip/api_msg.h	/^      unsigned char copy;$/;"	m	struct:api_msg_msg	access:public
api_msg_msg::dataptr	lwip/include/lwip/api_msg.h	/^      void *dataptr;$/;"	m	struct:api_msg_msg	access:public
api_msg_msg::len	lwip/include/lwip/api_msg.h	/^      u16_t len;$/;"	m	struct:api_msg_msg	access:public
api_msg_msg::bc	lwip/include/lwip/api_msg.h	/^    } bc;$/;"	m	union:api_msg_msg	typeref:struct:api_msg_msg	access:public
api_msg_msg::len	lwip/include/lwip/api_msg.h	/^    u16_t len;$/;"	m	union:api_msg_msg	access:public
api_msg_msg::mbox	lwip/include/lwip/api_msg.h	/^    sys_mbox_t mbox;$/;"	m	union:api_msg_msg	access:public
api_msg_msg::p	lwip/include/lwip/api_msg.h	/^    struct pbuf *p;   $/;"	m	union:api_msg_msg	typeref:struct:api_msg_msg::pbuf	access:public
api_msg_msg::w	lwip/include/lwip/api_msg.h	/^    } w;    $/;"	m	union:api_msg_msg	typeref:struct:api_msg_msg	access:public
api_msg_msg::conn	lwip/include/lwip/api_msg.h	/^  struct netconn *conn;$/;"	m	struct:api_msg_msg	typeref:struct:api_msg_msg::netconn	access:public
api_msg_msg::conntype	lwip/include/lwip/api_msg.h	/^  enum netconn_type conntype;$/;"	m	struct:api_msg_msg	typeref:enum:api_msg_msg::netconn_type	access:public
api_msg_msg::msg	lwip/include/lwip/api_msg.h	/^  } msg;$/;"	m	struct:api_msg_msg	typeref:union:api_msg_msg	access:public
api_msg_post	lwip/api/api_msg.c	/^api_msg_post(struct api_msg *msg)$/;"	f	signature:(struct api_msg *msg)
api_msg_post	lwip/include/lwip/api_msg.h	/^void api_msg_post(struct api_msg *msg);$/;"	p	signature:(struct api_msg *msg)
api_msg_type	lwip/include/lwip/api_msg.h	/^enum api_msg_type {$/;"	g
apicid	mp.h	/^  uchar apicid;                 \/\/ local APIC id$/;"	m	struct:mpproc	access:public
apicid	proc.h	/^  uchar apicid;               \/\/ Local APIC ID$/;"	m	struct:cpu	access:public
apicno	mp.h	/^  uchar apicno;                 \/\/ I\/O APIC id$/;"	m	struct:mpioapic	access:public
apimsg	lwip/include/lwip/tcpip.h	/^    struct api_msg *apimsg;$/;"	m	union:tcpip_msg	typeref:struct:tcpip_msg::api_msg	access:public
arg	lwip/include/lwip/sys.h	/^  void *arg;$/;"	m	struct:sys_timeout	access:public
argfd	sysfile.c	/^argfd(int n, int *pfd, struct file **pf)$/;"	f	file:	signature:(int n, int *pfd, struct file **pf)
argint	defs.h	/^int             argint(int, int*);$/;"	p	signature:(int, int*)
argint	syscall.c	/^argint(int n, int *ip)$/;"	f	signature:(int n, int *ip)
argptr	defs.h	/^int             argptr(int, char**, int);$/;"	p	signature:(int, char**, int)
argptr	syscall.c	/^argptr(int n, char **pp, int size)$/;"	f	signature:(int n, char **pp, int size)
args	mmu.h	/^  uint args : 5;        \/\/ # args, 0 for interrupt\/trap gates$/;"	m	struct:gatedesc	access:public
argstr	defs.h	/^int             argstr(int, char**);$/;"	p	signature:(int, char**)
argstr	syscall.c	/^argstr(int n, char **pp)$/;"	f	signature:(int n, char **pp)
argv	sh.c	/^  char *argv[MAXARGS];$/;"	m	struct:execcmd	file:	access:public
arp_table	lwip/netif/etharp.c	/^static struct etharp_entry arp_table[ARP_TABLE_SIZE];$/;"	v	typeref:struct:etharp_entry	file:
arp_timer	lwip/netif/ethernetif.c	/^arp_timer(void *arg)$/;"	f	file:	signature:(void *arg)
assert	assert.h	/^#define assert(/;"	d
asyncmap	lwip/netif/ppp/lcp.h	/^    u32_t asyncmap;			\/* Value of async map *\/$/;"	m	struct:lcp_options	access:public
atoi	ulib.c	/^atoi(const char *s)$/;"	f	signature:(const char *s)
atoi	user.h	/^int atoi(const char*);$/;"	p	signature:(const char*)
attachfn	pci.c	/^    int (*attachfn) (struct pci_func *pcif);$/;"	m	struct:pci_driver	file:	access:public
auth_check_options	lwip/netif/ppp/auth.h	/^void auth_check_options (void);$/;"	p	signature:(void)
auth_ip_addr	lwip/netif/ppp/auth.c	/^int auth_ip_addr(int unit, u32_t addr)$/;"	f	signature:(int unit, u32_t addr)
auth_ip_addr	lwip/netif/ppp/auth.h	/^int  auth_ip_addr (int, u32_t);$/;"	p	signature:(int, u32_t)
auth_peer_fail	lwip/netif/ppp/auth.c	/^void auth_peer_fail(int unit, u16_t protocol)$/;"	f	signature:(int unit, u16_t protocol)
auth_peer_fail	lwip/netif/ppp/auth.h	/^void auth_peer_fail (int, u16_t);\/* peer failed to authenticate itself *\/$/;"	p	signature:(int, u16_t)
auth_peer_success	lwip/netif/ppp/auth.c	/^void auth_peer_success(int unit, u16_t protocol, char *name, int namelen)$/;"	f	signature:(int unit, u16_t protocol, char *name, int namelen)
auth_peer_success	lwip/netif/ppp/auth.h	/^void auth_peer_success (int, u16_t, char *, int);$/;"	p	signature:(int, u16_t, char *, int)
auth_pending	lwip/netif/ppp/auth.c	/^static int auth_pending[NUM_PPP];$/;"	v	file:
auth_required	lwip/netif/ppp/ppp.h	/^	u_int  auth_required : 1;      \/* Peer is required to authenticate *\/$/;"	m	struct:ppp_settings	access:public
auth_reset	lwip/netif/ppp/auth.c	/^void auth_reset(int unit)$/;"	f	signature:(int unit)
auth_reset	lwip/netif/ppp/auth.h	/^void auth_reset (int);			\/* check what secrets we have *\/$/;"	p	signature:(int)
auth_withpeer_fail	lwip/netif/ppp/auth.c	/^void auth_withpeer_fail(int unit, u16_t protocol)$/;"	f	signature:(int unit, u16_t protocol)
auth_withpeer_fail	lwip/netif/ppp/auth.h	/^void auth_withpeer_fail (int, u16_t);$/;"	p	signature:(int, u16_t)
auth_withpeer_success	lwip/netif/ppp/auth.c	/^void auth_withpeer_success(int unit, u16_t protocol)$/;"	f	signature:(int unit, u16_t protocol)
auth_withpeer_success	lwip/netif/ppp/auth.h	/^void auth_withpeer_success (int, u16_t);$/;"	p	signature:(int, u16_t)
avChurnRand	lwip/netif/ppp/randm.c	/^void avChurnRand(char *randData, u32_t randLen)$/;"	f	signature:(char *randData, u32_t randLen)
avChurnRand	lwip/netif/ppp/randm.h	/^void avChurnRand(char *randData, u32_t randLen);$/;"	p	signature:(char *randData, u32_t randLen)
avGenRand	lwip/netif/ppp/randm.c	/^void avGenRand(char *buf, u32_t bufLen)$/;"	f	signature:(char *buf, u32_t bufLen)
avGenRand	lwip/netif/ppp/randm.h	/^void avGenRand(char *buf, u32_t bufLen);$/;"	p	signature:(char *buf, u32_t bufLen)
avRandom	lwip/netif/ppp/randm.c	/^u32_t avRandom()$/;"	f
avRandom	lwip/netif/ppp/randm.h	/^u32_t avRandom(void);$/;"	p	signature:(void)
avRandomInit	lwip/netif/ppp/randm.c	/^void avRandomInit()$/;"	f
avRandomInit	lwip/netif/ppp/randm.h	/^void avRandomInit(void);$/;"	p	signature:(void)
avRandomSeed	lwip/netif/ppp/randm.c	/^static u32_t avRandomSeed = 0;      \/* Seed used for random number generation. *\/$/;"	v	file:
avRandomize	lwip/netif/ppp/randm.c	/^void avRandomize(void)$/;"	f	signature:(void)
avRandomize	lwip/netif/ppp/randm.h	/^#define avRandomize(/;"	d
avRandomize	lwip/netif/ppp/randm.h	/^void avRandomize(void);$/;"	p	signature:(void)
avRandomized	lwip/netif/ppp/randm.c	/^static int  avRandomized = 0;       \/* Set when truely randomized. *\/$/;"	v	file:
avail	lwip/include/lwip/stats.h	/^  mem_size_t avail;$/;"	m	struct:stats_mem	access:public
avail	lwip/include/lwip/stats.h	/^  u16_t avail;$/;"	m	struct:stats_pbuf	access:public
avl	mmu.h	/^  uint avl : 1;        \/\/ Unused (available for software use)$/;"	m	struct:segdesc	access:public
backcmd	sh.c	/^backcmd(struct cmd *subcmd)$/;"	f	signature:(struct cmd *subcmd)
backcmd	sh.c	/^struct backcmd {$/;"	s	file:
backcmd::cmd	sh.c	/^  struct cmd *cmd;$/;"	m	struct:backcmd	typeref:struct:backcmd::cmd	file:	access:public
backcmd::type	sh.c	/^  int type;$/;"	m	struct:backcmd	file:	access:public
bad_ip_adrs	lwip/netif/ppp/auth.c	/^int bad_ip_adrs(u32_t addr)$/;"	f	signature:(u32_t addr)
bad_ip_adrs	lwip/netif/ppp/auth.h	/^int  bad_ip_adrs (u32_t);$/;"	p	signature:(u32_t)
balloc	fs.c	/^balloc(uint dev)$/;"	f	file:	signature:(uint dev)
balloc	mkfs.c	/^balloc(int used)$/;"	f	signature:(int used)
balloc	mkfs.c	/^void balloc(int);$/;"	p	file:	signature:(int)
base	umalloc.c	/^static Header base;$/;"	v	file:
base_15_0	mmu.h	/^  uint base_15_0 : 16; \/\/ Low bits of segment base address$/;"	m	struct:segdesc	access:public
base_23_16	mmu.h	/^  uint base_23_16 : 8; \/\/ Middle bits of segment base address$/;"	m	struct:segdesc	access:public
base_31_24	mmu.h	/^  uint base_31_24 : 8; \/\/ High bits of segment base address$/;"	m	struct:segdesc	access:public
base_cmd	e100.h	/^    command_block base_cmd;$/;"	m	struct:op_transmit_cmd	access:public
bc	lwip/include/lwip/api_msg.h	/^    } bc;$/;"	m	union:api_msg_msg	typeref:struct:api_msg_msg	access:public
bcpu	mp.c	/^static struct cpu *bcpu;$/;"	v	typeref:struct:cpu	file:
bfree	fs.c	/^bfree(int dev, uint b)$/;"	f	file:	signature:(int dev, uint b)
bget	bio.c	/^bget(uint dev, uint sector)$/;"	f	file:	signature:(uint dev, uint sector)
bigdir	usertests.c	/^bigdir(void)$/;"	f	signature:(void)
bigfile	usertests.c	/^bigfile(void)$/;"	f	signature:(void)
bind	lwip/include/lwip/sockets.h	/^#define bind(/;"	d
bind	user.h	/^int bind(int s, struct sockaddr *name, socklen_t namelen);$/;"	p	signature:(int s, struct sockaddr *name, socklen_t namelen)
binit	bio.c	/^binit(void)$/;"	f	signature:(void)
binit	defs.h	/^void            binit(void);$/;"	p	signature:(void)
bitblocks	mkfs.c	/^uint bitblocks;$/;"	v
bitmap_bits	lwip/core/ipv4/ip_frag.c	/^static const u8_t bitmap_bits[8] = { 0xff, 0x7f, 0x3f, 0x1f,$/;"	v	file:
bmap	fs.c	/^bmap(struct inode *ip, uint bn, int alloc)$/;"	f	file:	signature:(struct inode *ip, uint bn, int alloc)
booted	proc.h	/^  volatile int booted;        \/\/ Has the CPU started?$/;"	m	struct:cpu	access:public
bootmain	bootmain.c	/^bootmain(void)$/;"	f	signature:(void)
bootothers	main.c	/^bootothers(void)$/;"	f	file:	signature:(void)
bootothers	main.c	/^static void bootothers(void);$/;"	p	file:	signature:(void)
bread	bio.c	/^bread(uint dev, uint sector)$/;"	f	signature:(uint dev, uint sector)
bread	defs.h	/^struct buf*     bread(uint, uint);$/;"	p	signature:(uint, uint)
brelse	bio.c	/^brelse(struct buf *b)$/;"	f	signature:(struct buf *b)
brelse	defs.h	/^void            brelse(struct buf*);$/;"	p	signature:(struct buf*)
buf	bio.c	/^struct buf buf[NBUF];$/;"	v	typeref:struct:buf
buf	buf.h	/^struct buf {$/;"	s
buf	cat.c	/^char buf[512];$/;"	v
buf	console.c	/^  char buf[INPUT_BUF];$/;"	m	struct:__anon1	file:	access:public
buf	grep.c	/^char buf[1024];$/;"	v
buf	lwip/core/ipv4/ip_frag.c	/^static u8_t buf[MEM_ALIGN_SIZE(MAX_MTU)];$/;"	v	file:
buf	lwip/netif/ppp/md5.h	/^  u32_t buf[4];                                    \/* scratch buffer *\/$/;"	m	struct:__anon29	access:public
buf	usertests.c	/^char buf[2048];$/;"	v
buf	wc.c	/^char buf[512];$/;"	v
buf::data	buf.h	/^  uchar data[512];$/;"	m	struct:buf	access:public
buf::dev	buf.h	/^  uint dev;$/;"	m	struct:buf	access:public
buf::flags	buf.h	/^  int flags;$/;"	m	struct:buf	access:public
buf::next	buf.h	/^  struct buf *next;$/;"	m	struct:buf	typeref:struct:buf::buf	access:public
buf::prev	buf.h	/^  struct buf *prev; \/\/ LRU cache list$/;"	m	struct:buf	typeref:struct:buf::buf	access:public
buf::qnext	buf.h	/^  struct buf *qnext; \/\/ disk queue$/;"	m	struct:buf	typeref:struct:buf::buf	access:public
buf::sector	buf.h	/^  uint sector;$/;"	m	struct:buf	access:public
buf_table_lock	bio.c	/^struct spinlock buf_table_lock;$/;"	v	typeref:struct:spinlock
bufhead	bio.c	/^struct buf bufhead;$/;"	v	typeref:struct:buf
bus	pci.h	/^    struct pci_bus *bus;	\/\/ Primary bus for bridges$/;"	m	struct:pci_func	typeref:struct:pci_func::pci_bus	access:public
busno	pci.h	/^    uint32_t busno;$/;"	m	struct:pci_bus	access:public
bwrite	bio.c	/^bwrite(struct buf *b)$/;"	f	signature:(struct buf *b)
bwrite	defs.h	/^void            bwrite(struct buf*);$/;"	p	signature:(struct buf*)
byte_count	e100.h	/^        int byte_count :14;$/;"	m	struct:op_transmit_cmd	access:public
bzero	fs.c	/^bzero(int dev, int bno)$/;"	f	file:	signature:(int dev, int bno)
c	e100.h	/^            char c :        1;     \/\/ Completed$/;"	m	struct:command_block_tag	access:public
cachehit	lwip/include/lwip/stats.h	/^  u16_t cachehit;$/;"	m	struct:stats_proto	access:public
callback	lwip/include/lwip/api.h	/^  void (* callback)(struct netconn *, enum netconn_evt, u16_t len);$/;"	m	struct:netconn	access:public
callback_arg	lwip/include/lwip/tcp.h	/^  void *callback_arg;$/;"	m	struct:tcp_pcb	access:public
callback_arg	lwip/include/lwip/tcp.h	/^  void *callback_arg;$/;"	m	struct:tcp_pcb_listen	access:public
callback_phase	lwip/netif/ppp/auth.c	/^static void callback_phase (int);$/;"	p	file:	signature:(int)
callbacks	lwip/netif/ppp/fsm.h	/^    struct fsm_callbacks* callbacks;\/* Callback routines *\/$/;"	m	struct:fsm	typeref:struct:fsm::fsm_callbacks	access:public
cat	cat.c	/^cat(int fd)$/;"	f	signature:(int fd)
cat_args	usertests.c	/^char *cat_args[] = { "cat", "README", 0 };$/;"	v
cb	lwip/include/lwip/tcpip.h	/^    } cb;$/;"	m	union:tcpip_msg	typeref:struct:tcpip_msg	access:public
cflag	lwip/netif/ppp/ipcp.h	/^    u_char cflag;				\/* VJ slot compression flag. *\/$/;"	m	struct:ipcp_options	access:public
cga_putc	console.c	/^cga_putc(int c)$/;"	f	file:	signature:(int c)
chal_id	lwip/netif/ppp/chap.h	/^    u_char chal_id;		\/* ID of last challenge *\/$/;"	m	struct:chap_state	access:public
chal_interval	lwip/netif/ppp/chap.h	/^    int chal_interval;		\/* Time until we challenge peer again *\/$/;"	m	struct:chap_state	access:public
chal_len	lwip/netif/ppp/chap.h	/^    u_char chal_len;		\/* challenge length *\/$/;"	m	struct:chap_state	access:public
chal_name	lwip/netif/ppp/chap.h	/^    char *chal_name;		\/* Our name to use with challenge *\/$/;"	m	struct:chap_state	access:public
chal_transmits	lwip/netif/ppp/chap.h	/^    int chal_transmits;		\/* Number of transmissions of challenge *\/$/;"	m	struct:chap_state	access:public
chal_type	lwip/netif/ppp/chap.h	/^    u_char chal_type;		\/* hash algorithm for challenges *\/$/;"	m	struct:chap_state	access:public
challenge	lwip/netif/ppp/chap.h	/^    u_char challenge[MAX_CHALLENGE_LENGTH]; \/* last challenge string sent *\/$/;"	m	struct:chap_state	access:public
chan	proc.h	/^  void *chan;               \/\/ If non-zero, sleeping on chan$/;"	m	struct:proc	access:public
chap	lwip/netif/ppp/chap.c	/^chap_state chap[NUM_PPP];		\/* CHAP state; one for each unit *\/$/;"	v
chap_mdtype	lwip/netif/ppp/lcp.h	/^    u_char chap_mdtype;			\/* which MD type (hashing algorithm) *\/$/;"	m	struct:lcp_options	access:public
chap_protent	lwip/netif/ppp/chap.c	/^struct protent chap_protent = {$/;"	v	typeref:struct:protent
chap_state	lwip/netif/ppp/chap.h	/^typedef struct chap_state {$/;"	s
chap_state	lwip/netif/ppp/chap.h	/^} chap_state;$/;"	t	typeref:struct:chap_state
chap_state::chal_id	lwip/netif/ppp/chap.h	/^    u_char chal_id;		\/* ID of last challenge *\/$/;"	m	struct:chap_state	access:public
chap_state::chal_interval	lwip/netif/ppp/chap.h	/^    int chal_interval;		\/* Time until we challenge peer again *\/$/;"	m	struct:chap_state	access:public
chap_state::chal_len	lwip/netif/ppp/chap.h	/^    u_char chal_len;		\/* challenge length *\/$/;"	m	struct:chap_state	access:public
chap_state::chal_name	lwip/netif/ppp/chap.h	/^    char *chal_name;		\/* Our name to use with challenge *\/$/;"	m	struct:chap_state	access:public
chap_state::chal_transmits	lwip/netif/ppp/chap.h	/^    int chal_transmits;		\/* Number of transmissions of challenge *\/$/;"	m	struct:chap_state	access:public
chap_state::chal_type	lwip/netif/ppp/chap.h	/^    u_char chal_type;		\/* hash algorithm for challenges *\/$/;"	m	struct:chap_state	access:public
chap_state::challenge	lwip/netif/ppp/chap.h	/^    u_char challenge[MAX_CHALLENGE_LENGTH]; \/* last challenge string sent *\/$/;"	m	struct:chap_state	access:public
chap_state::clientstate	lwip/netif/ppp/chap.h	/^    int clientstate;		\/* Client state *\/$/;"	m	struct:chap_state	access:public
chap_state::id	lwip/netif/ppp/chap.h	/^    u_char id;			\/* Current id *\/$/;"	m	struct:chap_state	access:public
chap_state::max_transmits	lwip/netif/ppp/chap.h	/^    int max_transmits;		\/* Maximum # of challenge transmissions *\/$/;"	m	struct:chap_state	access:public
chap_state::resp_id	lwip/netif/ppp/chap.h	/^    u_char resp_id;		\/* ID for response messages *\/$/;"	m	struct:chap_state	access:public
chap_state::resp_length	lwip/netif/ppp/chap.h	/^    u_char resp_length;		\/* length of response *\/$/;"	m	struct:chap_state	access:public
chap_state::resp_name	lwip/netif/ppp/chap.h	/^    char *resp_name;		\/* Our name to send with response *\/$/;"	m	struct:chap_state	access:public
chap_state::resp_transmits	lwip/netif/ppp/chap.h	/^    int resp_transmits;		\/* Number of transmissions of response *\/$/;"	m	struct:chap_state	access:public
chap_state::resp_type	lwip/netif/ppp/chap.h	/^    u_char resp_type;		\/* hash algorithm for responses *\/$/;"	m	struct:chap_state	access:public
chap_state::response	lwip/netif/ppp/chap.h	/^    u_char response[MAX_RESPONSE_LENGTH];	\/* Response to send *\/$/;"	m	struct:chap_state	access:public
chap_state::serverstate	lwip/netif/ppp/chap.h	/^    int serverstate;		\/* Server state *\/$/;"	m	struct:chap_state	access:public
chap_state::timeouttime	lwip/netif/ppp/chap.h	/^    int timeouttime;		\/* Timeout time in seconds *\/$/;"	m	struct:chap_state	access:public
chap_state::unit	lwip/netif/ppp/chap.h	/^    int unit;			\/* Interface unit number *\/$/;"	m	struct:chap_state	access:public
chdir	user.h	/^int chdir(char*);$/;"	p	signature:(char*)
check_idle	lwip/netif/ppp/auth.c	/^static void check_idle (void *);$/;"	p	file:	signature:(void *)
check_idle	lwip/netif/ppp/auth.c	/^static void check_idle(void *arg)$/;"	f	file:	signature:(void *arg)
check_passwd	lwip/netif/ppp/auth.c	/^int check_passwd($/;"	f	signature:( int unit, char *auser, int userlen, char *apasswd, int passwdlen, char **msg, int *msglen )
check_passwd	lwip/netif/ppp/auth.h	/^int  check_passwd (int, char *, int, char *, int, char **, int *);$/;"	p	signature:(int, char *, int, char *, int, char **, int *)
checksum	mp.h	/^  uchar checksum;               \/\/ all bytes must add up to 0$/;"	m	struct:mp	access:public
checksum	mp.h	/^  uchar checksum;               \/\/ all bytes must add up to 0$/;"	m	struct:mpconf	access:public
chkerr	lwip/include/lwip/stats.h	/^  u16_t chkerr;  \/* Checksum error. *\/$/;"	m	struct:stats_proto	access:public
chksum	lwip/core/inet6.c	/^chksum(void *dataptr, u16_t len)$/;"	f	file:	signature:(void *dataptr, u16_t len)
chksum	lwip/include/ipv6/lwip/icmp.h	/^  u16_t chksum;$/;"	m	struct:icmp_dur_hdr	access:public
chksum	lwip/include/ipv6/lwip/icmp.h	/^  u16_t chksum;$/;"	m	struct:icmp_echo_hdr	access:public
chksum	lwip/include/ipv6/lwip/icmp.h	/^  u16_t chksum;$/;"	m	struct:icmp_te_hdr	access:public
chksum_len	lwip/include/lwip/udp.h	/^  u16_t chksum_len;$/;"	m	struct:udp_pcb	access:public
cid	e100.h	/^            char cid    : 5;$/;"	m	struct:op_transmit_cmd_cmd_tag	access:public
cifaddr	lwip/netif/ppp/ppp.c	/^int cifaddr($/;"	f	signature:( int pd, u32_t o, u32_t h )
cifaddr	lwip/netif/ppp/ppp.h	/^int  cifaddr (int, u32_t, u32_t);$/;"	p	signature:(int, u32_t, u32_t)
cifdefaultroute	lwip/netif/ppp/ppp.c	/^int cifdefaultroute(int pd, u32_t l, u32_t g)$/;"	f	signature:(int pd, u32_t l, u32_t g)
cifdefaultroute	lwip/netif/ppp/ppp.h	/^int  cifdefaultroute (int, u32_t, u32_t);$/;"	p	signature:(int, u32_t, u32_t)
cilen	lwip/netif/ppp/fsm.h	/^    int  (*cilen)			\/* Length of our Configuration Information *\/$/;"	m	struct:fsm_callbacks	access:public
cis_received	lwip/netif/ppp/ipcp.c	/^static int cis_received[NUM_PPP];		\/* # Conf-Reqs received *\/$/;"	v	file:
cli	x86.h	/^cli(void)$/;"	f	signature:(void)
clientstate	lwip/netif/ppp/chap.h	/^    int clientstate;		\/* Client state *\/$/;"	m	struct:chap_state	access:public
close	lwip/include/lwip/sockets.h	/^#define close(/;"	d
close	lwip/netif/ppp/ppp.h	/^    void (*close) (int unit, char *reason);$/;"	m	struct:protent	access:public
close	user.h	/^int close(int);$/;"	p	signature:(int)
cmd	e100.h	/^            char cmd    : 3;$/;"	m	struct:op_transmit_cmd_cmd_tag	access:public
cmd	e100.h	/^            char cmd :  3;$/;"	m	struct:command_block_tag	access:public
cmd	e100.h	/^    struct scb_command_word cmd;$/;"	m	union:scb_command_word_tag	typeref:struct:scb_command_word_tag::scb_command_word	access:public
cmd	sh.c	/^  struct cmd *cmd;$/;"	m	struct:backcmd	typeref:struct:backcmd::cmd	file:	access:public
cmd	sh.c	/^  struct cmd *cmd;$/;"	m	struct:redircmd	typeref:struct:redircmd::cmd	file:	access:public
cmd	sh.c	/^struct cmd {$/;"	s	file:
cmd::type	sh.c	/^  int type;$/;"	m	struct:cmd	file:	access:public
cmd_word	e100.h	/^        uint16_t cmd_word;$/;"	m	union:command_block_tag	access:public
cmpxchg	x86.h	/^cmpxchg(uint oldval, uint newval, volatile uint* lock_addr)$/;"	f	signature:(uint oldval, uint newval, volatile uint* lock_addr)
cna	e100.h	/^    char cna  : 1;$/;"	m	struct:scb_status_word	access:public
cna_mask	e100.h	/^    char cna_mask : 1;$/;"	m	struct:scb_command_word	access:public
command_block	e100.h	/^} command_block;$/;"	t	typeref:struct:command_block_tag
command_block_tag	e100.h	/^typedef struct command_block_tag {$/;"	s
command_block_tag::c	e100.h	/^            char c :        1;     \/\/ Completed$/;"	m	struct:command_block_tag	access:public
command_block_tag::ok	e100.h	/^            char ok :       1;    \/\/ No Error$/;"	m	struct:command_block_tag	access:public
command_block_tag::stat	e100.h	/^            short stat :    13;$/;"	m	struct:command_block_tag	access:public
command_block_tag::x	e100.h	/^            char x :        1;$/;"	m	struct:command_block_tag	access:public
command_block_tag::status_word	e100.h	/^        uint16_t status_word;$/;"	m	union:command_block_tag	access:public
command_block_tag::cmd	e100.h	/^            char cmd :  3;$/;"	m	struct:command_block_tag	access:public
command_block_tag::el	e100.h	/^            char el :   1;    \/\/ Last one$/;"	m	struct:command_block_tag	access:public
command_block_tag::i	e100.h	/^            char i :    1;     \/\/ Interrupt after finish$/;"	m	struct:command_block_tag	access:public
command_block_tag::res	e100.h	/^            short res : 10;$/;"	m	struct:command_block_tag	access:public
command_block_tag::s	e100.h	/^            char s :    1;     \/\/ Suspend after complete$/;"	m	struct:command_block_tag	access:public
command_block_tag::cmd_word	e100.h	/^        uint16_t cmd_word;$/;"	m	union:command_block_tag	access:public
command_block_tag::link	e100.h	/^    struct command_block_tag * link;$/;"	m	struct:command_block_tag	typeref:struct:command_block_tag::command_block_tag	access:public
compressSlot	lwip/netif/ppp/vj.h	/^    u_char compressSlot;	\/* Flag indicating OK to compress slot ID. *\/$/;"	m	struct:vjcompress	access:public
concreate	usertests.c	/^concreate(void)$/;"	f	signature:(void)
conn	lwip/api/sockets.c	/^  struct netconn *conn;$/;"	m	struct:lwip_socket	typeref:struct:lwip_socket::netconn	file:	access:public
conn	lwip/include/lwip/api_msg.h	/^  struct netconn *conn;$/;"	m	struct:api_msg_msg	typeref:struct:api_msg_msg::netconn	access:public
connect	lwip/include/lwip/sockets.h	/^#define connect(/;"	d
connect	user.h	/^int connect(int s, struct sockaddr *name, socklen_t namelen);$/;"	p	signature:(int s, struct sockaddr *name, socklen_t namelen)
connect_time_expired	lwip/netif/ppp/auth.c	/^static void connect_time_expired (void *);$/;"	p	file:	signature:(void *)
connect_time_expired	lwip/netif/ppp/auth.c	/^static void connect_time_expired(void *arg)$/;"	f	file:	signature:(void *arg)
connected	lwip/include/lwip/tcp.h	/^  err_t (* connected)(void *arg, struct tcp_pcb *pcb, err_t err);$/;"	m	struct:tcp_pcb	access:public
conntype	lwip/include/lwip/api_msg.h	/^  enum netconn_type conntype;$/;"	m	struct:api_msg_msg	typeref:enum:api_msg_msg::netconn_type	access:public
cons_putc	console.c	/^cons_putc(int c)$/;"	f	signature:(int c)
console_init	console.c	/^console_init(void)$/;"	f	signature:(void)
console_init	defs.h	/^void            console_init(void);$/;"	p	signature:(void)
console_intr	console.c	/^console_intr(int (*getc)(void))$/;"	f	signature:(int (*getc)(void))
console_intr	defs.h	/^void            console_intr(int(*)(void));$/;"	p	signature:(int(*)(void))
console_lock	console.c	/^static struct spinlock console_lock;$/;"	v	typeref:struct:spinlock	file:
console_read	console.c	/^console_read(struct inode *ip, char *dst, int n)$/;"	f	signature:(struct inode *ip, char *dst, int n)
console_write	console.c	/^console_write(struct inode *ip, char *buf, int n)$/;"	f	signature:(struct inode *ip, char *buf, int n)
context	proc.h	/^  struct context context;     \/\/ Switch here to enter scheduler$/;"	m	struct:cpu	typeref:struct:cpu::context	access:public
context	proc.h	/^  struct context context;   \/\/ Switch here to run process$/;"	m	struct:proc	typeref:struct:proc::context	access:public
context	proc.h	/^struct context {$/;"	s
context::ebp	proc.h	/^  int ebp;$/;"	m	struct:context	access:public
context::ebx	proc.h	/^  int ebx;$/;"	m	struct:context	access:public
context::ecx	proc.h	/^  int ecx;$/;"	m	struct:context	access:public
context::edi	proc.h	/^  int edi;$/;"	m	struct:context	access:public
context::edx	proc.h	/^  int edx;$/;"	m	struct:context	access:public
context::eip	proc.h	/^  int eip;$/;"	m	struct:context	access:public
context::esi	proc.h	/^  int esi;$/;"	m	struct:context	access:public
context::esp	proc.h	/^  int esp;$/;"	m	struct:context	access:public
copy	lwip/include/lwip/api_msg.h	/^      unsigned char copy;$/;"	m	struct:api_msg_msg	access:public
copy_from_pbuf	lwip/core/ipv4/ip_frag.c	/^copy_from_pbuf(struct pbuf *p, u16_t * offset,$/;"	f	file:	signature:(struct pbuf *p, u16_t * offset, u8_t * buffer, u16_t len)
copyproc	defs.h	/^struct proc*    copyproc(struct proc*);$/;"	p	signature:(struct proc*)
copyproc	proc.c	/^copyproc(struct proc *p)$/;"	f	signature:(struct proc *p)
count	e100.h	/^        uint16_t count :    14;$/;"	m	struct:rf_desc	access:public
count	lwip/xv6/arch/sys_arch.c	/^    int count, head, next;$/;"	m	struct:mbox	file:	access:public
cp	proc.h	/^#define cp /;"	d
cprintf	console.c	/^cprintf(char *fmt, ...)$/;"	f	signature:(char *fmt, ...)
cprintf	defs.h	/^void            cprintf(char*, ...);$/;"	p	signature:(char*, ...)
cpu	defs.h	/^int             cpu(void);$/;"	p	signature:(void)
cpu	lapic.c	/^cpu(void)$/;"	f	signature:(void)
cpu	proc.h	/^struct cpu {$/;"	s
cpu	spinlock.h	/^  int  cpu;      \/\/ The number of the cpu holding the lock.$/;"	m	struct:spinlock	access:public
cpu::apicid	proc.h	/^  uchar apicid;               \/\/ Local APIC ID$/;"	m	struct:cpu	access:public
cpu::booted	proc.h	/^  volatile int booted;        \/\/ Has the CPU started?$/;"	m	struct:cpu	access:public
cpu::context	proc.h	/^  struct context context;     \/\/ Switch here to enter scheduler$/;"	m	struct:cpu	typeref:struct:cpu::context	access:public
cpu::gdt	proc.h	/^  struct segdesc gdt[NSEGS];  \/\/ x86 global descriptor table$/;"	m	struct:cpu	typeref:struct:cpu::segdesc	access:public
cpu::locks	proc.h	/^  struct spinlock *locks[MAX_LOCKS];$/;"	m	struct:cpu	typeref:struct:cpu::spinlock	access:public
cpu::mpstack	proc.h	/^  char mpstack[MPSTACK];      \/\/ Per-CPU startup stack$/;"	m	struct:cpu	access:public
cpu::nlock	proc.h	/^  int nlock;                  \/\/ Number of locks currently held$/;"	m	struct:cpu	access:public
cpu::ts	proc.h	/^  struct taskstate ts;        \/\/ Used by x86 to find stack for interrupt$/;"	m	struct:cpu	typeref:struct:cpu::taskstate	access:public
cpuid	x86.h	/^cpuid(uint info, uint *eaxp, uint *ebxp, uint *ecxp, uint *edxp)$/;"	f	signature:(uint info, uint *eaxp, uint *ebxp, uint *ecxp, uint *edxp)
cpus	mp.c	/^struct cpu cpus[NCPU];$/;"	v	typeref:struct:cpu
cr3	mmu.h	/^  void *cr3;         \/\/ Page directory base$/;"	m	struct:taskstate	access:public
crc_err	e100.h	/^    char crc_err :  1;$/;"	m	struct:rf_status	access:public
create	sysfile.c	/^create(char *path, int canexist, short type, short major, short minor)$/;"	f	file:	signature:(char *path, int canexist, short type, short major, short minor)
createdelete	usertests.c	/^createdelete(void)$/;"	f	signature:(void)
createtest	usertests.c	/^createtest(void)$/;"	f	signature:(void)
crt	console.c	/^static ushort *crt = (ushort*)0xb8000;  \/\/ CGA memory$/;"	v	file:
crypt	lwip/netif/ppp/auth.c	/^extern char *crypt (const char *, const char *);$/;"	p	file:	signature:(const char *, const char *)
cs	mmu.h	/^  ushort cs;$/;"	m	struct:taskstate	access:public
cs	x86.h	/^  ushort cs;$/;"	m	struct:trapframe	access:public
cs_filler	lwip/netif/ppp/vj.h	/^    u_char cs_filler;$/;"	m	struct:cstate	access:public
cs_hdr	lwip/netif/ppp/vj.h	/^#define cs_hdr /;"	d
cs_hlen	lwip/netif/ppp/vj.h	/^    u_short cs_hlen;		\/* size of hdr (receive only) *\/$/;"	m	struct:cstate	access:public
cs_id	lwip/netif/ppp/vj.h	/^    u_char cs_id;			\/* connection # associated with this state *\/$/;"	m	struct:cstate	access:public
cs_ip	lwip/netif/ppp/vj.h	/^#define cs_ip /;"	d
cs_next	lwip/netif/ppp/vj.h	/^    struct cstate *cs_next;	\/* next most recently used state (xmit only) *\/$/;"	m	struct:cstate	typeref:struct:cstate::cstate	access:public
cstate	lwip/netif/ppp/vj.h	/^struct cstate {$/;"	s
cstate::csu_hdr	lwip/netif/ppp/vj.h	/^		char csu_hdr[MAX_HDR];$/;"	m	union:cstate	access:public
cstate::csu_ip	lwip/netif/ppp/vj.h	/^		struct ip csu_ip;	\/* ip\/tcp hdr from most recent packet *\/$/;"	m	union:cstate	typeref:struct:cstate::ip	access:public
cstate::cs_filler	lwip/netif/ppp/vj.h	/^    u_char cs_filler;$/;"	m	struct:cstate	access:public
cstate::cs_hlen	lwip/netif/ppp/vj.h	/^    u_short cs_hlen;		\/* size of hdr (receive only) *\/$/;"	m	struct:cstate	access:public
cstate::cs_id	lwip/netif/ppp/vj.h	/^    u_char cs_id;			\/* connection # associated with this state *\/$/;"	m	struct:cstate	access:public
cstate::cs_next	lwip/netif/ppp/vj.h	/^    struct cstate *cs_next;	\/* next most recently used state (xmit only) *\/$/;"	m	struct:cstate	typeref:struct:cstate::cstate	access:public
cstate::vjcs_u	lwip/netif/ppp/vj.h	/^    } vjcs_u;$/;"	m	struct:cstate	typeref:union:cstate	access:public
csu_hdr	lwip/netif/ppp/vj.h	/^		char csu_hdr[MAX_HDR];$/;"	m	union:cstate	access:public
csu_ip	lwip/netif/ppp/vj.h	/^		struct ip csu_ip;	\/* ip\/tcp hdr from most recent packet *\/$/;"	m	union:cstate	typeref:struct:cstate::ip	access:public
ctime	lwip/netif/etharp.c	/^  u8_t ctime;$/;"	m	struct:etharp_entry	file:	access:public
ctlmap	kbd.h	/^static uchar ctlmap[256] =$/;"	v
ctx	lwip/include/lwip/tcpip.h	/^      void *ctx;$/;"	m	struct:tcpip_msg	access:public
cu_command	e100.h	/^    char cu_command : 4;$/;"	m	struct:scb_command_word	access:public
cu_last_pkt	e100.c	/^    command_block *cu_last_pkt;$/;"	m	struct:e100_devinfo	file:	access:public
cu_next_pkt	e100.c	/^    command_block *cu_next_pkt;$/;"	m	struct:e100_devinfo	file:	access:public
cu_state_name	e100.c	/^char *cu_state_name[4] = {$/;"	v
cu_state_name	e100.c	/^char *cu_state_name[];$/;"	v
cubase	e100.c	/^    uint32_t cubase;$/;"	m	struct:e100_devinfo	file:	access:public
cucount	e100.c	/^    uint32_t cucount;$/;"	m	struct:e100_devinfo	file:	access:public
cufirst	e100.c	/^    int cufirst;$/;"	m	struct:e100_devinfo	file:	access:public
cuidle	e100.c	/^    int cuidle;$/;"	m	struct:e100_devinfo	file:	access:public
culock	e100.c	/^    struct spinlock culock;$/;"	m	struct:e100_devinfo	typeref:struct:e100_devinfo::spinlock	file:	access:public
curproc	proc.c	/^struct proc *curproc[NCPU];$/;"	v	typeref:struct:proc
cus	e100.h	/^    char cus  : 2;$/;"	m	struct:scb_status_word	access:public
cusize	e100.c	/^    uint32_t cusize;$/;"	m	struct:e100_devinfo	file:	access:public
cwd	proc.h	/^  struct inode *cwd;        \/\/ Current directory$/;"	m	struct:proc	typeref:struct:proc::inode	access:public
cwnd	lwip/include/lwip/tcp.h	/^  u16_t cwnd;  $/;"	m	struct:tcp_pcb	access:public
cx	e100.h	/^    char cx   : 1;$/;"	m	struct:scb_status_word	access:public
cx_mask	e100.h	/^    char cx_mask : 1;$/;"	m	struct:scb_command_word	access:public
data	buf.h	/^  uchar data[512];$/;"	m	struct:buf	access:public
data	ioapic.c	/^  uint data;$/;"	m	struct:ioapic	file:	access:public
data	pipe.c	/^  char data[PIPESIZE];$/;"	m	struct:pipe	file:	access:public
data	thread.h	/^    void *data;$/;"	m	struct:thread	access:public
dataptr	lwip/include/lwip/api_msg.h	/^      void *dataptr;$/;"	m	struct:api_msg_msg	access:public
dataptr	lwip/include/lwip/tcp.h	/^  void *dataptr;           \/* pointer to the TCP data in the pbuf *\/$/;"	m	struct:tcp_seg	access:public
db	mmu.h	/^  uint db : 1;         \/\/ 0 = 16-bit segment, 1 = 32-bit segment$/;"	m	struct:segdesc	access:public
decode	lwip/api/api_msg.c	/^static api_msg_decode decode[API_MSG_MAX] = {$/;"	v	file:
default_route	lwip/netif/ppp/ipcp.h	/^    u_int default_route : 1;		\/* Assign default route through interface? *\/$/;"	m	struct:ipcp_options	access:public
default_route_set	lwip/netif/ppp/ipcp.c	/^static int default_route_set[NUM_PPP];	\/* Have set up a default route *\/$/;"	v	file:
delay	e100.c	/^delay(int n)$/;"	f	file:	signature:(int n)
dest	lwip/include/ipv6/lwip/ip.h	/^  struct ip_addr src, dest;          \/* source and destination IP addresses *\/$/;"	m	struct:ip_hdr	typeref:struct:ip_hdr::	access:public
dev	buf.h	/^  uint dev;$/;"	m	struct:buf	access:public
dev	fsvar.h	/^  uint dev;           \/\/ Device number$/;"	m	struct:inode	access:public
dev	pci.h	/^    uint32_t dev;$/;"	m	struct:pci_func	access:public
dev	stat.h	/^  int dev;     \/\/ Device number$/;"	m	struct:stat	access:public
dev_class	pci.h	/^    uint32_t dev_class;$/;"	m	struct:pci_func	access:public
dev_count	e100.c	/^static int dev_count = 0;$/;"	v	file:
dev_id	pci.h	/^    uint32_t dev_id;$/;"	m	struct:pci_func	access:public
devsw	dev.h	/^struct devsw {$/;"	s
devsw	file.c	/^struct devsw devsw[NDEV];$/;"	v	typeref:struct:devsw
devsw::read	dev.h	/^  int (*read)(struct inode*, char*, int);$/;"	m	struct:devsw	access:public
devsw::write	dev.h	/^  int (*write)(struct inode*, char*, int);$/;"	m	struct:devsw	access:public
dhcp	lwip/include/lwip/dhcp.h	/^struct dhcp$/;"	s
dhcp	lwip/include/lwip/netif.h	/^  struct dhcp *dhcp;$/;"	m	struct:netif	typeref:struct:netif::dhcp	access:public
dhcp::msg_in	lwip/include/lwip/dhcp.h	/^  struct dhcp_msg *msg_in;$/;"	m	struct:dhcp	typeref:struct:dhcp::dhcp_msg	access:public
dhcp::msg_out	lwip/include/lwip/dhcp.h	/^  struct dhcp_msg *msg_out; \/* outgoing msg *\/$/;"	m	struct:dhcp	typeref:struct:dhcp::dhcp_msg	access:public
dhcp::offered_bc_addr	lwip/include/lwip/dhcp.h	/^  struct ip_addr offered_bc_addr;$/;"	m	struct:dhcp	typeref:struct:dhcp::ip_addr	access:public
dhcp::offered_gw_addr	lwip/include/lwip/dhcp.h	/^  struct ip_addr offered_gw_addr;$/;"	m	struct:dhcp	typeref:struct:dhcp::ip_addr	access:public
dhcp::offered_ip_addr	lwip/include/lwip/dhcp.h	/^  struct ip_addr offered_ip_addr;$/;"	m	struct:dhcp	typeref:struct:dhcp::ip_addr	access:public
dhcp::offered_sn_mask	lwip/include/lwip/dhcp.h	/^  struct ip_addr offered_sn_mask;$/;"	m	struct:dhcp	typeref:struct:dhcp::ip_addr	access:public
dhcp::offered_t0_lease	lwip/include/lwip/dhcp.h	/^  u32_t offered_t0_lease; \/* lease period (in seconds) *\/$/;"	m	struct:dhcp	access:public
dhcp::offered_t1_renew	lwip/include/lwip/dhcp.h	/^  u32_t offered_t1_renew; \/* recommended renew time (usually 50% of lease period) *\/$/;"	m	struct:dhcp	access:public
dhcp::offered_t2_rebind	lwip/include/lwip/dhcp.h	/^  u32_t offered_t2_rebind; \/* recommended rebind time (usually 66% of lease period)  *\/$/;"	m	struct:dhcp	access:public
dhcp::options_in	lwip/include/lwip/dhcp.h	/^  struct dhcp_msg *options_in; $/;"	m	struct:dhcp	typeref:struct:dhcp::dhcp_msg	access:public
dhcp::options_in_len	lwip/include/lwip/dhcp.h	/^  u16_t options_in_len;$/;"	m	struct:dhcp	access:public
dhcp::options_out_len	lwip/include/lwip/dhcp.h	/^  u16_t options_out_len; \/* outgoing msg options length *\/$/;"	m	struct:dhcp	access:public
dhcp::p	lwip/include/lwip/dhcp.h	/^  struct pbuf *p;$/;"	m	struct:dhcp	typeref:struct:dhcp::pbuf	access:public
dhcp::p_out	lwip/include/lwip/dhcp.h	/^  struct pbuf *p_out; \/* pbuf of outcoming msg *\/$/;"	m	struct:dhcp	typeref:struct:dhcp::pbuf	access:public
dhcp::pcb	lwip/include/lwip/dhcp.h	/^  struct udp_pcb *pcb;$/;"	m	struct:dhcp	typeref:struct:dhcp::udp_pcb	access:public
dhcp::request_timeout	lwip/include/lwip/dhcp.h	/^  u16_t request_timeout; \/* #ticks with period DHCP_FINE_TIMER_SECS for request timeout *\/$/;"	m	struct:dhcp	access:public
dhcp::server_ip_addr	lwip/include/lwip/dhcp.h	/^  struct ip_addr server_ip_addr; \/* dhcp server address that offered this lease *\/$/;"	m	struct:dhcp	typeref:struct:dhcp::ip_addr	access:public
dhcp::state	lwip/include/lwip/dhcp.h	/^  u8_t state;$/;"	m	struct:dhcp	access:public
dhcp::t1_timeout	lwip/include/lwip/dhcp.h	/^  u16_t t1_timeout;  \/* #ticks with period DHCP_COARSE_TIMER_SECS for renewal time *\/$/;"	m	struct:dhcp	access:public
dhcp::t2_timeout	lwip/include/lwip/dhcp.h	/^  u16_t t2_timeout;  \/* #ticks with period DHCP_COARSE_TIMER_SECS for rebind time *\/$/;"	m	struct:dhcp	access:public
dhcp::tries	lwip/include/lwip/dhcp.h	/^  u8_t tries;$/;"	m	struct:dhcp	access:public
dhcp::xid	lwip/include/lwip/dhcp.h	/^  u32_t xid;$/;"	m	struct:dhcp	access:public
dhcp_arp_reply	lwip/core/dhcp.c	/^void dhcp_arp_reply(struct netif *netif, struct ip_addr *addr)$/;"	f	signature:(struct netif *netif, struct ip_addr *addr)
dhcp_arp_reply	lwip/include/lwip/dhcp.h	/^void dhcp_arp_reply(struct netif *netif, struct ip_addr *addr);$/;"	p	signature:(struct netif *netif, struct ip_addr *addr)
dhcp_bind	lwip/core/dhcp.c	/^static void dhcp_bind(struct netif *netif)$/;"	f	file:	signature:(struct netif *netif)
dhcp_bind	lwip/core/dhcp.c	/^static void dhcp_bind(struct netif *netif);$/;"	p	file:	signature:(struct netif *netif)
dhcp_check	lwip/core/dhcp.c	/^static void dhcp_check(struct netif *netif)$/;"	f	file:	signature:(struct netif *netif)
dhcp_check	lwip/core/dhcp.c	/^static void dhcp_check(struct netif *netif);$/;"	p	file:	signature:(struct netif *netif)
dhcp_coarse_tmr	lwip/core/dhcp.c	/^void dhcp_coarse_tmr()$/;"	f
dhcp_coarse_tmr	lwip/include/lwip/dhcp.h	/^void dhcp_coarse_tmr(void);$/;"	p	signature:(void)
dhcp_create_request	lwip/core/dhcp.c	/^static err_t dhcp_create_request(struct netif *netif)$/;"	f	file:	signature:(struct netif *netif)
dhcp_create_request	lwip/core/dhcp.c	/^static err_t dhcp_create_request(struct netif *netif);$/;"	p	file:	signature:(struct netif *netif)
dhcp_decline	lwip/core/dhcp.c	/^static err_t dhcp_decline(struct netif *netif)$/;"	f	file:	signature:(struct netif *netif)
dhcp_decline	lwip/core/dhcp.c	/^static err_t dhcp_decline(struct netif *netif);$/;"	p	file:	signature:(struct netif *netif)
dhcp_delete_request	lwip/core/dhcp.c	/^static void dhcp_delete_request(struct netif *netif)$/;"	f	file:	signature:(struct netif *netif)
dhcp_delete_request	lwip/core/dhcp.c	/^static void dhcp_delete_request(struct netif *netif);$/;"	p	file:	signature:(struct netif *netif)
dhcp_discover	lwip/core/dhcp.c	/^static err_t dhcp_discover(struct netif *netif)$/;"	f	file:	signature:(struct netif *netif)
dhcp_discover	lwip/core/dhcp.c	/^static err_t dhcp_discover(struct netif *netif);$/;"	p	file:	signature:(struct netif *netif)
dhcp_fine_tmr	lwip/core/dhcp.c	/^void dhcp_fine_tmr()$/;"	f
dhcp_fine_tmr	lwip/include/lwip/dhcp.h	/^void dhcp_fine_tmr(void);$/;"	p	signature:(void)
dhcp_free_reply	lwip/core/dhcp.c	/^static void dhcp_free_reply(struct dhcp *dhcp)$/;"	f	file:	signature:(struct dhcp *dhcp)
dhcp_free_reply	lwip/core/dhcp.c	/^static void dhcp_free_reply(struct dhcp *dhcp);$/;"	p	file:	signature:(struct dhcp *dhcp)
dhcp_get_option_byte	lwip/core/dhcp.c	/^static u8_t dhcp_get_option_byte(u8_t *ptr)$/;"	f	file:	signature:(u8_t *ptr)
dhcp_get_option_byte	lwip/core/dhcp.c	/^static u8_t dhcp_get_option_byte(u8_t *ptr);$/;"	p	file:	signature:(u8_t *ptr)
dhcp_get_option_long	lwip/core/dhcp.c	/^static u32_t dhcp_get_option_long(u8_t *ptr)$/;"	f	file:	signature:(u8_t *ptr)
dhcp_get_option_long	lwip/core/dhcp.c	/^static u32_t dhcp_get_option_long(u8_t *ptr);$/;"	p	file:	signature:(u8_t *ptr)
dhcp_get_option_ptr	lwip/core/dhcp.c	/^static u8_t *dhcp_get_option_ptr(struct dhcp *dhcp, u8_t option_type)$/;"	f	file:	signature:(struct dhcp *dhcp, u8_t option_type)
dhcp_get_option_ptr	lwip/core/dhcp.c	/^static u8_t *dhcp_get_option_ptr(struct dhcp *dhcp, u8_t option_type);$/;"	p	file:	signature:(struct dhcp *dhcp, u8_t option_type)
dhcp_get_option_short	lwip/core/dhcp.c	/^static u16_t dhcp_get_option_short(u8_t *ptr)$/;"	f	file:	signature:(u8_t *ptr)
dhcp_get_option_short	lwip/core/dhcp.c	/^static u16_t dhcp_get_option_short(u8_t *ptr);$/;"	p	file:	signature:(u8_t *ptr)
dhcp_handle_ack	lwip/core/dhcp.c	/^static void dhcp_handle_ack(struct netif *netif)$/;"	f	file:	signature:(struct netif *netif)
dhcp_handle_ack	lwip/core/dhcp.c	/^static void dhcp_handle_ack(struct netif *netif);$/;"	p	file:	signature:(struct netif *netif)
dhcp_handle_nak	lwip/core/dhcp.c	/^static void dhcp_handle_nak(struct netif *netif) {$/;"	f	file:	signature:(struct netif *netif)
dhcp_handle_nak	lwip/core/dhcp.c	/^static void dhcp_handle_nak(struct netif *netif);$/;"	p	file:	signature:(struct netif *netif)
dhcp_handle_offer	lwip/core/dhcp.c	/^static void dhcp_handle_offer(struct netif *netif)$/;"	f	file:	signature:(struct netif *netif)
dhcp_handle_offer	lwip/core/dhcp.c	/^static void dhcp_handle_offer(struct netif *netif);$/;"	p	file:	signature:(struct netif *netif)
dhcp_inform	lwip/core/dhcp.c	/^void dhcp_inform(struct netif *netif)$/;"	f	signature:(struct netif *netif)
dhcp_inform	lwip/include/lwip/dhcp.h	/^void dhcp_inform(struct netif *netif);$/;"	p	signature:(struct netif *netif)
dhcp_msg	lwip/include/lwip/dhcp.h	/^struct dhcp_msg$/;"	s
dhcp_msg::PACK_STRUCT_FIELD	lwip/include/lwip/dhcp.h	/^  PACK_STRUCT_FIELD(u16_t flags);$/;"	p	struct:dhcp_msg	access:public	signature:(u16_t flags)
dhcp_msg::PACK_STRUCT_FIELD	lwip/include/lwip/dhcp.h	/^  PACK_STRUCT_FIELD(u16_t secs);$/;"	p	struct:dhcp_msg	access:public	signature:(u16_t secs)
dhcp_msg::PACK_STRUCT_FIELD	lwip/include/lwip/dhcp.h	/^  PACK_STRUCT_FIELD(u32_t ciaddr);$/;"	p	struct:dhcp_msg	access:public	signature:(u32_t ciaddr)
dhcp_msg::PACK_STRUCT_FIELD	lwip/include/lwip/dhcp.h	/^  PACK_STRUCT_FIELD(u32_t cookie);$/;"	p	struct:dhcp_msg	access:public	signature:(u32_t cookie)
dhcp_msg::PACK_STRUCT_FIELD	lwip/include/lwip/dhcp.h	/^  PACK_STRUCT_FIELD(u32_t giaddr);$/;"	p	struct:dhcp_msg	access:public	signature:(u32_t giaddr)
dhcp_msg::PACK_STRUCT_FIELD	lwip/include/lwip/dhcp.h	/^  PACK_STRUCT_FIELD(u32_t siaddr);$/;"	p	struct:dhcp_msg	access:public	signature:(u32_t siaddr)
dhcp_msg::PACK_STRUCT_FIELD	lwip/include/lwip/dhcp.h	/^  PACK_STRUCT_FIELD(u32_t xid);$/;"	p	struct:dhcp_msg	access:public	signature:(u32_t xid)
dhcp_msg::PACK_STRUCT_FIELD	lwip/include/lwip/dhcp.h	/^  PACK_STRUCT_FIELD(u32_t yiaddr);$/;"	p	struct:dhcp_msg	access:public	signature:(u32_t yiaddr)
dhcp_msg::PACK_STRUCT_FIELD	lwip/include/lwip/dhcp.h	/^  PACK_STRUCT_FIELD(u8_t chaddr[DHCP_CHADDR_LEN]);$/;"	p	struct:dhcp_msg	access:public	signature:(u8_t chaddr[DHCP_CHADDR_LEN])
dhcp_msg::PACK_STRUCT_FIELD	lwip/include/lwip/dhcp.h	/^  PACK_STRUCT_FIELD(u8_t file[DHCP_FILE_LEN]);$/;"	p	struct:dhcp_msg	access:public	signature:(u8_t file[DHCP_FILE_LEN])
dhcp_msg::PACK_STRUCT_FIELD	lwip/include/lwip/dhcp.h	/^  PACK_STRUCT_FIELD(u8_t hlen);$/;"	p	struct:dhcp_msg	access:public	signature:(u8_t hlen)
dhcp_msg::PACK_STRUCT_FIELD	lwip/include/lwip/dhcp.h	/^  PACK_STRUCT_FIELD(u8_t hops);$/;"	p	struct:dhcp_msg	access:public	signature:(u8_t hops)
dhcp_msg::PACK_STRUCT_FIELD	lwip/include/lwip/dhcp.h	/^  PACK_STRUCT_FIELD(u8_t htype);$/;"	p	struct:dhcp_msg	access:public	signature:(u8_t htype)
dhcp_msg::PACK_STRUCT_FIELD	lwip/include/lwip/dhcp.h	/^  PACK_STRUCT_FIELD(u8_t op);$/;"	p	struct:dhcp_msg	access:public	signature:(u8_t op)
dhcp_msg::PACK_STRUCT_FIELD	lwip/include/lwip/dhcp.h	/^  PACK_STRUCT_FIELD(u8_t options[DHCP_OPTIONS_LEN]);$/;"	p	struct:dhcp_msg	access:public	signature:(u8_t options[DHCP_OPTIONS_LEN])
dhcp_msg::PACK_STRUCT_FIELD	lwip/include/lwip/dhcp.h	/^  PACK_STRUCT_FIELD(u8_t sname[DHCP_SNAME_LEN]);$/;"	p	struct:dhcp_msg	access:public	signature:(u8_t sname[DHCP_SNAME_LEN])
dhcp_option	lwip/core/dhcp.c	/^static void dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)$/;"	f	file:	signature:(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
dhcp_option	lwip/core/dhcp.c	/^static void dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len);$/;"	p	file:	signature:(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
dhcp_option_byte	lwip/core/dhcp.c	/^static void dhcp_option_byte(struct dhcp *dhcp, u8_t value)$/;"	f	file:	signature:(struct dhcp *dhcp, u8_t value)
dhcp_option_byte	lwip/core/dhcp.c	/^static void dhcp_option_byte(struct dhcp *dhcp, u8_t value);$/;"	p	file:	signature:(struct dhcp *dhcp, u8_t value)
dhcp_option_long	lwip/core/dhcp.c	/^static void dhcp_option_long(struct dhcp *dhcp, u32_t value)$/;"	f	file:	signature:(struct dhcp *dhcp, u32_t value)
dhcp_option_long	lwip/core/dhcp.c	/^static void dhcp_option_long(struct dhcp *dhcp, u32_t value);$/;"	p	file:	signature:(struct dhcp *dhcp, u32_t value)
dhcp_option_short	lwip/core/dhcp.c	/^static void dhcp_option_short(struct dhcp *dhcp, u16_t value)$/;"	f	file:	signature:(struct dhcp *dhcp, u16_t value)
dhcp_option_short	lwip/core/dhcp.c	/^static void dhcp_option_short(struct dhcp *dhcp, u16_t value);$/;"	p	file:	signature:(struct dhcp *dhcp, u16_t value)
dhcp_option_trailer	lwip/core/dhcp.c	/^static void dhcp_option_trailer(struct dhcp *dhcp)$/;"	f	file:	signature:(struct dhcp *dhcp)
dhcp_option_trailer	lwip/core/dhcp.c	/^static void dhcp_option_trailer(struct dhcp *dhcp);$/;"	p	file:	signature:(struct dhcp *dhcp)
dhcp_rebind	lwip/core/dhcp.c	/^static err_t dhcp_rebind(struct netif *netif)$/;"	f	file:	signature:(struct netif *netif)
dhcp_rebind	lwip/core/dhcp.c	/^static err_t dhcp_rebind(struct netif *netif);$/;"	p	file:	signature:(struct netif *netif)
dhcp_recv	lwip/core/dhcp.c	/^static void dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, struct ip_addr *addr, u16_t port)$/;"	f	file:	signature:(void *arg, struct udp_pcb *pcb, struct pbuf *p, struct ip_addr *addr, u16_t port)
dhcp_recv	lwip/core/dhcp.c	/^static void dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, struct ip_addr *addr, u16_t port);$/;"	p	file:	signature:(void *arg, struct udp_pcb *pcb, struct pbuf *p, struct ip_addr *addr, u16_t port)
dhcp_release	lwip/core/dhcp.c	/^static err_t dhcp_release(struct netif *netif)$/;"	f	file:	signature:(struct netif *netif)
dhcp_release	lwip/core/dhcp.c	/^static err_t dhcp_release(struct netif *netif);$/;"	p	file:	signature:(struct netif *netif)
dhcp_renew	lwip/core/dhcp.c	/^err_t dhcp_renew(struct netif *netif)$/;"	f	signature:(struct netif *netif)
dhcp_renew	lwip/include/lwip/dhcp.h	/^err_t dhcp_renew(struct netif *netif);$/;"	p	signature:(struct netif *netif)
dhcp_select	lwip/core/dhcp.c	/^static err_t dhcp_select(struct netif *netif)$/;"	f	file:	signature:(struct netif *netif)
dhcp_select	lwip/core/dhcp.c	/^static err_t dhcp_select(struct netif *netif);$/;"	p	file:	signature:(struct netif *netif)
dhcp_set_state	lwip/core/dhcp.c	/^static void dhcp_set_state(struct dhcp *dhcp, unsigned char new_state)$/;"	f	file:	signature:(struct dhcp *dhcp, unsigned char new_state)
dhcp_set_state	lwip/core/dhcp.c	/^static void dhcp_set_state(struct dhcp *dhcp, unsigned char new_state);$/;"	p	file:	signature:(struct dhcp *dhcp, unsigned char new_state)
dhcp_start	lwip/core/dhcp.c	/^err_t dhcp_start(struct netif *netif)$/;"	f	signature:(struct netif *netif)
dhcp_start	lwip/include/lwip/dhcp.h	/^err_t dhcp_start(struct netif *netif);$/;"	p	signature:(struct netif *netif)
dhcp_stop	lwip/core/dhcp.c	/^void dhcp_stop(struct netif *netif)$/;"	f	signature:(struct netif *netif)
dhcp_stop	lwip/include/lwip/dhcp.h	/^void dhcp_stop(struct netif *netif);$/;"	p	signature:(struct netif *netif)
dhcp_t1_timeout	lwip/core/dhcp.c	/^static void dhcp_t1_timeout(struct netif *netif)$/;"	f	file:	signature:(struct netif *netif)
dhcp_t1_timeout	lwip/core/dhcp.c	/^static void dhcp_t1_timeout(struct netif *netif);$/;"	p	file:	signature:(struct netif *netif)
dhcp_t2_timeout	lwip/core/dhcp.c	/^static void dhcp_t2_timeout(struct netif *netif)$/;"	f	file:	signature:(struct netif *netif)
dhcp_t2_timeout	lwip/core/dhcp.c	/^static void dhcp_t2_timeout(struct netif *netif);$/;"	p	file:	signature:(struct netif *netif)
dhcp_timeout	lwip/core/dhcp.c	/^static void dhcp_timeout(struct netif *netif)$/;"	f	file:	signature:(struct netif *netif)
dhcp_timeout	lwip/core/dhcp.c	/^static void dhcp_timeout(struct netif *netif);$/;"	p	file:	signature:(struct netif *netif)
dhcp_unfold_reply	lwip/core/dhcp.c	/^static err_t dhcp_unfold_reply(struct dhcp *dhcp)$/;"	f	file:	signature:(struct dhcp *dhcp)
dhcp_unfold_reply	lwip/core/dhcp.c	/^static err_t dhcp_unfold_reply(struct dhcp *dhcp);$/;"	p	file:	signature:(struct dhcp *dhcp)
did_authup	lwip/netif/ppp/auth.c	/^static int did_authup;$/;"	v	file:
digest	lwip/netif/ppp/md5.h	/^  unsigned char digest[16];     \/* actual digest after MD5Final call *\/$/;"	m	struct:__anon29	access:public
dinode	fs.h	/^struct dinode {$/;"	s
dinode::addrs	fs.h	/^  uint addrs[NADDRS];   \/\/ Data block addresses$/;"	m	struct:dinode	access:public
dinode::major	fs.h	/^  short major;          \/\/ Major device number (T_DEV only)$/;"	m	struct:dinode	access:public
dinode::minor	fs.h	/^  short minor;          \/\/ Minor device number (T_DEV only)$/;"	m	struct:dinode	access:public
dinode::nlink	fs.h	/^  short nlink;          \/\/ Number of links to inode in file system$/;"	m	struct:dinode	access:public
dinode::size	fs.h	/^  uint size;            \/\/ Size of file (bytes)$/;"	m	struct:dinode	access:public
dinode::type	fs.h	/^  short type;           \/\/ File type$/;"	m	struct:dinode	access:public
dirent	fs.h	/^struct dirent {$/;"	s
dirent::inum	fs.h	/^  ushort inum;$/;"	m	struct:dirent	access:public
dirent::name	fs.h	/^  char name[DIRSIZ];$/;"	m	struct:dirent	access:public
dirfile	usertests.c	/^dirfile(void)$/;"	f	signature:(void)
dirlink	defs.h	/^int             dirlink(struct inode*, char*, uint);$/;"	p	signature:(struct inode*, char*, uint)
dirlink	fs.c	/^dirlink(struct inode *dp, char *name, uint ino)$/;"	f	signature:(struct inode *dp, char *name, uint ino)
dirlookup	defs.h	/^struct inode*   dirlookup(struct inode*, char*, uint*);$/;"	p	signature:(struct inode*, char*, uint*)
dirlookup	fs.c	/^dirlookup(struct inode *dp, char *name, uint *poff)$/;"	f	signature:(struct inode *dp, char *name, uint *poff)
dirtest	usertests.c	/^void dirtest(void)$/;"	f	signature:(void)
disable_defaultip	lwip/netif/ppp/ppp.h	/^	u_int  disable_defaultip : 1;   \/* Don't use hostname for default IP addrs *\/$/;"	m	struct:ppp_settings	access:public
disk_1_present	ide.c	/^static int disk_1_present;$/;"	v	file:
dma_err	e100.h	/^    char dma_err :  1;$/;"	m	struct:rf_status	access:public
dns1	lwip/netif/ppp/ppp.h	/^    struct ip_addr our_ipaddr, his_ipaddr, netmask, dns1, dns2;$/;"	m	struct:ppp_addrs	typeref:struct:ppp_addrs::	access:public
dns2	lwip/netif/ppp/ppp.h	/^    struct ip_addr our_ipaddr, his_ipaddr, netmask, dns1, dns2;$/;"	m	struct:ppp_addrs	typeref:struct:ppp_addrs::	access:public
dnsaddr	lwip/netif/ppp/ipcp.h	/^    u32_t dnsaddr[2];		\/* Primary and secondary MS DNS entries *\/$/;"	m	struct:ipcp_options	access:public
do_accept	lwip/api/api_msg.c	/^do_accept(struct api_msg_msg *msg)$/;"	f	file:	signature:(struct api_msg_msg *msg)
do_bind	lwip/api/api_msg.c	/^do_bind(struct api_msg_msg *msg)$/;"	f	file:	signature:(struct api_msg_msg *msg)
do_close	lwip/api/api_msg.c	/^do_close(struct api_msg_msg *msg)$/;"	f	file:	signature:(struct api_msg_msg *msg)
do_connect	lwip/api/api_msg.c	/^do_connect(struct api_msg_msg *msg)$/;"	f	file:	signature:(struct api_msg_msg *msg)
do_connected	lwip/api/api_msg.c	/^do_connected(void *arg, struct tcp_pcb *pcb, err_t err)$/;"	f	file:	signature:(void *arg, struct tcp_pcb *pcb, err_t err)
do_delconn	lwip/api/api_msg.c	/^do_delconn(struct api_msg_msg *msg)$/;"	f	file:	signature:(struct api_msg_msg *msg)
do_disconnect	lwip/api/api_msg.c	/^do_disconnect(struct api_msg_msg *msg)$/;"	f	file:	signature:(struct api_msg_msg *msg)
do_listen	lwip/api/api_msg.c	/^do_listen(struct api_msg_msg *msg)$/;"	f	file:	signature:(struct api_msg_msg *msg)
do_newconn	lwip/api/api_msg.c	/^do_newconn(struct api_msg_msg *msg)$/;"	f	file:	signature:(struct api_msg_msg *msg)
do_recv	lwip/api/api_msg.c	/^do_recv(struct api_msg_msg *msg)$/;"	f	file:	signature:(struct api_msg_msg *msg)
do_send	lwip/api/api_msg.c	/^do_send(struct api_msg_msg *msg)$/;"	f	file:	signature:(struct api_msg_msg *msg)
do_write	lwip/api/api_msg.c	/^do_write(struct api_msg_msg *msg)$/;"	f	file:	signature:(struct api_msg_msg *msg)
down	lwip/netif/ppp/fsm.h	/^    void (*down)			\/* Called when fsm leaves OPENED state *\/$/;"	m	struct:fsm_callbacks	access:public
dpl	mmu.h	/^  uint dpl : 2;         \/\/ descriptor(meaning new) privilege level$/;"	m	struct:gatedesc	access:public
dpl	mmu.h	/^  uint dpl : 2;        \/\/ Descriptor Privilege Level$/;"	m	struct:segdesc	access:public
drop	lwip/include/lwip/stats.h	/^  u16_t drop;    \/* Dropped packets. *\/$/;"	m	struct:stats_proto	access:public
ds	mmu.h	/^  ushort ds;$/;"	m	struct:taskstate	access:public
ds	x86.h	/^  ushort ds;$/;"	m	struct:trapframe	access:public
dummy	lwip/include/lwip/sys.h	/^struct sys_timeout {u8_t dummy;};$/;"	m	struct:sys_timeout	access:public
dummy_ide_intr	ide.c	/^dummy_ide_intr(struct trapframe *tf)$/;"	f	signature:(struct trapframe *tf)
dup	user.h	/^int dup(int);$/;"	p	signature:(int)
dupacks	lwip/include/lwip/tcp.h	/^  u8_t dupacks;$/;"	m	struct:tcp_pcb	access:public
e	console.c	/^  int e;  \/\/ Edit index$/;"	m	struct:__anon1	file:	access:public
e100_cu_command	e100.c	/^e100_cu_command(e100_dev *dev, int command, void *cmd_addr)$/;"	f	signature:(e100_dev *dev, int command, void *cmd_addr)
e100_cu_command	e100.c	/^void e100_cu_command(e100_dev *dev, int command, void *cmd_addr);$/;"	p	file:	signature:(e100_dev *dev, int command, void *cmd_addr)
e100_dev	e100.c	/^} e100_dev;$/;"	t	typeref:struct:e100_devinfo	file:
e100_devinfo	e100.c	/^typedef struct e100_devinfo {$/;"	s	file:
e100_devinfo::cu_last_pkt	e100.c	/^    command_block *cu_last_pkt;$/;"	m	struct:e100_devinfo	file:	access:public
e100_devinfo::cu_next_pkt	e100.c	/^    command_block *cu_next_pkt;$/;"	m	struct:e100_devinfo	file:	access:public
e100_devinfo::cubase	e100.c	/^    uint32_t cubase;$/;"	m	struct:e100_devinfo	file:	access:public
e100_devinfo::cucount	e100.c	/^    uint32_t cucount;$/;"	m	struct:e100_devinfo	file:	access:public
e100_devinfo::cufirst	e100.c	/^    int cufirst;$/;"	m	struct:e100_devinfo	file:	access:public
e100_devinfo::cuidle	e100.c	/^    int cuidle;$/;"	m	struct:e100_devinfo	file:	access:public
e100_devinfo::culock	e100.c	/^    struct spinlock culock;$/;"	m	struct:e100_devinfo	typeref:struct:e100_devinfo::spinlock	file:	access:public
e100_devinfo::cusize	e100.c	/^    uint32_t cusize;$/;"	m	struct:e100_devinfo	file:	access:public
e100_devinfo::eeprom_size	e100.c	/^    int eeprom_size;$/;"	m	struct:e100_devinfo	file:	access:public
e100_devinfo::iobase	e100.c	/^    uint32_t iobase;$/;"	m	struct:e100_devinfo	file:	access:public
e100_devinfo::irq	e100.c	/^    int irq;$/;"	m	struct:e100_devinfo	file:	access:public
e100_devinfo::macaddr	e100.c	/^    char macaddr[6];$/;"	m	struct:e100_devinfo	file:	access:public
e100_devinfo::netif	e100.c	/^    struct netif netif;$/;"	m	struct:e100_devinfo	typeref:struct:e100_devinfo::netif	file:	access:public
e100_devinfo::regbase	e100.c	/^    uint32_t regbase[6], regsize[6];$/;"	m	struct:e100_devinfo	file:	access:public
e100_devinfo::regsize	e100.c	/^    uint32_t regbase[6], regsize[6];$/;"	m	struct:e100_devinfo	file:	access:public
e100_devinfo::ru_first	e100.c	/^    rf_desc *ru_first;$/;"	m	struct:e100_devinfo	file:	access:public
e100_devinfo::ru_full	e100.c	/^    int ru_full;$/;"	m	struct:e100_devinfo	file:	access:public
e100_devinfo::ru_last	e100.c	/^    rf_desc *ru_last;$/;"	m	struct:e100_devinfo	file:	access:public
e100_devinfo::ru_prev	e100.c	/^    rf_desc *ru_prev;$/;"	m	struct:e100_devinfo	file:	access:public
e100_devinfo::rubase	e100.c	/^    uint32_t rubase;$/;"	m	struct:e100_devinfo	file:	access:public
e100_devinfo::rucount	e100.c	/^    uint32_t rucount;$/;"	m	struct:e100_devinfo	file:	access:public
e100_devinfo::rulock	e100.c	/^    struct spinlock rulock;$/;"	m	struct:e100_devinfo	typeref:struct:e100_devinfo::spinlock	file:	access:public
e100_devinfo::rusize	e100.c	/^    uint32_t rusize;$/;"	m	struct:e100_devinfo	file:	access:public
e100_devinfo::rxlock	e100.c	/^    struct spinlock rxlock;$/;"	m	struct:e100_devinfo	typeref:struct:e100_devinfo::spinlock	file:	access:public
e100_devs	e100.c	/^static e100_dev e100_devs[E100_MAX_DEVS];$/;"	v	file:
e100_eeprom_getword	e100.c	/^e100_eeprom_getword(e100_dev *dev, int offset)$/;"	f	signature:(e100_dev *dev, int offset)
e100_eeprom_in	e100.c	/^e100_eeprom_in(e100_dev *dev)$/;"	f	signature:(e100_dev *dev)
e100_eeprom_out	e100.c	/^e100_eeprom_out(e100_dev *dev, uint16_t val)$/;"	f	signature:(e100_dev *dev, uint16_t val)
e100_eeprom_shiftin	e100.c	/^e100_eeprom_shiftin(e100_dev *dev, int data, int len)$/;"	f	signature:(e100_dev *dev, int data, int len)
e100_eeprom_shiftout	e100.c	/^e100_eeprom_shiftout(e100_dev *dev)$/;"	f	signature:(e100_dev *dev)
e100_get_state	e100.c	/^e100_get_state(e100_dev *dev)$/;"	f	signature:(e100_dev *dev)
e100_intr	e100.c	/^e100_intr(struct trapframe *tf)$/;"	f	signature:(struct trapframe *tf)
e100_intr	e100.c	/^void e100_intr(struct trapframe *tf);$/;"	p	file:	signature:(struct trapframe *tf)
e100_print_state	e100.c	/^e100_print_state(e100_dev *dev)$/;"	f	signature:(e100_dev *dev)
e100_print_state	e100.c	/^scb_status_word e100_print_state(e100_dev *dev);$/;"	p	file:	signature:(e100_dev *dev)
e100_put_state	e100.c	/^e100_put_state(e100_dev *dev, scb_status_word stat)$/;"	f	signature:(e100_dev *dev, scb_status_word stat)
e100_put_state	e100.c	/^void e100_put_state(e100_dev *dev, scb_status_word stat);$/;"	p	file:	signature:(e100_dev *dev, scb_status_word stat)
e100_read_eeprom	e100.c	/^e100_read_eeprom(e100_dev *dev, uint16_t *data, int offset, int len)$/;"	f	signature:(e100_dev *dev, uint16_t *data, int offset, int len)
e100_read_eeprom	e100.c	/^void e100_read_eeprom(e100_dev *dev, uint16_t *data, int offset, int len);$/;"	p	file:	signature:(e100_dev *dev, uint16_t *data, int offset, int len)
e100_read_scb_command	e100.c	/^e100_read_scb_command(e100_dev *dev)$/;"	f	signature:(e100_dev *dev)
e100_read_scb_command	e100.c	/^uint8_t e100_read_scb_command(e100_dev *dev);$/;"	p	file:	signature:(e100_dev *dev)
e100_receive	e100.c	/^e100_receive(void *buffer, uint32_t len)$/;"	f	signature:(void *buffer, uint32_t len)
e100_receive	e100.h	/^int e100_receive(void *buffer, uint32_t len);$/;"	p	signature:(void *buffer, uint32_t len)
e100_receive_dev	e100.c	/^e100_receive_dev(e100_dev *dev, void *buffer, int len)$/;"	f	signature:(e100_dev *dev, void *buffer, int len)
e100_receive_dev	e100.c	/^int e100_receive_dev(e100_dev *dev, void *buffer, int len);$/;"	p	file:	signature:(e100_dev *dev, void *buffer, int len)
e100_reset	e100.c	/^e100_reset(e100_dev *dev)$/;"	f	signature:(e100_dev *dev)
e100_reset	e100.c	/^int e100_reset(e100_dev *dev);$/;"	p	file:	signature:(e100_dev *dev)
e100_ru_command	e100.c	/^e100_ru_command(e100_dev *dev, int command, void *cmd_addr)$/;"	f	signature:(e100_dev *dev, int command, void *cmd_addr)
e100_ru_command	e100.c	/^void e100_ru_command(e100_dev *dev, int command, void *cmd_addr);$/;"	p	file:	signature:(e100_dev *dev, int command, void *cmd_addr)
e100_ru_start	e100.c	/^e100_ru_start(e100_dev *dev)$/;"	f	signature:(e100_dev *dev)
e100_ru_start	e100.c	/^void e100_ru_start(e100_dev *dev);$/;"	p	file:	signature:(e100_dev *dev)
e100_rx_thread	e100.c	/^e100_rx_thread(void *arg)$/;"	f	signature:(void *arg)
e100_rx_thread	e100.c	/^void e100_rx_thread(void *arg);$/;"	p	file:	signature:(void *arg)
e100_send	e100.c	/^e100_send(void *buffer, uint32_t len)$/;"	f	signature:(void *buffer, uint32_t len)
e100_send	e100.h	/^int e100_send(void *buffer, uint32_t len);$/;"	p	signature:(void *buffer, uint32_t len)
e100_send_dev	e100.c	/^e100_send_dev(e100_dev *dev, void *buffer, uint32_t len)$/;"	f	signature:(e100_dev *dev, void *buffer, uint32_t len)
e100_set_gp	e100.c	/^e100_set_gp(e100_dev *dev, void *addr)$/;"	f	signature:(e100_dev *dev, void *addr)
eargv	sh.c	/^  char *eargv[MAXARGS];$/;"	m	struct:execcmd	file:	access:public
eax	mmu.h	/^  uint eax;          \/\/ More saved state (registers)$/;"	m	struct:taskstate	access:public
eax	x86.h	/^  uint eax;$/;"	m	struct:trapframe	access:public
ebp	mmu.h	/^  uint *ebp;$/;"	m	struct:taskstate	access:public
ebp	proc.h	/^  int ebp;$/;"	m	struct:context	access:public
ebp	x86.h	/^  uint ebp;$/;"	m	struct:trapframe	access:public
ebx	mmu.h	/^  uint ebx;$/;"	m	struct:taskstate	access:public
ebx	proc.h	/^  int ebx;$/;"	m	struct:context	access:public
ebx	x86.h	/^  uint ebx;$/;"	m	struct:trapframe	access:public
echo_args	usertests.c	/^char *echo_args[] = { "echo", "ALL", "TESTS", "PASSED", 0 };$/;"	v
ecx	mmu.h	/^  uint ecx;$/;"	m	struct:taskstate	access:public
ecx	proc.h	/^  int ecx;$/;"	m	struct:context	access:public
ecx	x86.h	/^  uint ecx;$/;"	m	struct:trapframe	access:public
edi	mmu.h	/^  uint edi;$/;"	m	struct:taskstate	access:public
edi	proc.h	/^  int edi;$/;"	m	struct:context	access:public
edi	x86.h	/^  uint edi;$/;"	m	struct:trapframe	access:public
edx	mmu.h	/^  uint edx;$/;"	m	struct:taskstate	access:public
edx	proc.h	/^  int edx;$/;"	m	struct:context	access:public
edx	x86.h	/^  uint edx;$/;"	m	struct:trapframe	access:public
eeprom_size	e100.c	/^    int eeprom_size;$/;"	m	struct:e100_devinfo	file:	access:public
efile	sh.c	/^  char *efile;$/;"	m	struct:redircmd	file:	access:public
eflags	mmu.h	/^  uint eflags;$/;"	m	struct:taskstate	access:public
eflags	x86.h	/^  uint eflags;$/;"	m	struct:trapframe	access:public
ehsize	elf.h	/^  ushort ehsize;$/;"	m	struct:elfhdr	access:public
eip	mmu.h	/^  uint *eip;         \/\/ Saved state from last task switch$/;"	m	struct:taskstate	access:public
eip	proc.h	/^  int eip;$/;"	m	struct:context	access:public
eip	x86.h	/^  uint eip;$/;"	m	struct:trapframe	access:public
el	e100.h	/^            char el     : 1;$/;"	m	struct:op_transmit_cmd_cmd_tag	access:public
el	e100.h	/^            char el :   1;    \/\/ Last one$/;"	m	struct:command_block_tag	access:public
elf	elf.h	/^  uchar elf[12];$/;"	m	struct:elfhdr	access:public
elfhdr	elf.h	/^struct elfhdr {$/;"	s
elfhdr::ehsize	elf.h	/^  ushort ehsize;$/;"	m	struct:elfhdr	access:public
elfhdr::elf	elf.h	/^  uchar elf[12];$/;"	m	struct:elfhdr	access:public
elfhdr::entry	elf.h	/^  uint entry;$/;"	m	struct:elfhdr	access:public
elfhdr::flags	elf.h	/^  uint flags;$/;"	m	struct:elfhdr	access:public
elfhdr::machine	elf.h	/^  ushort machine;$/;"	m	struct:elfhdr	access:public
elfhdr::magic	elf.h	/^  uint magic;  \/\/ must equal ELF_MAGIC$/;"	m	struct:elfhdr	access:public
elfhdr::phentsize	elf.h	/^  ushort phentsize;$/;"	m	struct:elfhdr	access:public
elfhdr::phnum	elf.h	/^  ushort phnum;$/;"	m	struct:elfhdr	access:public
elfhdr::phoff	elf.h	/^  uint phoff;$/;"	m	struct:elfhdr	access:public
elfhdr::shentsize	elf.h	/^  ushort shentsize;$/;"	m	struct:elfhdr	access:public
elfhdr::shnum	elf.h	/^  ushort shnum;$/;"	m	struct:elfhdr	access:public
elfhdr::shoff	elf.h	/^  uint shoff;$/;"	m	struct:elfhdr	access:public
elfhdr::shstrndx	elf.h	/^  ushort shstrndx;$/;"	m	struct:elfhdr	access:public
elfhdr::type	elf.h	/^  ushort type;$/;"	m	struct:elfhdr	access:public
elfhdr::version	elf.h	/^  uint version;$/;"	m	struct:elfhdr	access:public
enabled_flag	lwip/netif/ppp/ppp.h	/^    int  enabled_flag;      \/* 0 iff protocol is disabled *\/$/;"	m	struct:protent	access:public
encrypt	lwip/netif/ppp/chpms.c	/^extern void encrypt(char *, int);$/;"	p	file:	signature:(char *, int)
endpoint	lwip/netif/ppp/lcp.h	/^    struct epdisc endpoint;	\/* endpoint discriminator *\/$/;"	m	struct:lcp_options	typeref:struct:lcp_options::epdisc	access:public
entry	elf.h	/^  uint entry;$/;"	m	struct:elfhdr	access:public
entry	mp.h	/^  ushort entry;                 \/\/ entry count$/;"	m	struct:mpconf	access:public
eof	e100.h	/^        char eof :          1;$/;"	m	struct:rf_desc	access:public
eof	e100.h	/^        char eof :      1;$/;"	m	struct:op_transmit_cmd	access:public
er_mask	e100.h	/^    char er_mask : 1;$/;"	m	struct:scb_command_word	access:public
err	lwip/api/sockets.c	/^  int err;$/;"	m	struct:lwip_socket	file:	access:public
err	lwip/include/lwip/api.h	/^  err_t err;$/;"	m	struct:netbuf	access:public
err	lwip/include/lwip/api.h	/^  err_t err;$/;"	m	struct:netconn	access:public
err	lwip/include/lwip/stats.h	/^  mem_size_t err;$/;"	m	struct:stats_mem	access:public
err	lwip/include/lwip/stats.h	/^  u16_t err;     \/* Misc error. *\/$/;"	m	struct:stats_proto	access:public
err	lwip/include/lwip/stats.h	/^  u16_t err;$/;"	m	struct:stats_pbuf	access:public
err	lwip/include/lwip/stats.h	/^  u16_t err;$/;"	m	struct:stats_syselem	access:public
err	x86.h	/^  uint err;$/;"	m	struct:trapframe	access:public
errCode	lwip/netif/ppp/ppp.c	/^    int  errCode;                       \/* Code indicating why interface is down. *\/$/;"	m	struct:PPPControl_s	file:	access:public
err_strerr	lwip/api/err.c	/^static char *err_strerr[] = {"Ok.",$/;"	v	file:
err_t	lwip/include/lwip/err.h	/^typedef s8_t err_t;$/;"	t
err_tcp	lwip/api/api_msg.c	/^err_tcp(void *arg, err_t err)$/;"	f	file:	signature:(void *arg, err_t err)
err_to_errno	lwip/api/sockets.c	/^#define err_to_errno(/;"	d	file:
err_to_errno_table	lwip/api/sockets.c	/^static int err_to_errno_table[11] = {$/;"	v	file:
errf	lwip/include/lwip/tcp.h	/^  void (* errf)(void *arg, err_t err);$/;"	m	struct:tcp_pcb	access:public
es	mmu.h	/^  ushort es;         \/\/ Even more saved state (segment selectors)$/;"	m	struct:taskstate	access:public
es	x86.h	/^  ushort es;$/;"	m	struct:trapframe	access:public
esi	mmu.h	/^  uint esi;$/;"	m	struct:taskstate	access:public
esi	proc.h	/^  int esi;$/;"	m	struct:context	access:public
esi	x86.h	/^  uint esi;$/;"	m	struct:trapframe	access:public
esp	mmu.h	/^  uint *esp;$/;"	m	struct:taskstate	access:public
esp	proc.h	/^  int esp;$/;"	m	struct:context	access:public
esp	x86.h	/^  uint esp;$/;"	m	struct:trapframe	access:public
esp0	mmu.h	/^  uint esp0;         \/\/ Stack pointers and segment selectors$/;"	m	struct:taskstate	access:public
esp1	mmu.h	/^  uint *esp1;$/;"	m	struct:taskstate	access:public
esp2	mmu.h	/^  uint *esp2;$/;"	m	struct:taskstate	access:public
eth_addr	lwip/include/netif/etharp.h	/^struct eth_addr {$/;"	s
eth_addr::PACK_STRUCT_FIELD	lwip/include/netif/etharp.h	/^  PACK_STRUCT_FIELD(u8_t addr[6]);$/;"	p	struct:eth_addr	access:public	signature:(u8_t addr[6])
eth_hdr	lwip/include/netif/etharp.h	/^struct eth_hdr {$/;"	s
eth_hdr::PACK_STRUCT_FIELD	lwip/include/netif/etharp.h	/^  PACK_STRUCT_FIELD(struct eth_addr dest);$/;"	p	struct:eth_hdr	access:public	signature:(struct eth_addr dest)
eth_hdr::PACK_STRUCT_FIELD	lwip/include/netif/etharp.h	/^  PACK_STRUCT_FIELD(struct eth_addr src);$/;"	p	struct:eth_hdr	access:public	signature:(struct eth_addr src)
eth_hdr::PACK_STRUCT_FIELD	lwip/include/netif/etharp.h	/^  PACK_STRUCT_FIELD(u16_t type);$/;"	p	struct:eth_hdr	access:public	signature:(u16_t type)
ethaddr	lwip/include/netif/ethernetif.h	/^  struct eth_addr *ethaddr;$/;"	m	struct:ethernetif	typeref:struct:ethernetif::eth_addr	access:public
ethaddr	lwip/netif/etharp.c	/^  struct eth_addr ethaddr;$/;"	m	struct:etharp_entry	typeref:struct:etharp_entry::eth_addr	file:	access:public
etharp_arp_input	lwip/include/netif/etharp.h	/^struct pbuf *etharp_arp_input(struct netif *netif, struct eth_addr *ethaddr,$/;"	p	signature:(struct netif *netif, struct eth_addr *ethaddr, struct pbuf *p)
etharp_arp_input	lwip/netif/etharp.c	/^etharp_arp_input(struct netif *netif, struct eth_addr *ethaddr, struct pbuf *p)$/;"	f	signature:(struct netif *netif, struct eth_addr *ethaddr, struct pbuf *p)
etharp_dequeue	lwip/netif/etharp.c	/^etharp_dequeue(s8_t i)$/;"	f	file:	signature:(s8_t i)
etharp_dequeue	lwip/netif/etharp.c	/^static u8_t etharp_dequeue(s8_t i);$/;"	p	file:	signature:(s8_t i)
etharp_enqueue	lwip/netif/etharp.c	/^etharp_enqueue(s8_t i, struct pbuf *q)$/;"	f	file:	signature:(s8_t i, struct pbuf *q)
etharp_enqueue	lwip/netif/etharp.c	/^static struct pbuf *etharp_enqueue(s8_t i, struct pbuf *q);$/;"	p	file:	signature:(s8_t i, struct pbuf *q)
etharp_entry	lwip/netif/etharp.c	/^struct etharp_entry {$/;"	s	file:
etharp_entry::ctime	lwip/netif/etharp.c	/^  u8_t ctime;$/;"	m	struct:etharp_entry	file:	access:public
etharp_entry::ethaddr	lwip/netif/etharp.c	/^  struct eth_addr ethaddr;$/;"	m	struct:etharp_entry	typeref:struct:etharp_entry::eth_addr	file:	access:public
etharp_entry::ipaddr	lwip/netif/etharp.c	/^  struct ip_addr ipaddr;$/;"	m	struct:etharp_entry	typeref:struct:etharp_entry::ip_addr	file:	access:public
etharp_entry::p	lwip/netif/etharp.c	/^  struct pbuf *p;$/;"	m	struct:etharp_entry	typeref:struct:etharp_entry::pbuf	file:	access:public
etharp_entry::state	lwip/netif/etharp.c	/^  enum etharp_state state;$/;"	m	struct:etharp_entry	typeref:enum:etharp_entry::etharp_state	file:	access:public
etharp_hdr	lwip/include/netif/etharp.h	/^struct etharp_hdr {$/;"	s
etharp_hdr::PACK_STRUCT_FIELD	lwip/include/netif/etharp.h	/^  PACK_STRUCT_FIELD(struct eth_addr dhwaddr);$/;"	p	struct:etharp_hdr	access:public	signature:(struct eth_addr dhwaddr)
etharp_hdr::PACK_STRUCT_FIELD	lwip/include/netif/etharp.h	/^  PACK_STRUCT_FIELD(struct eth_addr shwaddr);$/;"	p	struct:etharp_hdr	access:public	signature:(struct eth_addr shwaddr)
etharp_hdr::PACK_STRUCT_FIELD	lwip/include/netif/etharp.h	/^  PACK_STRUCT_FIELD(struct eth_hdr ethhdr);$/;"	p	struct:etharp_hdr	access:public	signature:(struct eth_hdr ethhdr)
etharp_hdr::PACK_STRUCT_FIELD	lwip/include/netif/etharp.h	/^  PACK_STRUCT_FIELD(struct ip_addr dipaddr);$/;"	p	struct:etharp_hdr	access:public	signature:(struct ip_addr dipaddr)
etharp_hdr::PACK_STRUCT_FIELD	lwip/include/netif/etharp.h	/^  PACK_STRUCT_FIELD(struct ip_addr sipaddr);$/;"	p	struct:etharp_hdr	access:public	signature:(struct ip_addr sipaddr)
etharp_hdr::PACK_STRUCT_FIELD	lwip/include/netif/etharp.h	/^  PACK_STRUCT_FIELD(u16_t _hwlen_protolen);$/;"	p	struct:etharp_hdr	access:public	signature:(u16_t _hwlen_protolen)
etharp_hdr::PACK_STRUCT_FIELD	lwip/include/netif/etharp.h	/^  PACK_STRUCT_FIELD(u16_t hwtype);$/;"	p	struct:etharp_hdr	access:public	signature:(u16_t hwtype)
etharp_hdr::PACK_STRUCT_FIELD	lwip/include/netif/etharp.h	/^  PACK_STRUCT_FIELD(u16_t opcode);$/;"	p	struct:etharp_hdr	access:public	signature:(u16_t opcode)
etharp_hdr::PACK_STRUCT_FIELD	lwip/include/netif/etharp.h	/^  PACK_STRUCT_FIELD(u16_t proto);$/;"	p	struct:etharp_hdr	access:public	signature:(u16_t proto)
etharp_init	lwip/include/netif/etharp.h	/^void etharp_init(void);$/;"	p	signature:(void)
etharp_init	lwip/netif/etharp.c	/^etharp_init(void)$/;"	f	signature:(void)
etharp_ip_input	lwip/include/netif/etharp.h	/^struct pbuf *etharp_ip_input(struct netif *netif, struct pbuf *p);$/;"	p	signature:(struct netif *netif, struct pbuf *p)
etharp_ip_input	lwip/netif/etharp.c	/^etharp_ip_input(struct netif *netif, struct pbuf *p)$/;"	f	signature:(struct netif *netif, struct pbuf *p)
etharp_output	lwip/include/netif/etharp.h	/^struct pbuf *etharp_output(struct netif *netif, struct ip_addr *ipaddr,$/;"	p	signature:(struct netif *netif, struct ip_addr *ipaddr, struct pbuf *q)
etharp_output	lwip/netif/etharp.c	/^etharp_output(struct netif *netif, struct ip_addr *ipaddr, struct pbuf *q)$/;"	f	signature:(struct netif *netif, struct ip_addr *ipaddr, struct pbuf *q)
etharp_query	lwip/include/netif/etharp.h	/^err_t etharp_query(struct netif *netif, struct ip_addr *ipaddr, struct pbuf *q);$/;"	p	signature:(struct netif *netif, struct ip_addr *ipaddr, struct pbuf *q)
etharp_query	lwip/netif/etharp.c	/^err_t etharp_query(struct netif *netif, struct ip_addr *ipaddr, struct pbuf *q)$/;"	f	signature:(struct netif *netif, struct ip_addr *ipaddr, struct pbuf *q)
etharp_state	lwip/netif/etharp.c	/^enum etharp_state {$/;"	g	file:
etharp_tmr	lwip/include/netif/etharp.h	/^void etharp_tmr(void);$/;"	p	signature:(void)
etharp_tmr	lwip/netif/etharp.c	/^etharp_tmr(void)$/;"	f	signature:(void)
ethbroadcast	lwip/netif/etharp.c	/^static const struct eth_addr ethbroadcast = {{0xff,0xff,0xff,0xff,0xff,0xff}};$/;"	v	typeref:struct:eth_addr	file:
ethbroadcast	lwip/netif/ethernetif.c	/^static const struct eth_addr ethbroadcast = {{0xff,0xff,0xff,0xff,0xff,0xff}};$/;"	v	typeref:struct:eth_addr	file:
ether_e100_attach	e100.c	/^ether_e100_attach(struct pci_func *pcif)$/;"	f	signature:(struct pci_func *pcif)
ether_e100_attach	e100.h	/^int ether_e100_attach(struct pci_func *pcif);$/;"	p	signature:(struct pci_func *pcif)
ethernetif	lwip/include/netif/ethernetif.h	/^struct ethernetif {$/;"	s
ethernetif::ethaddr	lwip/include/netif/ethernetif.h	/^  struct eth_addr *ethaddr;$/;"	m	struct:ethernetif	typeref:struct:ethernetif::eth_addr	access:public
ethernetif::receive	lwip/include/netif/ethernetif.h	/^  int (*receive)(void *data, uint32_t len);$/;"	m	struct:ethernetif	access:public
ethernetif::send	lwip/include/netif/ethernetif.h	/^  int (*send)(void *data, uint32_t len);$/;"	m	struct:ethernetif	access:public
ethernetif_init	lwip/include/netif/ethernetif.h	/^err_t ethernetif_init(struct netif *);$/;"	p	signature:(struct netif *)
ethernetif_init	lwip/netif/ethernetif.c	/^ethernetif_init(struct netif *netif)$/;"	f	signature:(struct netif *netif)
ethernetif_input	lwip/include/netif/ethernetif.h	/^void  ethernetif_input(struct netif *);$/;"	p	signature:(struct netif *)
ethernetif_input	lwip/netif/ethernetif.c	/^ethernetif_input(struct netif *netif)$/;"	f	signature:(struct netif *netif)
ethernetif_input	lwip/netif/ethernetif.c	/^void  ethernetif_input(struct netif *netif);$/;"	p	file:	signature:(struct netif *netif)
ethernetif_output	lwip/netif/ethernetif.c	/^ethernetif_output(struct netif *netif, struct pbuf *p,$/;"	f	file:	signature:(struct netif *netif, struct pbuf *p, struct ip_addr *ipaddr)
ethernetif_output	lwip/netif/ethernetif.c	/^static err_t ethernetif_output(struct netif *netif, struct pbuf *p,$/;"	p	file:	signature:(struct netif *netif, struct pbuf *p, struct ip_addr *ipaddr)
ethip_hdr	lwip/include/netif/etharp.h	/^struct ethip_hdr {$/;"	s
ethip_hdr::PACK_STRUCT_FIELD	lwip/include/netif/etharp.h	/^  PACK_STRUCT_FIELD(struct eth_hdr eth);$/;"	p	struct:ethip_hdr	access:public	signature:(struct eth_hdr eth)
ethip_hdr::PACK_STRUCT_FIELD	lwip/include/netif/etharp.h	/^  PACK_STRUCT_FIELD(struct ip_hdr ip);$/;"	p	struct:ethip_hdr	access:public	signature:(struct ip_hdr ip)
event_callback	lwip/api/sockets.c	/^event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)$/;"	f	file:	signature:(struct netconn *conn, enum netconn_evt evt, u16_t len)
event_callback	lwip/api/sockets.c	/^event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len);$/;"	p	file:	signature:(struct netconn *conn, enum netconn_evt evt, u16_t len)
exceptset	lwip/api/sockets.c	/^    fd_set *exceptset;$/;"	m	struct:lwip_select_cb	file:	access:public
exec	defs.h	/^int             exec(char*, char**);$/;"	p	signature:(char*, char**)
exec	exec.c	/^exec(char *path, char **argv)$/;"	f	signature:(char *path, char **argv)
exec	user.h	/^int exec(char*, char**);$/;"	p	signature:(char*, char**)
execcmd	sh.c	/^execcmd(void)$/;"	f	signature:(void)
execcmd	sh.c	/^struct execcmd {$/;"	s	file:
execcmd::argv	sh.c	/^  char *argv[MAXARGS];$/;"	m	struct:execcmd	file:	access:public
execcmd::eargv	sh.c	/^  char *eargv[MAXARGS];$/;"	m	struct:execcmd	file:	access:public
execcmd::type	sh.c	/^  int type;$/;"	m	struct:execcmd	file:	access:public
exectest	usertests.c	/^exectest(void)$/;"	f	signature:(void)
exit	defs.h	/^void            exit(void);$/;"	p	signature:(void)
exit	proc.c	/^exit(void)$/;"	f	signature:(void)
exit	user.h	/^int exit(void) __attribute__((noreturn));$/;"	p	signature:(void)
exitwait	usertests.c	/^exitwait(void)$/;"	f	signature:(void)
explicit_remote	lwip/netif/ppp/ppp.h	/^	u_int  explicit_remote : 1;    \/* remote_name specified with remotename opt *\/$/;"	m	struct:ppp_settings	access:public
ext_accm	lwip/netif/ppp/ppp.h	/^typedef u_char  ext_accm[32];$/;"	t
extcode	lwip/netif/ppp/fsm.h	/^    int  (*extcode)			\/* Called when unknown code received *\/$/;"	m	struct:fsm_callbacks	access:public
f	e100.h	/^        char f :            1;$/;"	m	struct:rf_desc	access:public
f	lwip/include/lwip/tcpip.h	/^      void (*f)(void *ctx);$/;"	m	struct:tcpip_msg	access:public
fcp	e100.h	/^    char fcp  : 1;$/;"	m	struct:scb_status_word	access:public
fcp_mask	e100.h	/^    char fcp_mask : 1;$/;"	m	struct:scb_command_word	access:public
fcstab	lwip/netif/ppp/ppp.c	/^static const u_short fcstab[256] = {$/;"	v	file:
fd	lwip/netif/ppp/ppp.c	/^    sio_fd_t fd;                    \/* File device ID of port. *\/$/;"	m	struct:PPPControl_s	file:	access:public
fd	sh.c	/^  int fd;$/;"	m	struct:redircmd	file:	access:public
fd_bits	lwip/include/lwip/sockets.h	/^          unsigned char fd_bits [(FD_SETSIZE+7)\/8];$/;"	m	struct:fd_set	access:public
fd_set	lwip/include/lwip/sockets.h	/^        } fd_set;$/;"	t	typeref:struct:fd_set
fd_set	lwip/include/lwip/sockets.h	/^  typedef struct fd_set {$/;"	s
fd_set::fd_bits	lwip/include/lwip/sockets.h	/^          unsigned char fd_bits [(FD_SETSIZE+7)\/8];$/;"	m	struct:fd_set	access:public
fdalloc	sysfile.c	/^fdalloc(struct file *f)$/;"	f	file:	signature:(struct file *f)
feature	mp.h	/^  uint feature;                 \/\/ feature flags from CPUID instruction$/;"	m	struct:mpproc	access:public
fetchint	defs.h	/^int             fetchint(struct proc*, uint, int*);$/;"	p	signature:(struct proc*, uint, int*)
fetchint	syscall.c	/^fetchint(struct proc *p, uint addr, int *ip)$/;"	f	signature:(struct proc *p, uint addr, int *ip)
fetchstr	defs.h	/^int             fetchstr(struct proc*, uint, char**);$/;"	p	signature:(struct proc*, uint, char**)
fetchstr	syscall.c	/^fetchstr(struct proc *p, uint addr, char **pp)$/;"	f	signature:(struct proc *p, uint addr, char **pp)
file	file.c	/^struct file file[NFILE];$/;"	v	typeref:struct:file
file	file.h	/^struct file {$/;"	s
file	sh.c	/^  char *file;$/;"	m	struct:redircmd	file:	access:public
file::FD_CLOSED	file.h	/^  enum { FD_CLOSED, FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file
file::FD_INODE	file.h	/^  enum { FD_CLOSED, FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file
file::FD_NONE	file.h	/^  enum { FD_CLOSED, FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file
file::FD_PIPE	file.h	/^  enum { FD_CLOSED, FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file
file::ip	file.h	/^  struct inode *ip;$/;"	m	struct:file	typeref:struct:file::inode	access:public
file::off	file.h	/^  uint off;$/;"	m	struct:file	access:public
file::pipe	file.h	/^  struct pipe *pipe;$/;"	m	struct:file	typeref:struct:file::pipe	access:public
file::readable	file.h	/^  char readable;$/;"	m	struct:file	access:public
file::ref	file.h	/^  int ref; \/\/ reference count$/;"	m	struct:file	access:public
file::type	file.h	/^  enum { FD_CLOSED, FD_NONE, FD_PIPE, FD_INODE } type;$/;"	m	struct:file	typeref:enum:file	access:public
file::writable	file.h	/^  char writable;$/;"	m	struct:file	access:public
file_table_lock	file.c	/^struct spinlock file_table_lock;$/;"	v	typeref:struct:spinlock
filealloc	defs.h	/^struct file*    filealloc(void);$/;"	p	signature:(void)
filealloc	file.c	/^filealloc(void)$/;"	f	signature:(void)
fileclose	defs.h	/^void            fileclose(struct file*);$/;"	p	signature:(struct file*)
fileclose	file.c	/^fileclose(struct file *f)$/;"	f	signature:(struct file *f)
filedup	defs.h	/^struct file*    filedup(struct file*);$/;"	p	signature:(struct file*)
filedup	file.c	/^filedup(struct file *f)$/;"	f	signature:(struct file *f)
fileinit	defs.h	/^void            fileinit(void);$/;"	p	signature:(void)
fileinit	file.c	/^fileinit(void)$/;"	f	signature:(void)
fileread	defs.h	/^int             fileread(struct file*, char*, int n);$/;"	p	signature:(struct file*, char*, int n)
fileread	file.c	/^fileread(struct file *f, char *addr, int n)$/;"	f	signature:(struct file *f, char *addr, int n)
filestat	defs.h	/^int             filestat(struct file*, struct stat*);$/;"	p	signature:(struct file*, struct stat*)
filestat	file.c	/^filestat(struct file *f, struct stat *st)$/;"	f	signature:(struct file *f, struct stat *st)
filesz	elf.h	/^  uint filesz;$/;"	m	struct:proghdr	access:public
filewrite	defs.h	/^int             filewrite(struct file*, char*, int n);$/;"	p	signature:(struct file*, char*, int n)
filewrite	file.c	/^filewrite(struct file *f, char *addr, int n)$/;"	f	signature:(struct file *f, char *addr, int n)
find_arp_entry	lwip/netif/etharp.c	/^find_arp_entry(void)$/;"	f	file:	signature:(void)
find_arp_entry	lwip/netif/etharp.c	/^static s8_t find_arp_entry(void);$/;"	p	file:	signature:(void)
finished	httpd.c	/^int finished = 0;$/;"	v
finished	lwip/netif/ppp/fsm.h	/^    void (*finished)		\/* Called when we don't want the lower layer *\/$/;"	m	struct:fsm_callbacks	access:public
flags	buf.h	/^  int flags;$/;"	m	struct:buf	access:public
flags	elf.h	/^  uint flags;$/;"	m	struct:elfhdr	access:public
flags	elf.h	/^  uint flags;$/;"	m	struct:proghdr	access:public
flags	fsvar.h	/^  int flags;          \/\/ I_BUSY, I_VALID$/;"	m	struct:inode	access:public
flags	lwip/api/sockets.c	/^  u16_t  flags;$/;"	m	struct:lwip_socket	file:	access:public
flags	lwip/core/tcp_in.c	/^static u8_t flags;$/;"	v	file:
flags	lwip/include/lwip/netif.h	/^  u8_t flags;$/;"	m	struct:netif	access:public
flags	lwip/include/lwip/pbuf.h	/^  u16_t flags;$/;"	m	struct:pbuf	access:public
flags	lwip/include/lwip/tcp.h	/^  u8_t flags;$/;"	m	struct:tcp_pcb	access:public
flags	lwip/include/lwip/udp.h	/^  u8_t flags;$/;"	m	struct:udp_pcb	access:public
flags	lwip/netif/ppp/fsm.h	/^    int flags;				\/* Contains option bits *\/$/;"	m	struct:fsm	access:public
flags	lwip/netif/ppp/vj.h	/^    u_short flags;$/;"	m	struct:vjcompress	access:public
flags	mp.h	/^  uchar flags;                  \/\/ CPU flags$/;"	m	struct:mpproc	access:public
flags	mp.h	/^  uchar flags;                  \/\/ I\/O APIC flags$/;"	m	struct:mpioapic	access:public
flow1	lwip/include/ipv6/lwip/ip.h	/^  u8_t flow1:4, tclass2:4;  $/;"	m	struct:ip_hdr	access:public
flow2	lwip/include/ipv6/lwip/ip.h	/^  u16_t flow2;$/;"	m	struct:ip_hdr	access:public
fmt_types	console.c	/^enum fmt_types {$/;"	g	file:
fmtname	ls.c	/^fmtname(char *path)$/;"	f	signature:(char *path)
fork	user.h	/^int fork(void);$/;"	p	signature:(void)
fork1	sh.c	/^fork1(void)$/;"	f	signature:(void)
fork1	sh.c	/^int fork1(void);  \/\/ Fork but panics on failure.$/;"	p	file:	signature:(void)
forkret	proc.c	/^extern void forkret(void);$/;"	p	file:	signature:(void)
forkret	proc.c	/^forkret(void)$/;"	f	signature:(void)
forkret1	proc.c	/^extern void forkret1(struct trapframe*);$/;"	p	file:	signature:(struct trapframe*)
forktest	forktest.c	/^forktest(void)$/;"	f	signature:(void)
forktest	usertests.c	/^forktest(void)$/;"	f	signature:(void)
fourteen	usertests.c	/^fourteen(void)$/;"	f	signature:(void)
fr	e100.h	/^    char fr   : 1;$/;"	m	struct:scb_status_word	access:public
fr_mask	e100.h	/^    char fr_mask : 1;$/;"	m	struct:scb_command_word	access:public
free	lwip/xv6/arch/sys_arch.c	/^    sys_sem_t free, queued;$/;"	m	struct:mbox	file:	access:public
free	umalloc.c	/^free(void *ap)$/;"	f	signature:(void *ap)
free	user.h	/^void free(void*);$/;"	p	signature:(void*)
freeblock	mkfs.c	/^uint freeblock;$/;"	v
freeinode	mkfs.c	/^uint freeinode = 1;$/;"	v
freelist	kalloc.c	/^struct run *freelist;$/;"	v	typeref:struct:run
freep	umalloc.c	/^static Header *freep;$/;"	v	file:
fromaddr	lwip/include/lwip/api.h	/^  struct ip_addr *fromaddr;$/;"	m	struct:netbuf	typeref:struct:netbuf::ip_addr	access:public
fromport	lwip/include/lwip/api.h	/^  u16_t fromport;$/;"	m	struct:netbuf	access:public
fs	mmu.h	/^  ushort fs;$/;"	m	struct:taskstate	access:public
fsfd	mkfs.c	/^int fsfd;$/;"	v
fsm	lwip/netif/ppp/fsm.h	/^typedef struct fsm {$/;"	s
fsm	lwip/netif/ppp/fsm.h	/^} fsm;$/;"	t	typeref:struct:fsm
fsm::callbacks	lwip/netif/ppp/fsm.h	/^    struct fsm_callbacks* callbacks;\/* Callback routines *\/$/;"	m	struct:fsm	typeref:struct:fsm::fsm_callbacks	access:public
fsm::flags	lwip/netif/ppp/fsm.h	/^    int flags;				\/* Contains option bits *\/$/;"	m	struct:fsm	access:public
fsm::id	lwip/netif/ppp/fsm.h	/^    u_char id;				\/* Current id *\/$/;"	m	struct:fsm	access:public
fsm::maxconfreqtransmits	lwip/netif/ppp/fsm.h	/^    int maxconfreqtransmits;\/* Maximum Configure-Request transmissions *\/$/;"	m	struct:fsm	access:public
fsm::maxnakloops	lwip/netif/ppp/fsm.h	/^    int maxnakloops;		\/* Maximum number of nak loops tolerated *\/$/;"	m	struct:fsm	access:public
fsm::maxtermtransmits	lwip/netif/ppp/fsm.h	/^    int maxtermtransmits;	\/* Maximum Terminate-Request transmissions *\/$/;"	m	struct:fsm	access:public
fsm::nakloops	lwip/netif/ppp/fsm.h	/^    int nakloops;			\/* Number of nak loops since last ack *\/$/;"	m	struct:fsm	access:public
fsm::protocol	lwip/netif/ppp/fsm.h	/^    u_short protocol;		\/* Data Link Layer Protocol field value *\/$/;"	m	struct:fsm	access:public
fsm::reqid	lwip/netif/ppp/fsm.h	/^    u_char reqid;			\/* Current request id *\/$/;"	m	struct:fsm	access:public
fsm::retransmits	lwip/netif/ppp/fsm.h	/^    int retransmits;		\/* Number of retransmissions left *\/$/;"	m	struct:fsm	access:public
fsm::seen_ack	lwip/netif/ppp/fsm.h	/^    u_char seen_ack;		\/* Have received valid Ack\/Nak\/Rej to Req *\/$/;"	m	struct:fsm	access:public
fsm::state	lwip/netif/ppp/fsm.h	/^    int state;				\/* State *\/$/;"	m	struct:fsm	access:public
fsm::term_reason	lwip/netif/ppp/fsm.h	/^    char* term_reason;		\/* Reason for closing protocol *\/$/;"	m	struct:fsm	access:public
fsm::term_reason_len	lwip/netif/ppp/fsm.h	/^    int term_reason_len;	\/* Length of term_reason *\/$/;"	m	struct:fsm	access:public
fsm::timeouttime	lwip/netif/ppp/fsm.h	/^    int timeouttime;		\/* Timeout time in milliseconds *\/$/;"	m	struct:fsm	access:public
fsm::unit	lwip/netif/ppp/fsm.h	/^    int unit;				\/* Interface unit number *\/$/;"	m	struct:fsm	access:public
fsm_callbacks	lwip/netif/ppp/fsm.h	/^typedef struct fsm_callbacks {$/;"	s
fsm_callbacks	lwip/netif/ppp/fsm.h	/^} fsm_callbacks;$/;"	t	typeref:struct:fsm_callbacks
fsm_callbacks::ackci	lwip/netif/ppp/fsm.h	/^    int  (*ackci)			\/* ACK our Configuration Information *\/$/;"	m	struct:fsm_callbacks	access:public
fsm_callbacks::addci	lwip/netif/ppp/fsm.h	/^    void (*addci) 			\/* Add our Configuration Information *\/$/;"	m	struct:fsm_callbacks	access:public
fsm_callbacks::cilen	lwip/netif/ppp/fsm.h	/^    int  (*cilen)			\/* Length of our Configuration Information *\/$/;"	m	struct:fsm_callbacks	access:public
fsm_callbacks::down	lwip/netif/ppp/fsm.h	/^    void (*down)			\/* Called when fsm leaves OPENED state *\/$/;"	m	struct:fsm_callbacks	access:public
fsm_callbacks::extcode	lwip/netif/ppp/fsm.h	/^    int  (*extcode)			\/* Called when unknown code received *\/$/;"	m	struct:fsm_callbacks	access:public
fsm_callbacks::finished	lwip/netif/ppp/fsm.h	/^    void (*finished)		\/* Called when we don't want the lower layer *\/$/;"	m	struct:fsm_callbacks	access:public
fsm_callbacks::nakci	lwip/netif/ppp/fsm.h	/^    int  (*nakci)			\/* NAK our Configuration Information *\/$/;"	m	struct:fsm_callbacks	access:public
fsm_callbacks::proto_name	lwip/netif/ppp/fsm.h	/^    char *proto_name;		\/* String name for protocol (for messages) *\/$/;"	m	struct:fsm_callbacks	access:public
fsm_callbacks::protreject	lwip/netif/ppp/fsm.h	/^    void (*protreject)		\/* Called when Protocol-Reject received *\/$/;"	m	struct:fsm_callbacks	access:public
fsm_callbacks::rejci	lwip/netif/ppp/fsm.h	/^    int  (*rejci)			\/* Reject our Configuration Information *\/$/;"	m	struct:fsm_callbacks	access:public
fsm_callbacks::reqci	lwip/netif/ppp/fsm.h	/^    int  (*reqci)			\/* Request peer's Configuration Information *\/$/;"	m	struct:fsm_callbacks	access:public
fsm_callbacks::resetci	lwip/netif/ppp/fsm.h	/^    void (*resetci)			\/* Reset our Configuration Information *\/$/;"	m	struct:fsm_callbacks	access:public
fsm_callbacks::retransmit	lwip/netif/ppp/fsm.h	/^    void (*retransmit)		\/* Retransmission is necessary *\/$/;"	m	struct:fsm_callbacks	access:public
fsm_callbacks::starting	lwip/netif/ppp/fsm.h	/^    void (*starting)		\/* Called when we want the lower layer *\/$/;"	m	struct:fsm_callbacks	access:public
fsm_callbacks::up	lwip/netif/ppp/fsm.h	/^    void (*up)				\/* Called when fsm reaches OPENED state *\/$/;"	m	struct:fsm_callbacks	access:public
fsm_close	lwip/netif/ppp/fsm.c	/^void fsm_close(fsm *f, char *reason)$/;"	f	signature:(fsm *f, char *reason)
fsm_close	lwip/netif/ppp/fsm.h	/^void fsm_close (fsm*, char*);$/;"	p	signature:(fsm*, char*)
fsm_init	lwip/netif/ppp/fsm.c	/^void fsm_init(fsm *f)$/;"	f	signature:(fsm *f)
fsm_init	lwip/netif/ppp/fsm.h	/^void fsm_init (fsm*);$/;"	p	signature:(fsm*)
fsm_input	lwip/netif/ppp/fsm.c	/^void fsm_input(fsm *f, u_char *inpacket, int l)$/;"	f	signature:(fsm *f, u_char *inpacket, int l)
fsm_input	lwip/netif/ppp/fsm.h	/^void fsm_input (fsm*, u_char*, int);$/;"	p	signature:(fsm*, u_char*, int)
fsm_lowerdown	lwip/netif/ppp/fsm.c	/^void fsm_lowerdown(fsm *f)$/;"	f	signature:(fsm *f)
fsm_lowerdown	lwip/netif/ppp/fsm.h	/^void fsm_lowerdown (fsm*);$/;"	p	signature:(fsm*)
fsm_lowerup	lwip/netif/ppp/fsm.c	/^void fsm_lowerup(fsm *f)$/;"	f	signature:(fsm *f)
fsm_lowerup	lwip/netif/ppp/fsm.h	/^void fsm_lowerup (fsm*);$/;"	p	signature:(fsm*)
fsm_open	lwip/netif/ppp/fsm.c	/^void fsm_open(fsm *f)$/;"	f	signature:(fsm *f)
fsm_open	lwip/netif/ppp/fsm.h	/^void fsm_open (fsm*);$/;"	p	signature:(fsm*)
fsm_protreject	lwip/netif/ppp/fsm.c	/^void fsm_protreject(fsm *f)$/;"	f	signature:(fsm *f)
fsm_protreject	lwip/netif/ppp/fsm.h	/^void fsm_protreject (fsm*);$/;"	p	signature:(fsm*)
fsm_rcoderej	lwip/netif/ppp/fsm.c	/^static void fsm_rcoderej (fsm *, u_char *, int);$/;"	p	file:	signature:(fsm *, u_char *, int)
fsm_rcoderej	lwip/netif/ppp/fsm.c	/^static void fsm_rcoderej(fsm *f, u_char *inp, int len)$/;"	f	file:	signature:(fsm *f, u_char *inp, int len)
fsm_rconfack	lwip/netif/ppp/fsm.c	/^static void fsm_rconfack (fsm *, int, u_char *, int);$/;"	p	file:	signature:(fsm *, int, u_char *, int)
fsm_rconfack	lwip/netif/ppp/fsm.c	/^static void fsm_rconfack(fsm *f, int id, u_char *inp, int len)$/;"	f	file:	signature:(fsm *f, int id, u_char *inp, int len)
fsm_rconfnakrej	lwip/netif/ppp/fsm.c	/^static void fsm_rconfnakrej (fsm *, int, int, u_char *, int);$/;"	p	file:	signature:(fsm *, int, int, u_char *, int)
fsm_rconfnakrej	lwip/netif/ppp/fsm.c	/^static void fsm_rconfnakrej(fsm *f, int code, int id, u_char *inp, int len)$/;"	f	file:	signature:(fsm *f, int code, int id, u_char *inp, int len)
fsm_rconfreq	lwip/netif/ppp/fsm.c	/^static void fsm_rconfreq (fsm *, u_char, u_char *, int);$/;"	p	file:	signature:(fsm *, u_char, u_char *, int)
fsm_rconfreq	lwip/netif/ppp/fsm.c	/^static void fsm_rconfreq(fsm *f, u_char id, u_char *inp, int len)$/;"	f	file:	signature:(fsm *f, u_char id, u_char *inp, int len)
fsm_rtermack	lwip/netif/ppp/fsm.c	/^static void fsm_rtermack (fsm *);$/;"	p	file:	signature:(fsm *)
fsm_rtermack	lwip/netif/ppp/fsm.c	/^static void fsm_rtermack(fsm *f)$/;"	f	file:	signature:(fsm *f)
fsm_rtermreq	lwip/netif/ppp/fsm.c	/^static void fsm_rtermreq (fsm *, int, u_char *, int);$/;"	p	file:	signature:(fsm *, int, u_char *, int)
fsm_rtermreq	lwip/netif/ppp/fsm.c	/^static void fsm_rtermreq(fsm *f, int id, u_char *p, int len)$/;"	f	file:	signature:(fsm *f, int id, u_char *p, int len)
fsm_sconfreq	lwip/netif/ppp/fsm.c	/^static void fsm_sconfreq (fsm *, int);$/;"	p	file:	signature:(fsm *, int)
fsm_sconfreq	lwip/netif/ppp/fsm.c	/^static void fsm_sconfreq(fsm *f, int retransmit)$/;"	f	file:	signature:(fsm *f, int retransmit)
fsm_sdata	lwip/netif/ppp/fsm.c	/^void fsm_sdata($/;"	f	signature:( fsm *f, u_char code, u_char id, u_char *data, int datalen )
fsm_sdata	lwip/netif/ppp/fsm.h	/^void fsm_sdata (fsm*, u_char, u_char, u_char*, int);$/;"	p	signature:(fsm*, u_char, u_char, u_char*, int)
fsm_timeout	lwip/netif/ppp/fsm.c	/^static void fsm_timeout (void *);$/;"	p	file:	signature:(void *)
fsm_timeout	lwip/netif/ppp/fsm.c	/^static void fsm_timeout(void *arg)$/;"	f	file:	signature:(void *arg)
fstat	user.h	/^int fstat(int fd, struct stat*);$/;"	p	signature:(int fd, struct stat*)
func	pci.h	/^    uint32_t func;$/;"	m	struct:pci_func	access:public
fw	lwip/include/lwip/stats.h	/^  u16_t fw;      \/* Forwarded packets. *\/$/;"	m	struct:stats_proto	access:public
g	mmu.h	/^  uint g : 1;          \/\/ Granularity: limit scaled by 4K when set$/;"	m	struct:segdesc	access:public
gatedesc	mmu.h	/^struct gatedesc {$/;"	s
gatedesc::args	mmu.h	/^  uint args : 5;        \/\/ # args, 0 for interrupt\/trap gates$/;"	m	struct:gatedesc	access:public
gatedesc::dpl	mmu.h	/^  uint dpl : 2;         \/\/ descriptor(meaning new) privilege level$/;"	m	struct:gatedesc	access:public
gatedesc::off_15_0	mmu.h	/^  uint off_15_0 : 16;   \/\/ low 16 bits of offset in segment$/;"	m	struct:gatedesc	access:public
gatedesc::off_31_16	mmu.h	/^  uint off_31_16 : 16;  \/\/ high bits of offset in segment$/;"	m	struct:gatedesc	access:public
gatedesc::p	mmu.h	/^  uint p : 1;           \/\/ Present$/;"	m	struct:gatedesc	access:public
gatedesc::rsv1	mmu.h	/^  uint rsv1 : 3;        \/\/ reserved(should be zero I guess)$/;"	m	struct:gatedesc	access:public
gatedesc::s	mmu.h	/^  uint s : 1;           \/\/ must be 0 (system)$/;"	m	struct:gatedesc	access:public
gatedesc::ss	mmu.h	/^  uint ss : 16;         \/\/ segment selector$/;"	m	struct:gatedesc	access:public
gatedesc::type	mmu.h	/^  uint type : 4;        \/\/ type(STS_{TG,IG32,TG32})$/;"	m	struct:gatedesc	access:public
gdt	proc.h	/^  struct segdesc gdt[NSEGS];  \/\/ x86 global descriptor table$/;"	m	struct:cpu	typeref:struct:cpu::segdesc	access:public
get_idle_time	lwip/netif/ppp/ppp.c	/^int get_idle_time(int u, struct ppp_idle *ip)$/;"	f	signature:(int u, struct ppp_idle *ip)
get_idle_time	lwip/netif/ppp/ppp.h	/^int  get_idle_time (int, struct ppp_idle *);$/;"	p	signature:(int, struct ppp_idle *)
get_pap_passwd	lwip/netif/ppp/auth.c	/^static int  get_pap_passwd (int, char *, char *);$/;"	p	file:	signature:(int, char *, char *)
get_pap_passwd	lwip/netif/ppp/auth.c	/^static int get_pap_passwd(int unit, char *user, char *passwd)$/;"	f	file:	signature:(int unit, char *user, char *passwd)
get_secret	lwip/netif/ppp/auth.c	/^int get_secret($/;"	f	signature:( int unit, char *client, char *server, char *secret, int *secret_len, int save_addrs )
get_secret	lwip/netif/ppp/auth.h	/^int  get_secret (int, char *, char *, char *, int *, int);$/;"	p	signature:(int, char *, char *, char *, int *, int)
get_socket	lwip/api/sockets.c	/^get_socket(int s)$/;"	f	file:	signature:(int s)
getcallerpcs	defs.h	/^void            getcallerpcs(void*, uint*);$/;"	p	signature:(void*, uint*)
getcallerpcs	spinlock.c	/^getcallerpcs(void *v, uint pcs[])$/;"	f	signature:(void *v, uint pcs[])
getcmd	sh.c	/^getcmd(char *buf, int nbuf)$/;"	f	signature:(char *buf, int nbuf)
getip_hl	lwip/netif/ppp/vj.c	/^#define getip_hl(/;"	d	file:
getpeername	lwip/include/lwip/sockets.h	/^#define getpeername(/;"	d
getpeername	user.h	/^int getpeername (int s, struct sockaddr *name, socklen_t *namelen);$/;"	p	signature:(int s, struct sockaddr *name, socklen_t *namelen)
getpid	user.h	/^int getpid();$/;"	p	signature:()
gets	ulib.c	/^gets(char *buf, int max)$/;"	f	signature:(char *buf, int max)
gets	user.h	/^char* gets(char*, int max);$/;"	p	signature:(char*, int max)
getsockname	lwip/include/lwip/sockets.h	/^#define getsockname(/;"	d
getsockname	user.h	/^int getsockname (int s, struct sockaddr *name, socklen_t *namelen);$/;"	p	signature:(int s, struct sockaddr *name, socklen_t *namelen)
getsockopt	lwip/include/lwip/sockets.h	/^#define getsockopt(/;"	d
getsockopt	user.h	/^int getsockopt (int s, int level, int optname, void *optval, socklen_t *optlen);$/;"	p	signature:(int s, int level, int optname, void *optval, socklen_t *optlen)
getth_off	lwip/netif/ppp/vj.c	/^#define getth_off(/;"	d	file:
gettoken	sh.c	/^gettoken(char **ps, char *es, char **q, char **eq)$/;"	f	signature:(char **ps, char *es, char **q, char **eq)
grep	grep.c	/^grep(char *pattern, int fd)$/;"	f	signature:(char *pattern, int fd)
growproc	defs.h	/^int             growproc(int);$/;"	p	signature:(int)
growproc	proc.c	/^growproc(int n)$/;"	f	signature:(int n)
gs	mmu.h	/^  ushort gs;$/;"	m	struct:taskstate	access:public
gw	lwip/include/lwip/netif.h	/^  struct ip_addr gw;$/;"	m	struct:netif	typeref:struct:netif::ip_addr	access:public
h	lwip/include/lwip/sys.h	/^  sys_timeout_handler h;$/;"	m	struct:sys_timeout	access:public
have_chap_secret	lwip/netif/ppp/auth.c	/^static int  have_chap_secret (char *, char *, u32_t);$/;"	p	file:	signature:(char *, char *, u32_t)
have_chap_secret	lwip/netif/ppp/auth.c	/^static int have_chap_secret(char *client, char *server, u32_t remote)$/;"	f	file:	signature:(char *client, char *server, u32_t remote)
have_pap_secret	lwip/netif/ppp/auth.c	/^static int  have_pap_secret (void);$/;"	p	file:	signature:(void)
have_pap_secret	lwip/netif/ppp/auth.c	/^static int have_pap_secret(void)$/;"	f	file:	signature:(void)
head	e100.h	/^    volatile command_block head;$/;"	m	struct:rf_desc	access:public
head	lwip/xv6/arch/sys_arch.c	/^    int count, head, next;$/;"	m	struct:mbox	file:	access:public
header	umalloc.c	/^union header {$/;"	u	file:
header::ptr	umalloc.c	/^    union header *ptr;$/;"	m	struct:header	typeref:union:header::header	file:	access:public
header::size	umalloc.c	/^    uint size;$/;"	m	struct:header	file:	access:public
header::s	umalloc.c	/^  } s;$/;"	m	union:header	typeref:struct:header	file:	access:public
header::x	umalloc.c	/^  Align x;$/;"	m	union:header	file:	access:public
his_ipaddr	lwip/netif/ppp/ppp.h	/^    struct ip_addr our_ipaddr, his_ipaddr, netmask, dns1, dns2;$/;"	m	struct:ppp_addrs	typeref:struct:ppp_addrs::	access:public
hisaddr	lwip/netif/ppp/ipcp.h	/^    u32_t ouraddr, hisaddr;	\/* Addresses in NETWORK BYTE ORDER *\/$/;"	m	struct:ipcp_options	access:public
holding	defs.h	/^int             holding(struct spinlock*);$/;"	p	signature:(struct spinlock*)
holding	spinlock.c	/^holding(struct spinlock *lock)$/;"	f	signature:(struct spinlock *lock)
hoplim	lwip/include/ipv6/lwip/ip.h	/^  u8_t hoplim;              \/* hop limit (TTL) *\/$/;"	m	struct:ip_hdr	access:public
htonl	lwip/core/inet.c	/^htonl(u32_t n)$/;"	f	signature:(u32_t n)
htonl	lwip/include/ipv4/lwip/inet.h	/^#define htonl /;"	d
htonl	lwip/include/ipv4/lwip/inet.h	/^#define htonl(/;"	d
htonl	lwip/include/ipv4/lwip/inet.h	/^#undef htonl$/;"	d
htonl	lwip/include/ipv4/lwip/inet.h	/^u32_t htonl(u32_t x);$/;"	p	signature:(u32_t x)
htonl	lwip/include/ipv6/lwip/inet.h	/^u32_t htonl(u32_t n);$/;"	p	signature:(u32_t n)
htons	lwip/core/inet.c	/^htons(u16_t n)$/;"	f	signature:(u16_t n)
htons	lwip/include/ipv4/lwip/inet.h	/^#define htons /;"	d
htons	lwip/include/ipv4/lwip/inet.h	/^#define htons(/;"	d
htons	lwip/include/ipv4/lwip/inet.h	/^#undef htons$/;"	d
htons	lwip/include/ipv4/lwip/inet.h	/^u16_t htons(u16_t x);$/;"	p	signature:(u16_t x)
htons	lwip/include/ipv6/lwip/inet.h	/^u16_t htons(u16_t n);$/;"	p	signature:(u16_t n)
hwaddr	lwip/include/lwip/netif.h	/^  unsigned char hwaddr[NETIF_MAX_HWADDR_LEN];$/;"	m	struct:netif	access:public
hwaddr_len	lwip/include/lwip/netif.h	/^  unsigned char hwaddr_len;$/;"	m	struct:netif	access:public
i	e100.h	/^            char i      : 1;$/;"	m	struct:op_transmit_cmd_cmd_tag	access:public
i	e100.h	/^            char i :    1;     \/\/ Interrupt after finish$/;"	m	struct:command_block_tag	access:public
i	lwip/netif/ppp/md5.h	/^  u32_t i[2];                   \/* number of _bits_ handled mod 2^64 *\/$/;"	m	struct:__anon29	access:public
i2b	mkfs.c	/^i2b(uint inum)$/;"	f	signature:(uint inum)
ia	e100.h	/^    char ia :       1;$/;"	m	struct:rf_status	access:public
ialloc	defs.h	/^struct inode*   ialloc(uint, short);$/;"	p	signature:(uint, short)
ialloc	fs.c	/^ialloc(uint dev, short type)$/;"	f	signature:(uint dev, short type)
ialloc	mkfs.c	/^ialloc(ushort type)$/;"	f	signature:(ushort type)
ialloc	mkfs.c	/^uint ialloc(ushort type);$/;"	p	file:	signature:(ushort type)
iappend	mkfs.c	/^iappend(uint inum, void *xp, int n)$/;"	f	signature:(uint inum, void *xp, int n)
iappend	mkfs.c	/^void iappend(uint inum, void *p, int n);$/;"	p	file:	signature:(uint inum, void *p, int n)
icache	fs.c	/^} icache;$/;"	v	typeref:struct:__anon2
icmp	lwip/include/lwip/stats.h	/^  struct stats_proto icmp;$/;"	m	struct:stats_	typeref:struct:stats_::stats_proto	access:public
icmp_dest_unreach	lwip/core/ipv4/icmp.c	/^icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)$/;"	f	signature:(struct pbuf *p, enum icmp_dur_type t)
icmp_dest_unreach	lwip/core/ipv6/icmp6.c	/^icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)$/;"	f	signature:(struct pbuf *p, enum icmp_dur_type t)
icmp_dest_unreach	lwip/include/ipv4/lwip/icmp.h	/^void icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t);$/;"	p	signature:(struct pbuf *p, enum icmp_dur_type t)
icmp_dest_unreach	lwip/include/ipv6/lwip/icmp.h	/^void icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t);$/;"	p	signature:(struct pbuf *p, enum icmp_dur_type t)
icmp_dur_hdr	lwip/include/ipv4/lwip/icmp.h	/^struct icmp_dur_hdr {$/;"	s
icmp_dur_hdr	lwip/include/ipv6/lwip/icmp.h	/^struct icmp_dur_hdr {$/;"	s
icmp_dur_hdr::PACK_STRUCT_FIELD	lwip/include/ipv4/lwip/icmp.h	/^  PACK_STRUCT_FIELD(u16_t _type_code);$/;"	p	struct:icmp_dur_hdr	access:public	signature:(u16_t _type_code)
icmp_dur_hdr::PACK_STRUCT_FIELD	lwip/include/ipv4/lwip/icmp.h	/^  PACK_STRUCT_FIELD(u16_t chksum);$/;"	p	struct:icmp_dur_hdr	access:public	signature:(u16_t chksum)
icmp_dur_hdr::PACK_STRUCT_FIELD	lwip/include/ipv4/lwip/icmp.h	/^  PACK_STRUCT_FIELD(u32_t unused);$/;"	p	struct:icmp_dur_hdr	access:public	signature:(u32_t unused)
icmp_dur_hdr::chksum	lwip/include/ipv6/lwip/icmp.h	/^  u16_t chksum;$/;"	m	struct:icmp_dur_hdr	access:public
icmp_dur_hdr::icode	lwip/include/ipv6/lwip/icmp.h	/^  u8_t icode;$/;"	m	struct:icmp_dur_hdr	access:public
icmp_dur_hdr::type	lwip/include/ipv6/lwip/icmp.h	/^  u8_t type;$/;"	m	struct:icmp_dur_hdr	access:public
icmp_dur_hdr::unused	lwip/include/ipv6/lwip/icmp.h	/^  u32_t unused;$/;"	m	struct:icmp_dur_hdr	access:public
icmp_dur_type	lwip/include/ipv4/lwip/icmp.h	/^enum icmp_dur_type {$/;"	g
icmp_dur_type	lwip/include/ipv6/lwip/icmp.h	/^enum icmp_dur_type {$/;"	g
icmp_echo_hdr	lwip/include/ipv4/lwip/icmp.h	/^struct icmp_echo_hdr {$/;"	s
icmp_echo_hdr	lwip/include/ipv6/lwip/icmp.h	/^struct icmp_echo_hdr {$/;"	s
icmp_echo_hdr::PACK_STRUCT_FIELD	lwip/include/ipv4/lwip/icmp.h	/^  PACK_STRUCT_FIELD(u16_t _type_code);$/;"	p	struct:icmp_echo_hdr	access:public	signature:(u16_t _type_code)
icmp_echo_hdr::PACK_STRUCT_FIELD	lwip/include/ipv4/lwip/icmp.h	/^  PACK_STRUCT_FIELD(u16_t chksum);$/;"	p	struct:icmp_echo_hdr	access:public	signature:(u16_t chksum)
icmp_echo_hdr::PACK_STRUCT_FIELD	lwip/include/ipv4/lwip/icmp.h	/^  PACK_STRUCT_FIELD(u16_t id);$/;"	p	struct:icmp_echo_hdr	access:public	signature:(u16_t id)
icmp_echo_hdr::PACK_STRUCT_FIELD	lwip/include/ipv4/lwip/icmp.h	/^  PACK_STRUCT_FIELD(u16_t seqno);$/;"	p	struct:icmp_echo_hdr	access:public	signature:(u16_t seqno)
icmp_echo_hdr::chksum	lwip/include/ipv6/lwip/icmp.h	/^  u16_t chksum;$/;"	m	struct:icmp_echo_hdr	access:public
icmp_echo_hdr::icode	lwip/include/ipv6/lwip/icmp.h	/^  u8_t icode;$/;"	m	struct:icmp_echo_hdr	access:public
icmp_echo_hdr::id	lwip/include/ipv6/lwip/icmp.h	/^  u16_t id;$/;"	m	struct:icmp_echo_hdr	access:public
icmp_echo_hdr::seqno	lwip/include/ipv6/lwip/icmp.h	/^  u16_t seqno;$/;"	m	struct:icmp_echo_hdr	access:public
icmp_echo_hdr::type	lwip/include/ipv6/lwip/icmp.h	/^  u8_t type;$/;"	m	struct:icmp_echo_hdr	access:public
icmp_input	lwip/core/ipv4/icmp.c	/^icmp_input(struct pbuf *p, struct netif *inp)$/;"	f	signature:(struct pbuf *p, struct netif *inp)
icmp_input	lwip/core/ipv6/icmp6.c	/^icmp_input(struct pbuf *p, struct netif *inp)$/;"	f	signature:(struct pbuf *p, struct netif *inp)
icmp_input	lwip/include/ipv4/lwip/icmp.h	/^void icmp_input(struct pbuf *p, struct netif *inp);$/;"	p	signature:(struct pbuf *p, struct netif *inp)
icmp_input	lwip/include/ipv6/lwip/icmp.h	/^void icmp_input(struct pbuf *p, struct netif *inp);$/;"	p	signature:(struct pbuf *p, struct netif *inp)
icmp_te_hdr	lwip/include/ipv4/lwip/icmp.h	/^struct icmp_te_hdr {$/;"	s
icmp_te_hdr	lwip/include/ipv6/lwip/icmp.h	/^struct icmp_te_hdr {$/;"	s
icmp_te_hdr::PACK_STRUCT_FIELD	lwip/include/ipv4/lwip/icmp.h	/^  PACK_STRUCT_FIELD(u16_t _type_code);$/;"	p	struct:icmp_te_hdr	access:public	signature:(u16_t _type_code)
icmp_te_hdr::PACK_STRUCT_FIELD	lwip/include/ipv4/lwip/icmp.h	/^  PACK_STRUCT_FIELD(u16_t chksum);$/;"	p	struct:icmp_te_hdr	access:public	signature:(u16_t chksum)
icmp_te_hdr::PACK_STRUCT_FIELD	lwip/include/ipv4/lwip/icmp.h	/^  PACK_STRUCT_FIELD(u32_t unused);$/;"	p	struct:icmp_te_hdr	access:public	signature:(u32_t unused)
icmp_te_hdr::chksum	lwip/include/ipv6/lwip/icmp.h	/^  u16_t chksum;$/;"	m	struct:icmp_te_hdr	access:public
icmp_te_hdr::icode	lwip/include/ipv6/lwip/icmp.h	/^  u8_t icode;$/;"	m	struct:icmp_te_hdr	access:public
icmp_te_hdr::type	lwip/include/ipv6/lwip/icmp.h	/^  u8_t type;$/;"	m	struct:icmp_te_hdr	access:public
icmp_te_hdr::unused	lwip/include/ipv6/lwip/icmp.h	/^  u32_t unused;$/;"	m	struct:icmp_te_hdr	access:public
icmp_te_type	lwip/include/ipv4/lwip/icmp.h	/^enum icmp_te_type {$/;"	g
icmp_te_type	lwip/include/ipv6/lwip/icmp.h	/^enum icmp_te_type {$/;"	g
icmp_time_exceeded	lwip/core/ipv4/icmp.c	/^icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)$/;"	f	signature:(struct pbuf *p, enum icmp_te_type t)
icmp_time_exceeded	lwip/core/ipv6/icmp6.c	/^icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)$/;"	f	signature:(struct pbuf *p, enum icmp_te_type t)
icmp_time_exceeded	lwip/include/ipv4/lwip/icmp.h	/^void icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t);$/;"	p	signature:(struct pbuf *p, enum icmp_te_type t)
icmp_time_exceeded	lwip/include/ipv6/lwip/icmp.h	/^void icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t);$/;"	p	signature:(struct pbuf *p, enum icmp_te_type t)
icode	lwip/include/ipv6/lwip/icmp.h	/^  u8_t icode;$/;"	m	struct:icmp_dur_hdr	access:public
icode	lwip/include/ipv6/lwip/icmp.h	/^  u8_t icode;$/;"	m	struct:icmp_echo_hdr	access:public
icode	lwip/include/ipv6/lwip/icmp.h	/^  u8_t icode;$/;"	m	struct:icmp_te_hdr	access:public
id	lwip/include/ipv6/lwip/icmp.h	/^  u16_t id;$/;"	m	struct:icmp_echo_hdr	access:public
id	lwip/netif/ppp/chap.h	/^    u_char id;			\/* Current id *\/$/;"	m	struct:chap_state	access:public
id	lwip/netif/ppp/fsm.h	/^    u_char id;				\/* Current id *\/$/;"	m	struct:fsm	access:public
ide_init	defs.h	/^void            ide_init(void);$/;"	p	signature:(void)
ide_init	ide.c	/^ide_init(void)$/;"	f	signature:(void)
ide_intr	defs.h	/^void            ide_intr(void);$/;"	p	signature:(void)
ide_intr	ide.c	/^ide_intr(void)$/;"	f	signature:(void)
ide_lock	ide.c	/^static struct spinlock ide_lock;$/;"	v	typeref:struct:spinlock	file:
ide_queue	ide.c	/^static struct buf *ide_queue;$/;"	v	typeref:struct:buf	file:
ide_rw	defs.h	/^void            ide_rw(struct buf *);$/;"	p	signature:(struct buf *)
ide_rw	ide.c	/^ide_rw(struct buf *b)$/;"	f	signature:(struct buf *b)
ide_start_request	ide.c	/^ide_start_request(struct buf *b)$/;"	f	file:	signature:(struct buf *b)
ide_start_request	ide.c	/^static void ide_start_request();$/;"	p	file:
ide_wait_ready	ide.c	/^ide_wait_ready(int check_error)$/;"	f	file:	signature:(int check_error)
idle_time_limit	lwip/netif/ppp/ppp.h	/^	u_short idle_time_limit; \/* Shut down link if idle for this long *\/$/;"	m	struct:ppp_settings	access:public
idt	trap.c	/^struct gatedesc idt[256];$/;"	v	typeref:struct:gatedesc
idtinit	defs.h	/^void            idtinit(void);$/;"	p	signature:(void)
idtinit	trap.c	/^idtinit(void)$/;"	f	signature:(void)
idup	defs.h	/^struct inode*   idup(struct inode*);$/;"	p	signature:(struct inode*)
idup	fs.c	/^idup(struct inode *ip)$/;"	f	signature:(struct inode *ip)
if_up	lwip/netif/ppp/ppp.c	/^    int  if_up;                         \/* True when the interface is up. *\/$/;"	m	struct:PPPControl_s	file:	access:public
iget	fs.c	/^iget(uint dev, uint inum)$/;"	f	file:	signature:(uint dev, uint inum)
iinit	defs.h	/^void            iinit(void);$/;"	p	signature:(void)
iinit	fs.c	/^iinit(void)$/;"	f	signature:(void)
ilock	defs.h	/^void            ilock(struct inode*);$/;"	p	signature:(struct inode*)
ilock	fs.c	/^ilock(struct inode *ip)$/;"	f	signature:(struct inode *ip)
imcrp	mp.h	/^  uchar imcrp;$/;"	m	struct:mp	access:public
in	lwip/netif/ppp/md5.h	/^  unsigned char in[64];                              \/* input buffer *\/$/;"	m	struct:__anon29	access:public
inACCM	lwip/netif/ppp/ppp.c	/^    ext_accm inACCM;                    \/* Async-Ctl-Char-Map for input. *\/$/;"	m	struct:PPPControl_s	file:	access:public
inEscaped	lwip/netif/ppp/ppp.c	/^    char inEscaped;                     \/* Escape next character. *\/$/;"	m	struct:PPPControl_s	file:	access:public
inFCS	lwip/netif/ppp/ppp.c	/^    u16_t inFCS;                        \/* Input Frame Check Sequence value. *\/$/;"	m	struct:PPPControl_s	file:	access:public
inHead	lwip/netif/ppp/ppp.c	/^    struct pbuf *inHead, *inTail;       \/* The input packet. *\/$/;"	m	struct:PPPControl_s	typeref:struct:PPPControl_s::pbuf	file:	access:public
inProtocol	lwip/netif/ppp/ppp.c	/^    u16_t inProtocol;                   \/* The input protocol code. *\/$/;"	m	struct:PPPControl_s	file:	access:public
inState	lwip/netif/ppp/ppp.c	/^    PPPDevStates inState;               \/* The input process state. *\/$/;"	m	struct:PPPControl_s	file:	access:public
inTail	lwip/netif/ppp/ppp.c	/^    struct pbuf *inHead, *inTail;       \/* The input packet. *\/$/;"	m	struct:PPPControl_s	typeref:struct:PPPControl_s::	file:	access:public
in_addr	lwip/include/ipv4/lwip/ip_addr.h	/^struct in_addr {$/;"	s
in_addr::s_addr	lwip/include/ipv4/lwip/ip_addr.h	/^  u32_t s_addr;$/;"	m	struct:in_addr	access:public
in_range	lwip/core/inet.c	/^#define in_range(/;"	d	file:
inb	x86.h	/^inb(ushort port)$/;"	f	signature:(ushort port)
inet_addr	lwip/core/inet.c	/^ u32_t inet_addr(const char *cp)$/;"	f	signature:(const char *cp)
inet_addr	lwip/include/ipv4/lwip/inet.h	/^u32_t inet_addr(const char *cp);$/;"	p	signature:(const char *cp)
inet_addr	lwip/include/ipv6/lwip/inet.h	/^u32_t inet_addr(const char *cp);$/;"	p	signature:(const char *cp)
inet_aton	lwip/core/inet.c	/^ int inet_aton(const char *cp, struct in_addr *addr)$/;"	f	signature:(const char *cp, struct in_addr *addr)
inet_aton	lwip/include/ipv4/lwip/inet.h	/^int inet_aton(const char *cp, struct in_addr *addr);$/;"	p	signature:(const char *cp, struct in_addr *addr)
inet_aton	lwip/include/ipv6/lwip/inet.h	/^int inet_aton(const char *cp, struct in_addr *addr);$/;"	p	signature:(const char *cp, struct in_addr *addr)
inet_chksum	lwip/core/inet.c	/^inet_chksum(void *dataptr, u16_t len)$/;"	f	signature:(void *dataptr, u16_t len)
inet_chksum	lwip/core/inet6.c	/^inet_chksum(void *dataptr, u16_t len)$/;"	f	signature:(void *dataptr, u16_t len)
inet_chksum	lwip/include/ipv4/lwip/inet.h	/^u16_t inet_chksum(void *dataptr, u16_t len);$/;"	p	signature:(void *dataptr, u16_t len)
inet_chksum	lwip/include/ipv6/lwip/inet.h	/^u16_t inet_chksum(void *data, u16_t len);$/;"	p	signature:(void *data, u16_t len)
inet_chksum_pbuf	lwip/core/inet.c	/^inet_chksum_pbuf(struct pbuf *p)$/;"	f	signature:(struct pbuf *p)
inet_chksum_pbuf	lwip/core/inet6.c	/^inet_chksum_pbuf(struct pbuf *p)$/;"	f	signature:(struct pbuf *p)
inet_chksum_pbuf	lwip/include/ipv4/lwip/inet.h	/^u16_t inet_chksum_pbuf(struct pbuf *p);$/;"	p	signature:(struct pbuf *p)
inet_chksum_pbuf	lwip/include/ipv6/lwip/inet.h	/^u16_t inet_chksum_pbuf(struct pbuf *p);$/;"	p	signature:(struct pbuf *p)
inet_chksum_pseudo	lwip/core/inet.c	/^inet_chksum_pseudo(struct pbuf *p,$/;"	f	signature:(struct pbuf *p, struct ip_addr *src, struct ip_addr *dest, u8_t proto, u16_t proto_len)
inet_chksum_pseudo	lwip/core/inet6.c	/^inet_chksum_pseudo(struct pbuf *p,$/;"	f	signature:(struct pbuf *p, struct ip_addr *src, struct ip_addr *dest, u8_t proto, u32_t proto_len)
inet_chksum_pseudo	lwip/include/ipv4/lwip/inet.h	/^u16_t inet_chksum_pseudo(struct pbuf *p,$/;"	p	signature:(struct pbuf *p, struct ip_addr *src, struct ip_addr *dest, u8_t proto, u16_t proto_len)
inet_chksum_pseudo	lwip/include/ipv6/lwip/inet.h	/^u16_t inet_chksum_pseudo(struct pbuf *p,$/;"	p	signature:(struct pbuf *p, struct ip_addr *src, struct ip_addr *dest, u8_t proto, u32_t proto_len)
inet_ntoa	lwip/core/inet.c	/^char *inet_ntoa(struct in_addr addr)$/;"	f	signature:(struct in_addr addr)
inet_ntoa	lwip/include/ipv4/lwip/inet.h	/^char *inet_ntoa(struct in_addr addr); \/* returns ptr to static buffer; not reentrant! *\/$/;"	p	signature:(struct in_addr addr)
inet_ntoa	lwip/netif/ppp/ipcp.c	/^#define inet_ntoa /;"	d	file:
init	lwip/netif/ppp/ppp.h	/^    void (*init) (int unit);$/;"	m	struct:protent	access:public
initlock	defs.h	/^void            initlock(struct spinlock*, char*);$/;"	p	signature:(struct spinlock*, char*)
initlock	spinlock.c	/^initlock(struct spinlock *lock, char *name)$/;"	f	signature:(struct spinlock *lock, char *name)
initproc	proc.c	/^struct proc *initproc;$/;"	v	typeref:struct:proc
inl	x86.h	/^inl(ushort port)$/;"	f	signature:(ushort port)
ino	stat.h	/^  uint ino;    \/\/ Inode number on device$/;"	m	struct:stat	access:public
inode	fs.c	/^  struct inode inode[NINODE];$/;"	m	struct:__anon2	typeref:struct:__anon2::inode	file:	access:public
inode	fsvar.h	/^struct inode {$/;"	s
inode::addrs	fsvar.h	/^  uint addrs[NADDRS];$/;"	m	struct:inode	access:public
inode::dev	fsvar.h	/^  uint dev;           \/\/ Device number$/;"	m	struct:inode	access:public
inode::flags	fsvar.h	/^  int flags;          \/\/ I_BUSY, I_VALID$/;"	m	struct:inode	access:public
inode::inum	fsvar.h	/^  uint inum;          \/\/ Inode number$/;"	m	struct:inode	access:public
inode::major	fsvar.h	/^  short major;$/;"	m	struct:inode	access:public
inode::minor	fsvar.h	/^  short minor;$/;"	m	struct:inode	access:public
inode::nlink	fsvar.h	/^  short nlink;$/;"	m	struct:inode	access:public
inode::ref	fsvar.h	/^  int ref;            \/\/ Reference count$/;"	m	struct:inode	access:public
inode::size	fsvar.h	/^  uint size;$/;"	m	struct:inode	access:public
inode::type	fsvar.h	/^  short type;         \/\/ copy of disk inode$/;"	m	struct:inode	access:public
inp	lwip/include/lwip/tcpip.h	/^    } inp;$/;"	m	union:tcpip_msg	typeref:struct:tcpip_msg	access:public
input	console.c	/^} input;$/;"	v	typeref:struct:__anon1
input	lwip/include/lwip/netif.h	/^  err_t (* input)(struct pbuf *p, struct netif *inp);$/;"	m	struct:netif	access:public
input	lwip/netif/ppp/ppp.h	/^    void (*input) (int unit, u_char *pkt, int len);$/;"	m	struct:protent	access:public
inseg	lwip/core/tcp_in.c	/^static struct tcp_seg inseg;$/;"	v	typeref:struct:tcp_seg	file:
insl	x86.h	/^insl(int port, void *addr, int cnt)$/;"	f	signature:(int port, void *addr, int cnt)
int_enabled	spinlock.c	/^int int_enabled;$/;"	v
inum	fs.h	/^  ushort inum;$/;"	m	struct:dirent	access:public
inum	fsvar.h	/^  uint inum;          \/\/ Inode number$/;"	m	struct:inode	access:public
inw	x86.h	/^inw(ushort port)$/;"	f	signature:(ushort port)
ioapic	ioapic.c	/^struct ioapic {$/;"	s	file:
ioapic	ioapic.c	/^volatile struct ioapic *ioapic;$/;"	v	typeref:struct:ioapic
ioapic::data	ioapic.c	/^  uint data;$/;"	m	struct:ioapic	file:	access:public
ioapic::pad	ioapic.c	/^  uint pad[3];$/;"	m	struct:ioapic	file:	access:public
ioapic::reg	ioapic.c	/^  uint reg;$/;"	m	struct:ioapic	file:	access:public
ioapic_enable	defs.h	/^void            ioapic_enable(int irq, int cpu);$/;"	p	signature:(int irq, int cpu)
ioapic_enable	ioapic.c	/^ioapic_enable(int irq, int cpunum)$/;"	f	signature:(int irq, int cpunum)
ioapic_id	mp.c	/^uchar ioapic_id;$/;"	v
ioapic_init	defs.h	/^void            ioapic_init(void);$/;"	p	signature:(void)
ioapic_init	ioapic.c	/^ioapic_init(void)$/;"	f	signature:(void)
ioapic_read	ioapic.c	/^ioapic_read(int reg)$/;"	f	file:	signature:(int reg)
ioapic_write	ioapic.c	/^ioapic_write(int reg, uint data)$/;"	f	file:	signature:(int reg, uint data)
iobase	e100.c	/^    uint32_t iobase;$/;"	m	struct:e100_devinfo	file:	access:public
ioctlsocket	lwip/include/lwip/sockets.h	/^#define ioctlsocket(/;"	d
iomb	mmu.h	/^  ushort iomb;       \/\/ I\/O map base address$/;"	m	struct:taskstate	access:public
ip	file.h	/^  struct inode *ip;$/;"	m	struct:file	typeref:struct:file::inode	access:public
ip	lwip/include/lwip/stats.h	/^  struct stats_proto ip;$/;"	m	struct:stats_	typeref:struct:stats_::stats_proto	access:public
ip	lwip/netif/ppp/vjbsdhdr.h	/^struct ip$/;"	s
ip4_addr1	lwip/include/ipv4/lwip/ip_addr.h	/^#define ip4_addr1(/;"	d
ip4_addr2	lwip/include/ipv4/lwip/ip_addr.h	/^#define ip4_addr2(/;"	d
ip4_addr3	lwip/include/ipv4/lwip/ip_addr.h	/^#define ip4_addr3(/;"	d
ip4_addr4	lwip/include/ipv4/lwip/ip_addr.h	/^#define ip4_addr4(/;"	d
ip::ip_dst	lwip/netif/ppp/vjbsdhdr.h	/^	struct	in_addr ip_src,ip_dst;	\/* source and dest address *\/$/;"	m	struct:ip	typeref:struct:ip::	access:public
ip::ip_hl_v	lwip/netif/ppp/vjbsdhdr.h	/^	u_char ip_hl_v;	\/* bug in GCC for mips means the bitfield stuff will sometimes break - so we use a char for both and get round it with macro's instead... *\/$/;"	m	struct:ip	access:public
ip::ip_id	lwip/netif/ppp/vjbsdhdr.h	/^	u_short	ip_id;					\/* identification *\/$/;"	m	struct:ip	access:public
ip::ip_len	lwip/netif/ppp/vjbsdhdr.h	/^	u_short	ip_len;					\/* total length *\/$/;"	m	struct:ip	access:public
ip::ip_off	lwip/netif/ppp/vjbsdhdr.h	/^	u_short	ip_off;					\/* fragment offset field *\/$/;"	m	struct:ip	access:public
ip::ip_p	lwip/netif/ppp/vjbsdhdr.h	/^	u_char	ip_p;					\/* protocol *\/$/;"	m	struct:ip	access:public
ip::ip_src	lwip/netif/ppp/vjbsdhdr.h	/^	struct	in_addr ip_src,ip_dst;	\/* source and dest address *\/$/;"	m	struct:ip	typeref:struct:ip::in_addr	access:public
ip::ip_sum	lwip/netif/ppp/vjbsdhdr.h	/^	u_short	ip_sum;					\/* checksum *\/$/;"	m	struct:ip	access:public
ip::ip_tos	lwip/netif/ppp/vjbsdhdr.h	/^	u_char	ip_tos;					\/* type of service *\/$/;"	m	struct:ip	access:public
ip::ip_ttl	lwip/netif/ppp/vjbsdhdr.h	/^	u_char	ip_ttl;					\/* time to live *\/$/;"	m	struct:ip	access:public
ip_addr	lwip/include/ipv4/lwip/ip_addr.h	/^struct ip_addr {$/;"	s
ip_addr	lwip/include/ipv6/lwip/ip_addr.h	/^struct ip_addr {$/;"	s
ip_addr	lwip/include/lwip/netif.h	/^  struct ip_addr ip_addr;$/;"	m	struct:netif	typeref:struct:netif::ip_addr	access:public
ip_addr::PACK_STRUCT_FIELD	lwip/include/ipv4/lwip/ip_addr.h	/^  PACK_STRUCT_FIELD(u32_t addr);$/;"	p	struct:ip_addr	access:public	signature:(u32_t addr)
ip_addr::addr	lwip/include/ipv6/lwip/ip_addr.h	/^  u32_t addr[4];$/;"	m	struct:ip_addr	access:public
ip_addr_any	lwip/core/ipv4/ip_addr.c	/^const struct ip_addr ip_addr_any = { 0x00000000UL };$/;"	v	typeref:struct:ip_addr
ip_addr_broadcast	lwip/core/ipv4/ip_addr.c	/^const struct ip_addr ip_addr_broadcast = { 0xffffffffUL };$/;"	v	typeref:struct:ip_addr
ip_addr_check	lwip/netif/ppp/auth.c	/^static int  ip_addr_check (u32_t, struct wordlist *);$/;"	p	file:	signature:(u32_t, struct wordlist *)
ip_addr_check	lwip/netif/ppp/auth.c	/^static int ip_addr_check(u32_t addr, struct wordlist *addrs)$/;"	f	file:	signature:(u32_t addr, struct wordlist *addrs)
ip_addr_cmp	lwip/core/ipv6/ip6_addr.c	/^ip_addr_cmp(struct ip_addr *addr1, struct ip_addr *addr2)$/;"	f	signature:(struct ip_addr *addr1, struct ip_addr *addr2)
ip_addr_cmp	lwip/include/ipv4/lwip/ip_addr.h	/^#define ip_addr_cmp(/;"	d
ip_addr_cmp	lwip/include/ipv6/lwip/ip_addr.h	/^int ip_addr_cmp(struct ip_addr *addr1, struct ip_addr *addr2);$/;"	p	signature:(struct ip_addr *addr1, struct ip_addr *addr2)
ip_addr_debug_print	lwip/core/ipv6/ip6_addr.c	/^ip_addr_debug_print(struct ip_addr *addr)$/;"	f	signature:(struct ip_addr *addr)
ip_addr_debug_print	lwip/include/ipv4/lwip/ip_addr.h	/^#define ip_addr_debug_print(/;"	d
ip_addr_debug_print	lwip/include/ipv6/lwip/ip_addr.h	/^void ip_addr_debug_print(struct ip_addr *addr);$/;"	p	signature:(struct ip_addr *addr)
ip_addr_isany	lwip/core/ipv6/ip6_addr.c	/^ip_addr_isany(struct ip_addr *addr)$/;"	f	signature:(struct ip_addr *addr)
ip_addr_isany	lwip/include/ipv4/lwip/ip_addr.h	/^#define ip_addr_isany(/;"	d
ip_addr_isany	lwip/include/ipv6/lwip/ip_addr.h	/^int ip_addr_isany(struct ip_addr *addr);$/;"	p	signature:(struct ip_addr *addr)
ip_addr_isbroadcast	lwip/include/ipv4/lwip/ip_addr.h	/^#define ip_addr_isbroadcast(/;"	d
ip_addr_ismulticast	lwip/include/ipv4/lwip/ip_addr.h	/^#define ip_addr_ismulticast(/;"	d
ip_addr_maskcmp	lwip/core/ipv6/ip6_addr.c	/^ip_addr_maskcmp(struct ip_addr *addr1, struct ip_addr *addr2,$/;"	f	signature:(struct ip_addr *addr1, struct ip_addr *addr2, struct ip_addr *mask)
ip_addr_maskcmp	lwip/include/ipv4/lwip/ip_addr.h	/^#define ip_addr_maskcmp(/;"	d
ip_addr_maskcmp	lwip/include/ipv6/lwip/ip_addr.h	/^int ip_addr_maskcmp(struct ip_addr *addr1, struct ip_addr *addr2,$/;"	p	signature:(struct ip_addr *addr1, struct ip_addr *addr2, struct ip_addr *mask)
ip_addr_set	lwip/core/ipv6/ip6_addr.c	/^ip_addr_set(struct ip_addr *dest, struct ip_addr *src)$/;"	f	signature:(struct ip_addr *dest, struct ip_addr *src)
ip_addr_set	lwip/include/ipv4/lwip/ip_addr.h	/^#define ip_addr_set(/;"	d
ip_addr_set	lwip/include/ipv6/lwip/ip_addr.h	/^void ip_addr_set(struct ip_addr *dest, struct ip_addr *src);$/;"	p	signature:(struct ip_addr *dest, struct ip_addr *src)
ip_debug_print	lwip/core/ipv4/ip.c	/^ip_debug_print(struct pbuf *p)$/;"	f	signature:(struct pbuf *p)
ip_debug_print	lwip/core/ipv6/ip6.c	/^ip_debug_print(struct pbuf *p)$/;"	f	signature:(struct pbuf *p)
ip_debug_print	lwip/include/ipv4/lwip/ip.h	/^void ip_debug_print(struct pbuf *p);$/;"	p	signature:(struct pbuf *p)
ip_debug_print	lwip/include/ipv6/lwip/ip.h	/^void ip_debug_print(struct pbuf *p);$/;"	p	signature:(struct pbuf *p)
ip_dst	lwip/netif/ppp/vjbsdhdr.h	/^	struct	in_addr ip_src,ip_dst;	\/* source and dest address *\/$/;"	m	struct:ip	typeref:struct:ip::	access:public
ip_forward	lwip/core/ipv4/ip.c	/^ip_forward(struct pbuf *p, struct ip_hdr *iphdr, struct netif *inp)$/;"	f	file:	signature:(struct pbuf *p, struct ip_hdr *iphdr, struct netif *inp)
ip_forward	lwip/core/ipv6/ip6.c	/^ip_forward(struct pbuf *p, struct ip_hdr *iphdr)$/;"	f	file:	signature:(struct pbuf *p, struct ip_hdr *iphdr)
ip_frag	lwip/core/ipv4/ip_frag.c	/^ip_frag(struct pbuf *p, struct netif *netif, struct ip_addr *dest)$/;"	f	signature:(struct pbuf *p, struct netif *netif, struct ip_addr *dest)
ip_frag	lwip/include/ipv4/lwip/ip_frag.h	/^err_t ip_frag(struct pbuf *, struct netif *, struct ip_addr *);$/;"	p	signature:(struct pbuf *, struct netif *, struct ip_addr *)
ip_frag	lwip/include/lwip/stats.h	/^  struct stats_proto ip_frag;$/;"	m	struct:stats_	typeref:struct:stats_::stats_proto	access:public
ip_hdr	lwip/include/ipv4/lwip/ip.h	/^struct ip_hdr {$/;"	s
ip_hdr	lwip/include/ipv6/lwip/ip.h	/^struct ip_hdr {$/;"	s
ip_hdr::PACK_STRUCT_FIELD	lwip/include/ipv4/lwip/ip.h	/^  PACK_STRUCT_FIELD(struct ip_addr dest); $/;"	p	struct:ip_hdr	access:public	signature:(struct ip_addr dest)
ip_hdr::PACK_STRUCT_FIELD	lwip/include/ipv4/lwip/ip.h	/^  PACK_STRUCT_FIELD(struct ip_addr src);$/;"	p	struct:ip_hdr	access:public	signature:(struct ip_addr src)
ip_hdr::PACK_STRUCT_FIELD	lwip/include/ipv4/lwip/ip.h	/^  PACK_STRUCT_FIELD(u16_t _chksum);$/;"	p	struct:ip_hdr	access:public	signature:(u16_t _chksum)
ip_hdr::PACK_STRUCT_FIELD	lwip/include/ipv4/lwip/ip.h	/^  PACK_STRUCT_FIELD(u16_t _id);$/;"	p	struct:ip_hdr	access:public	signature:(u16_t _id)
ip_hdr::PACK_STRUCT_FIELD	lwip/include/ipv4/lwip/ip.h	/^  PACK_STRUCT_FIELD(u16_t _len);$/;"	p	struct:ip_hdr	access:public	signature:(u16_t _len)
ip_hdr::PACK_STRUCT_FIELD	lwip/include/ipv4/lwip/ip.h	/^  PACK_STRUCT_FIELD(u16_t _offset);$/;"	p	struct:ip_hdr	access:public	signature:(u16_t _offset)
ip_hdr::PACK_STRUCT_FIELD	lwip/include/ipv4/lwip/ip.h	/^  PACK_STRUCT_FIELD(u16_t _ttl_proto);$/;"	p	struct:ip_hdr	access:public	signature:(u16_t _ttl_proto)
ip_hdr::PACK_STRUCT_FIELD	lwip/include/ipv4/lwip/ip.h	/^  PACK_STRUCT_FIELD(u16_t _v_hl_tos);$/;"	p	struct:ip_hdr	access:public	signature:(u16_t _v_hl_tos)
ip_hdr::dest	lwip/include/ipv6/lwip/ip.h	/^  struct ip_addr src, dest;          \/* source and destination IP addresses *\/$/;"	m	struct:ip_hdr	typeref:struct:ip_hdr::	access:public
ip_hdr::flow1	lwip/include/ipv6/lwip/ip.h	/^  u8_t flow1:4, tclass2:4;  $/;"	m	struct:ip_hdr	access:public
ip_hdr::flow2	lwip/include/ipv6/lwip/ip.h	/^  u16_t flow2;$/;"	m	struct:ip_hdr	access:public
ip_hdr::hoplim	lwip/include/ipv6/lwip/ip.h	/^  u8_t hoplim;              \/* hop limit (TTL) *\/$/;"	m	struct:ip_hdr	access:public
ip_hdr::len	lwip/include/ipv6/lwip/ip.h	/^  u16_t len;                \/* payload length *\/$/;"	m	struct:ip_hdr	access:public
ip_hdr::nexthdr	lwip/include/ipv6/lwip/ip.h	/^  u8_t nexthdr;             \/* next header *\/$/;"	m	struct:ip_hdr	access:public
ip_hdr::src	lwip/include/ipv6/lwip/ip.h	/^  struct ip_addr src, dest;          \/* source and destination IP addresses *\/$/;"	m	struct:ip_hdr	typeref:struct:ip_hdr::ip_addr	access:public
ip_hdr::tclass1	lwip/include/ipv6/lwip/ip.h	/^  u8_t tclass1:4, v:4;$/;"	m	struct:ip_hdr	access:public
ip_hdr::tclass2	lwip/include/ipv6/lwip/ip.h	/^  u8_t flow1:4, tclass2:4;  $/;"	m	struct:ip_hdr	access:public
ip_hdr::v	lwip/include/ipv6/lwip/ip.h	/^  u8_t tclass1:4, v:4;$/;"	m	struct:ip_hdr	access:public
ip_hl_v	lwip/netif/ppp/vjbsdhdr.h	/^	u_char ip_hl_v;	\/* bug in GCC for mips means the bitfield stuff will sometimes break - so we use a char for both and get round it with macro's instead... *\/$/;"	m	struct:ip	access:public
ip_id	lwip/netif/ppp/vjbsdhdr.h	/^	u_short	ip_id;					\/* identification *\/$/;"	m	struct:ip	access:public
ip_init	lwip/core/ipv4/ip.c	/^ip_init(void)$/;"	f	signature:(void)
ip_init	lwip/core/ipv6/ip6.c	/^ip_init(void)$/;"	f	signature:(void)
ip_init	lwip/include/ipv4/lwip/ip.h	/^void ip_init(void);$/;"	p	signature:(void)
ip_init	lwip/include/ipv6/lwip/ip.h	/^void ip_init(void);$/;"	p	signature:(void)
ip_input	lwip/core/ipv4/ip.c	/^ip_input(struct pbuf *p, struct netif *inp) {$/;"	f	signature:(struct pbuf *p, struct netif *inp)
ip_input	lwip/core/ipv6/ip6.c	/^ip_input(struct pbuf *p, struct netif *inp) {$/;"	f	signature:(struct pbuf *p, struct netif *inp)
ip_input	lwip/include/ipv4/lwip/ip.h	/^err_t ip_input(struct pbuf *p, struct netif *inp);$/;"	p	signature:(struct pbuf *p, struct netif *inp)
ip_input	lwip/include/ipv6/lwip/ip.h	/^void ip_input(struct pbuf *p, struct netif *inp);$/;"	p	signature:(struct pbuf *p, struct netif *inp)
ip_len	lwip/netif/ppp/vjbsdhdr.h	/^	u_short	ip_len;					\/* total length *\/$/;"	m	struct:ip	access:public
ip_off	lwip/netif/ppp/vjbsdhdr.h	/^	u_short	ip_off;					\/* fragment offset field *\/$/;"	m	struct:ip	access:public
ip_output	lwip/core/ipv4/ip.c	/^ip_output(struct pbuf *p, struct ip_addr *src, struct ip_addr *dest,$/;"	f	signature:(struct pbuf *p, struct ip_addr *src, struct ip_addr *dest, u8_t ttl, u8_t tos, u8_t proto)
ip_output	lwip/core/ipv6/ip6.c	/^ip_output(struct pbuf *p, struct ip_addr *src, struct ip_addr *dest,$/;"	f	signature:(struct pbuf *p, struct ip_addr *src, struct ip_addr *dest, u8_t ttl, u8_t proto)
ip_output	lwip/include/ipv4/lwip/ip.h	/^err_t ip_output(struct pbuf *p, struct ip_addr *src, struct ip_addr *dest,$/;"	p	signature:(struct pbuf *p, struct ip_addr *src, struct ip_addr *dest, u8_t ttl, u8_t tos, u8_t proto)
ip_output	lwip/include/ipv6/lwip/ip.h	/^err_t ip_output(struct pbuf *p, struct ip_addr *src, struct ip_addr *dest,$/;"	p	signature:(struct pbuf *p, struct ip_addr *src, struct ip_addr *dest, unsigned char ttl, unsigned char proto)
ip_output_if	lwip/core/ipv4/ip.c	/^ip_output_if(struct pbuf *p, struct ip_addr *src, struct ip_addr *dest,$/;"	f	signature:(struct pbuf *p, struct ip_addr *src, struct ip_addr *dest, u8_t ttl, u8_t tos, u8_t proto, struct netif *netif)
ip_output_if	lwip/core/ipv6/ip6.c	/^ip_output_if (struct pbuf *p, struct ip_addr *src, struct ip_addr *dest,$/;"	f	signature:(struct pbuf *p, struct ip_addr *src, struct ip_addr *dest, u8_t ttl, u8_t proto, struct netif *netif)
ip_output_if	lwip/include/ipv4/lwip/ip.h	/^err_t ip_output_if(struct pbuf *p, struct ip_addr *src, struct ip_addr *dest,$/;"	p	signature:(struct pbuf *p, struct ip_addr *src, struct ip_addr *dest, u8_t ttl, u8_t tos, u8_t proto, struct netif *netif)
ip_output_if	lwip/include/ipv6/lwip/ip.h	/^err_t ip_output_if(struct pbuf *p, struct ip_addr *src, struct ip_addr *dest,$/;"	p	signature:(struct pbuf *p, struct ip_addr *src, struct ip_addr *dest, unsigned char ttl, unsigned char proto, struct netif *netif)
ip_p	lwip/netif/ppp/vjbsdhdr.h	/^	u_char	ip_p;					\/* protocol *\/$/;"	m	struct:ip	access:public
ip_reass	lwip/core/ipv4/ip_frag.c	/^ip_reass(struct pbuf *p)$/;"	f	signature:(struct pbuf *p)
ip_reass	lwip/include/ipv4/lwip/ip_frag.h	/^struct pbuf * ip_reass(struct pbuf *);$/;"	p	signature:(struct pbuf *)
ip_reass_timer	lwip/core/ipv4/ip_frag.c	/^ip_reass_timer(void *arg)$/;"	f	file:	signature:(void *arg)
ip_reassbitmap	lwip/core/ipv4/ip_frag.c	/^static u8_t ip_reassbitmap[IP_REASS_BUFSIZE \/ (8 * 8)];$/;"	v	file:
ip_reassbuf	lwip/core/ipv4/ip_frag.c	/^static u8_t ip_reassbuf[IP_HLEN + IP_REASS_BUFSIZE];$/;"	v	file:
ip_reassflags	lwip/core/ipv4/ip_frag.c	/^static u8_t ip_reassflags;$/;"	v	file:
ip_reasslen	lwip/core/ipv4/ip_frag.c	/^static u16_t ip_reasslen;$/;"	v	file:
ip_reasstmr	lwip/core/ipv4/ip_frag.c	/^static u8_t ip_reasstmr;$/;"	v	file:
ip_route	lwip/core/ipv4/ip.c	/^ip_route(struct ip_addr *dest)$/;"	f	signature:(struct ip_addr *dest)
ip_route	lwip/core/ipv6/ip6.c	/^ip_route(struct ip_addr *dest)$/;"	f	signature:(struct ip_addr *dest)
ip_route	lwip/include/ipv4/lwip/ip.h	/^struct netif *ip_route(struct ip_addr *dest);$/;"	p	signature:(struct ip_addr *dest)
ip_route	lwip/include/ipv6/lwip/ip.h	/^struct netif *ip_route(struct ip_addr *dest);$/;"	p	signature:(struct ip_addr *dest)
ip_src	lwip/netif/ppp/vjbsdhdr.h	/^	struct	in_addr ip_src,ip_dst;	\/* source and dest address *\/$/;"	m	struct:ip	typeref:struct:ip::in_addr	access:public
ip_sum	lwip/netif/ppp/vjbsdhdr.h	/^	u_short	ip_sum;					\/* checksum *\/$/;"	m	struct:ip	access:public
ip_tos	lwip/netif/ppp/vjbsdhdr.h	/^	u_char	ip_tos;					\/* type of service *\/$/;"	m	struct:ip	access:public
ip_ttl	lwip/netif/ppp/vjbsdhdr.h	/^	u_char	ip_ttl;					\/* time to live *\/$/;"	m	struct:ip	access:public
ipaddr	lwip/include/lwip/api_msg.h	/^      struct ip_addr *ipaddr;$/;"	m	struct:api_msg_msg	typeref:struct:api_msg_msg::ip_addr	access:public
ipaddr	lwip/netif/etharp.c	/^  struct ip_addr ipaddr;$/;"	m	struct:etharp_entry	typeref:struct:etharp_entry::ip_addr	file:	access:public
ipcp_ackci	lwip/netif/ppp/ipcp.c	/^static int  ipcp_ackci (fsm *, u_char *, int);	\/* Peer ack'd our CI *\/$/;"	p	file:	signature:(fsm *, u_char *, int)
ipcp_ackci	lwip/netif/ppp/ipcp.c	/^static int ipcp_ackci(fsm *f, u_char *p, int len)$/;"	f	file:	signature:(fsm *f, u_char *p, int len)
ipcp_addci	lwip/netif/ppp/ipcp.c	/^static void ipcp_addci (fsm *, u_char *, int *); \/* Add our CI *\/$/;"	p	file:	signature:(fsm *, u_char *, int *)
ipcp_addci	lwip/netif/ppp/ipcp.c	/^static void ipcp_addci(fsm *f, u_char *ucp, int *lenp)$/;"	f	file:	signature:(fsm *f, u_char *ucp, int *lenp)
ipcp_allowoptions	lwip/netif/ppp/ipcp.c	/^ipcp_options ipcp_allowoptions[NUM_PPP];	\/* Options we allow peer to request *\/$/;"	v
ipcp_callbacks	lwip/netif/ppp/ipcp.c	/^static fsm_callbacks ipcp_callbacks = { \/* IPCP callback routines *\/$/;"	v	file:
ipcp_cilen	lwip/netif/ppp/ipcp.c	/^static int  ipcp_cilen (fsm *);	        \/* Return length of our CI *\/$/;"	p	file:	signature:(fsm *)
ipcp_cilen	lwip/netif/ppp/ipcp.c	/^static int ipcp_cilen(fsm *f)$/;"	f	file:	signature:(fsm *f)
ipcp_clear_addrs	lwip/netif/ppp/ipcp.c	/^static void ipcp_clear_addrs (int);$/;"	p	file:	signature:(int)
ipcp_clear_addrs	lwip/netif/ppp/ipcp.c	/^static void ipcp_clear_addrs(int unit)$/;"	f	file:	signature:(int unit)
ipcp_close	lwip/netif/ppp/ipcp.c	/^static void ipcp_close (int, char *);$/;"	p	file:	signature:(int, char *)
ipcp_close	lwip/netif/ppp/ipcp.c	/^static void ipcp_close(int unit, char *reason)$/;"	f	file:	signature:(int unit, char *reason)
ipcp_down	lwip/netif/ppp/ipcp.c	/^static void ipcp_down (fsm *);		\/* We're DOWN *\/$/;"	p	file:	signature:(fsm *)
ipcp_down	lwip/netif/ppp/ipcp.c	/^static void ipcp_down(fsm *f)$/;"	f	file:	signature:(fsm *f)
ipcp_finished	lwip/netif/ppp/ipcp.c	/^static void ipcp_finished (fsm *);	\/* Don't need lower layer *\/$/;"	p	file:	signature:(fsm *)
ipcp_finished	lwip/netif/ppp/ipcp.c	/^static void ipcp_finished(fsm *f)$/;"	f	file:	signature:(fsm *f)
ipcp_fsm	lwip/netif/ppp/ipcp.c	/^fsm ipcp_fsm[NUM_PPP];		\/* IPCP fsm structure *\/$/;"	v
ipcp_gotoptions	lwip/netif/ppp/ipcp.c	/^ipcp_options ipcp_gotoptions[NUM_PPP];	\/* Options that peer ack'd *\/$/;"	v
ipcp_hisoptions	lwip/netif/ppp/ipcp.c	/^ipcp_options ipcp_hisoptions[NUM_PPP];	\/* Options that we ack'd *\/$/;"	v
ipcp_init	lwip/netif/ppp/ipcp.c	/^static void ipcp_init (int);$/;"	p	file:	signature:(int)
ipcp_init	lwip/netif/ppp/ipcp.c	/^static void ipcp_init(int unit)$/;"	f	file:	signature:(int unit)
ipcp_input	lwip/netif/ppp/ipcp.c	/^static void ipcp_input (int, u_char *, int);$/;"	p	file:	signature:(int, u_char *, int)
ipcp_input	lwip/netif/ppp/ipcp.c	/^static void ipcp_input(int unit, u_char *p, int len)$/;"	f	file:	signature:(int unit, u_char *p, int len)
ipcp_lowerdown	lwip/netif/ppp/ipcp.c	/^static void ipcp_lowerdown (int);$/;"	p	file:	signature:(int)
ipcp_lowerdown	lwip/netif/ppp/ipcp.c	/^static void ipcp_lowerdown(int unit)$/;"	f	file:	signature:(int unit)
ipcp_lowerup	lwip/netif/ppp/ipcp.c	/^static void ipcp_lowerup (int);$/;"	p	file:	signature:(int)
ipcp_lowerup	lwip/netif/ppp/ipcp.c	/^static void ipcp_lowerup(int unit)$/;"	f	file:	signature:(int unit)
ipcp_nakci	lwip/netif/ppp/ipcp.c	/^static int  ipcp_nakci (fsm *, u_char *, int);	\/* Peer nak'd our CI *\/$/;"	p	file:	signature:(fsm *, u_char *, int)
ipcp_nakci	lwip/netif/ppp/ipcp.c	/^static int ipcp_nakci(fsm *f, u_char *p, int len)$/;"	f	file:	signature:(fsm *f, u_char *p, int len)
ipcp_open	lwip/netif/ppp/ipcp.c	/^static void ipcp_open (int);$/;"	p	file:	signature:(int)
ipcp_open	lwip/netif/ppp/ipcp.c	/^static void ipcp_open(int unit)$/;"	f	file:	signature:(int unit)
ipcp_options	lwip/netif/ppp/ipcp.h	/^typedef struct ipcp_options {$/;"	s
ipcp_options	lwip/netif/ppp/ipcp.h	/^} ipcp_options;$/;"	t	typeref:struct:ipcp_options
ipcp_options::accept_local	lwip/netif/ppp/ipcp.h	/^    u_int accept_local : 1;		\/* accept peer's value for ouraddr *\/$/;"	m	struct:ipcp_options	access:public
ipcp_options::accept_remote	lwip/netif/ppp/ipcp.h	/^    u_int accept_remote : 1;		\/* accept peer's value for hisaddr *\/$/;"	m	struct:ipcp_options	access:public
ipcp_options::cflag	lwip/netif/ppp/ipcp.h	/^    u_char cflag;				\/* VJ slot compression flag. *\/$/;"	m	struct:ipcp_options	access:public
ipcp_options::default_route	lwip/netif/ppp/ipcp.h	/^    u_int default_route : 1;		\/* Assign default route through interface? *\/$/;"	m	struct:ipcp_options	access:public
ipcp_options::dnsaddr	lwip/netif/ppp/ipcp.h	/^    u32_t dnsaddr[2];		\/* Primary and secondary MS DNS entries *\/$/;"	m	struct:ipcp_options	access:public
ipcp_options::hisaddr	lwip/netif/ppp/ipcp.h	/^    u32_t ouraddr, hisaddr;	\/* Addresses in NETWORK BYTE ORDER *\/$/;"	m	struct:ipcp_options	access:public
ipcp_options::maxslotindex	lwip/netif/ppp/ipcp.h	/^    u_char maxslotindex;		\/* VJ slots - 1. *\/$/;"	m	struct:ipcp_options	access:public
ipcp_options::neg_addr	lwip/netif/ppp/ipcp.h	/^    u_int neg_addr : 1;			\/* Negotiate IP Address? *\/$/;"	m	struct:ipcp_options	access:public
ipcp_options::neg_vj	lwip/netif/ppp/ipcp.h	/^    u_int neg_vj : 1;				\/* Van Jacobson Compression? *\/$/;"	m	struct:ipcp_options	access:public
ipcp_options::old_addrs	lwip/netif/ppp/ipcp.h	/^    u_int old_addrs : 1;			\/* Use old (IP-Addresses) option? *\/$/;"	m	struct:ipcp_options	access:public
ipcp_options::old_vj	lwip/netif/ppp/ipcp.h	/^    u_int old_vj : 1;				\/* use old (short) form of VJ option? *\/$/;"	m	struct:ipcp_options	access:public
ipcp_options::ouraddr	lwip/netif/ppp/ipcp.h	/^    u32_t ouraddr, hisaddr;	\/* Addresses in NETWORK BYTE ORDER *\/$/;"	m	struct:ipcp_options	access:public
ipcp_options::proxy_arp	lwip/netif/ppp/ipcp.h	/^    u_int proxy_arp : 1;			\/* Make proxy ARP entry for peer? *\/$/;"	m	struct:ipcp_options	access:public
ipcp_options::req_addr	lwip/netif/ppp/ipcp.h	/^    u_int req_addr : 1;			\/* Ask peer to send IP address? *\/$/;"	m	struct:ipcp_options	access:public
ipcp_options::req_dns1	lwip/netif/ppp/ipcp.h	/^    u_int req_dns1 : 1;			\/* Ask peer to send primary DNS address? *\/$/;"	m	struct:ipcp_options	access:public
ipcp_options::req_dns2	lwip/netif/ppp/ipcp.h	/^    u_int req_dns2 : 1;			\/* Ask peer to send secondary DNS address? *\/$/;"	m	struct:ipcp_options	access:public
ipcp_options::vj_protocol	lwip/netif/ppp/ipcp.h	/^    u_short vj_protocol;		\/* protocol value to use in VJ option *\/$/;"	m	struct:ipcp_options	access:public
ipcp_options::winsaddr	lwip/netif/ppp/ipcp.h	/^    u32_t winsaddr[2];		\/* Primary and secondary MS WINS entries *\/$/;"	m	struct:ipcp_options	access:public
ipcp_protent	lwip/netif/ppp/ipcp.c	/^struct protent ipcp_protent = {$/;"	v	typeref:struct:protent
ipcp_protrej	lwip/netif/ppp/ipcp.c	/^static void ipcp_protrej (int);$/;"	p	file:	signature:(int)
ipcp_protrej	lwip/netif/ppp/ipcp.c	/^static void ipcp_protrej(int unit)$/;"	f	file:	signature:(int unit)
ipcp_rejci	lwip/netif/ppp/ipcp.c	/^static int  ipcp_rejci (fsm *, u_char *, int);	\/* Peer rej'd our CI *\/$/;"	p	file:	signature:(fsm *, u_char *, int)
ipcp_rejci	lwip/netif/ppp/ipcp.c	/^static int ipcp_rejci(fsm *f, u_char *p, int len)$/;"	f	file:	signature:(fsm *f, u_char *p, int len)
ipcp_reqci	lwip/netif/ppp/ipcp.c	/^static int  ipcp_reqci (fsm *, u_char *, int *, int); \/* Rcv CI *\/$/;"	p	file:	signature:(fsm *, u_char *, int *, int)
ipcp_reqci	lwip/netif/ppp/ipcp.c	/^static int ipcp_reqci($/;"	f	file:	signature:( fsm *f, u_char *inp, int *len, int reject_if_disagree )
ipcp_resetci	lwip/netif/ppp/ipcp.c	/^static void ipcp_resetci (fsm *);	\/* Reset our CI *\/$/;"	p	file:	signature:(fsm *)
ipcp_resetci	lwip/netif/ppp/ipcp.c	/^static void ipcp_resetci(fsm *f)$/;"	f	file:	signature:(fsm *f)
ipcp_up	lwip/netif/ppp/ipcp.c	/^static void ipcp_up (fsm *);		\/* We're UP *\/$/;"	p	file:	signature:(fsm *)
ipcp_up	lwip/netif/ppp/ipcp.c	/^static void ipcp_up(fsm *f)$/;"	f	file:	signature:(fsm *f)
ipcp_wantoptions	lwip/netif/ppp/ipcp.c	/^ipcp_options ipcp_wantoptions[NUM_PPP];	\/* Options that we want to request *\/$/;"	v
iphdr	lwip/core/tcp_in.c	/^static struct ip_hdr *iphdr;$/;"	v	typeref:struct:ip_hdr	file:
iput	defs.h	/^void            iput(struct inode*);$/;"	p	signature:(struct inode*)
iput	fs.c	/^iput(struct inode *ip)$/;"	f	signature:(struct inode *ip)
iref	usertests.c	/^iref(void)$/;"	f	signature:(void)
irq	e100.c	/^    int irq;$/;"	m	struct:e100_devinfo	file:	access:public
irq_handler	picirq.c	/^irq_handler_t irq_handler[IRQ_MAX];$/;"	v
irq_handler_t	picirq.h	/^typedef void (*irq_handler_t)(struct trapframe *);$/;"	t
irq_line	pci.h	/^    uint8_t irq_line;$/;"	m	struct:pci_func	access:public
irqmask	picirq.c	/^static ushort irqmask = 0xFFFF & ~(1<<IRQ_SLAVE);$/;"	v	file:
isascii	lwip/core/inet.c	/^#define isascii(/;"	d	file:
isdigit	lwip/core/inet.c	/^#define isdigit(/;"	d	file:
isdirempty	sysfile.c	/^isdirempty(struct inode *dp)$/;"	f	file:	signature:(struct inode *dp)
islower	lwip/core/inet.c	/^#define islower(/;"	d	file:
ismp	mp.c	/^int ismp;$/;"	v
isspace	lwip/core/inet.c	/^#define isspace(/;"	d	file:
isxdigit	lwip/core/inet.c	/^#define isxdigit(/;"	d	file:
itoa	httpd.c	/^itoa(int val, char *data)$/;"	f	signature:(int val, char *data)
itrunc	fs.c	/^itrunc(struct inode *ip)$/;"	f	file:	signature:(struct inode *ip)
itrunc	fs.c	/^static void itrunc(struct inode*);$/;"	p	file:	signature:(struct inode*)
iunlock	defs.h	/^void            iunlock(struct inode*);$/;"	p	signature:(struct inode*)
iunlock	fs.c	/^iunlock(struct inode *ip)$/;"	f	signature:(struct inode *ip)
iunlockput	defs.h	/^void            iunlockput(struct inode*);$/;"	p	signature:(struct inode*)
iunlockput	fs.c	/^iunlockput(struct inode *ip)$/;"	f	signature:(struct inode *ip)
iupdate	defs.h	/^void            iupdate(struct inode*);$/;"	p	signature:(struct inode*)
iupdate	fs.c	/^iupdate(struct inode *ip)$/;"	f	signature:(struct inode *ip)
kalloc	defs.h	/^char*           kalloc(int);$/;"	p	signature:(int)
kalloc	kalloc.c	/^kalloc(int n)$/;"	f	signature:(int n)
kalloc_lock	kalloc.c	/^struct spinlock kalloc_lock;$/;"	v	typeref:struct:spinlock
kbd_getc	kbd.c	/^kbd_getc(void)$/;"	f	signature:(void)
kbd_intr	defs.h	/^void            kbd_intr(void);$/;"	p	signature:(void)
kbd_intr	kbd.c	/^kbd_intr(void)$/;"	f	signature:(void)
keep_cnt	lwip/include/lwip/tcp.h	/^  u8_t keep_cnt;$/;"	m	struct:tcp_pcb	access:public
keepalive	lwip/include/lwip/tcp.h	/^  u32_t keepalive;$/;"	m	struct:tcp_pcb	access:public
key1	pci.c	/^    uint32_t key1, key2;$/;"	m	struct:pci_driver	file:	access:public
key2	pci.c	/^    uint32_t key1, key2;$/;"	m	struct:pci_driver	file:	access:public
kfree	defs.h	/^void            kfree(char*, int);$/;"	p	signature:(char*, int)
kfree	kalloc.c	/^kfree(char *v, int len)$/;"	f	signature:(char *v, int len)
kill	defs.h	/^int             kill(int);$/;"	p	signature:(int)
kill	proc.c	/^kill(int pid)$/;"	f	signature:(int pid)
kill	user.h	/^int kill(int);$/;"	p	signature:(int)
kill_link	lwip/netif/ppp/ppp.c	/^    int  kill_link;                     \/* Shut the link down. *\/$/;"	m	struct:PPPControl_s	file:	access:public
killed	proc.h	/^  int killed;               \/\/ If non-zero, have been killed$/;"	m	struct:proc	access:public
kinit	defs.h	/^void            kinit(void);$/;"	p	signature:(void)
kinit	kalloc.c	/^kinit(void)$/;"	f	signature:(void)
kmalloc	defs.h	/^void*           kmalloc(int);$/;"	p	signature:(int)
kmalloc	kalloc.c	/^kmalloc(int n)$/;"	f	signature:(int n)
kmfree	defs.h	/^void            kmfree(void*, int);$/;"	p	signature:(void*, int)
kmfree	kalloc.c	/^kmfree(void *p, int n)$/;"	f	signature:(void *p, int n)
kproc_free	thread.c	/^void kproc_free(kproc_t thread)$/;"	f	signature:(kproc_t thread)
kproc_free	thread.h	/^void kproc_free(kproc_t thread);$/;"	p	signature:(kproc_t thread)
kproc_start	thread.c	/^kproc_t kproc_start(void (* proc)(void *arg), $/;"	f	signature:(void (* proc)(void *arg), void *arg, int prio, void *data, char *name)
kproc_start	thread.h	/^kproc_t kproc_start(void (* proc)(void *arg), $/;"	p	signature:(void (* proc)(void *arg), void *arg, int prio, void *data, char *name)
kproc_t	thread.h	/^typedef struct thread * kproc_t;$/;"	t	typeref:struct:thread
kstack	proc.h	/^  char *kstack;             \/\/ Bottom of kernel stack for this process$/;"	m	struct:proc	access:public
l_linger	lwip/include/lwip/sockets.h	/^       int l_linger;               \/* linger time *\/$/;"	m	struct:linger	access:public
l_onoff	lwip/include/lwip/sockets.h	/^       int l_onoff;                \/* option on\/off *\/$/;"	m	struct:linger	access:public
lapic	lapic.c	/^volatile uint *lapic;  \/\/ Initialized in mp.c$/;"	v
lapic_disableintr	defs.h	/^void            lapic_disableintr(void);$/;"	p	signature:(void)
lapic_enableintr	defs.h	/^void            lapic_enableintr(void);$/;"	p	signature:(void)
lapic_eoi	defs.h	/^void            lapic_eoi(void);$/;"	p	signature:(void)
lapic_eoi	lapic.c	/^lapic_eoi(void)$/;"	f	signature:(void)
lapic_init	defs.h	/^void            lapic_init(int);$/;"	p	signature:(int)
lapic_init	lapic.c	/^lapic_init(int c)$/;"	f	signature:(int c)
lapic_startap	defs.h	/^void            lapic_startap(uchar, uint);$/;"	p	signature:(uchar, uint)
lapic_startap	lapic.c	/^lapic_startap(uchar apicid, uint addr)$/;"	f	signature:(uchar apicid, uint addr)
lapic_timerinit	defs.h	/^void            lapic_timerinit(void);$/;"	p	signature:(void)
lapic_timerintr	defs.h	/^void            lapic_timerintr(void);$/;"	p	signature:(void)
lapicaddr	mp.h	/^  uint *lapicaddr;              \/\/ address of local APIC$/;"	m	struct:mpconf	access:public
lastXMit	lwip/netif/ppp/ppp.c	/^    u_long lastXMit;                    \/* Time of last transmission. *\/$/;"	m	struct:PPPControl_s	file:	access:public
last_cs	lwip/netif/ppp/vj.h	/^    struct cstate *last_cs;	\/* most recently used tstate *\/$/;"	m	struct:vjcompress	typeref:struct:vjcompress::cstate	access:public
last_recv	lwip/netif/ppp/vj.h	/^    u_char last_recv;		\/* last rcvd conn. id *\/$/;"	m	struct:vjcompress	access:public
last_xmit	lwip/netif/ppp/vj.h	/^    u_char last_xmit;		\/* last sent conn. id *\/$/;"	m	struct:vjcompress	access:public
lastack	lwip/include/lwip/tcp.h	/^  u32_t lastack; \/* Highest acknowledged seqno. *\/$/;"	m	struct:tcp_pcb	access:public
lastdata	lwip/api/sockets.c	/^  struct netbuf *lastdata;$/;"	m	struct:lwip_socket	typeref:struct:lwip_socket::netbuf	file:	access:public
lastoffset	lwip/api/sockets.c	/^  u16_t lastoffset;$/;"	m	struct:lwip_socket	file:	access:public
lcp_ackci	lwip/netif/ppp/lcp.c	/^static int  lcp_ackci (fsm*, u_char*, int);\/* Peer ack'd our CI *\/$/;"	p	file:	signature:(fsm*, u_char*, int)
lcp_ackci	lwip/netif/ppp/lcp.c	/^static int lcp_ackci(fsm *f, u_char *p, int len)$/;"	f	file:	signature:(fsm *f, u_char *p, int len)
lcp_addci	lwip/netif/ppp/lcp.c	/^static void lcp_addci (fsm*, u_char*, int*);       \/* Add our CI to pkt *\/$/;"	p	file:	signature:(fsm*, u_char*, int*)
lcp_addci	lwip/netif/ppp/lcp.c	/^static void lcp_addci(fsm *f, u_char *ucp, int *lenp)$/;"	f	file:	signature:(fsm *f, u_char *ucp, int *lenp)
lcp_allowoptions	lwip/netif/ppp/lcp.c	/^lcp_options lcp_allowoptions[NUM_PPP];	\/* Options we allow peer to request *\/$/;"	v
lcp_callbacks	lwip/netif/ppp/lcp.c	/^static fsm_callbacks lcp_callbacks = {	\/* LCP callback routines *\/$/;"	v	file:
lcp_cilen	lwip/netif/ppp/lcp.c	/^static int  lcp_cilen (fsm*);		        \/* Return length of our CI *\/$/;"	p	file:	signature:(fsm*)
lcp_cilen	lwip/netif/ppp/lcp.c	/^static int lcp_cilen(fsm *f)$/;"	f	file:	signature:(fsm *f)
lcp_close	lwip/netif/ppp/lcp.c	/^void lcp_close(int unit, char *reason)$/;"	f	signature:(int unit, char *reason)
lcp_close	lwip/netif/ppp/lcp.h	/^void lcp_close (int, char *);$/;"	p	signature:(int, char *)
lcp_down	lwip/netif/ppp/lcp.c	/^static void lcp_down (fsm*);	    	    \/* We're DOWN *\/$/;"	p	file:	signature:(fsm*)
lcp_down	lwip/netif/ppp/lcp.c	/^static void lcp_down(fsm *f)$/;"	f	file:	signature:(fsm *f)
lcp_echo_fails	lwip/netif/ppp/lcp.c	/^static u_int	 lcp_echo_fails = LCP_MAXECHOFAILS; \/* Tolerance to unanswered echo-requests *\/$/;"	v	file:
lcp_echo_interval	lwip/netif/ppp/lcp.c	/^static u_int	 lcp_echo_interval = LCP_ECHOINTERVAL; \/* Interval between LCP echo-requests *\/$/;"	v	file:
lcp_echo_lowerdown	lwip/netif/ppp/lcp.c	/^static void lcp_echo_lowerdown (int unit)$/;"	f	file:	signature:(int unit)
lcp_echo_lowerdown	lwip/netif/ppp/lcp.c	/^static void lcp_echo_lowerdown (int);$/;"	p	file:	signature:(int)
lcp_echo_lowerup	lwip/netif/ppp/lcp.c	/^static void lcp_echo_lowerup (int unit)$/;"	f	file:	signature:(int unit)
lcp_echo_lowerup	lwip/netif/ppp/lcp.c	/^static void lcp_echo_lowerup (int);$/;"	p	file:	signature:(int)
lcp_echo_number	lwip/netif/ppp/lcp.c	/^static u32_t lcp_echo_number   = 0;	\/* ID number of next echo frame *\/$/;"	v	file:
lcp_echo_timer_running	lwip/netif/ppp/lcp.c	/^static u32_t lcp_echo_timer_running = 0;  \/* TRUE if a timer is running *\/$/;"	v	file:
lcp_echos_pending	lwip/netif/ppp/lcp.c	/^static u32_t lcp_echos_pending = 0;	\/* Number of outstanding echo msgs *\/$/;"	v	file:
lcp_extcode	lwip/netif/ppp/lcp.c	/^static int  lcp_extcode (fsm*, int, u_char, u_char*, int);$/;"	p	file:	signature:(fsm*, int, u_char, u_char*, int)
lcp_extcode	lwip/netif/ppp/lcp.c	/^static int lcp_extcode(fsm *f, int code, u_char id, u_char *inp, int len)$/;"	f	file:	signature:(fsm *f, int code, u_char id, u_char *inp, int len)
lcp_finished	lwip/netif/ppp/lcp.c	/^static void lcp_finished (fsm*);	        \/* We need lower layer down *\/$/;"	p	file:	signature:(fsm*)
lcp_finished	lwip/netif/ppp/lcp.c	/^static void lcp_finished(fsm *f)$/;"	f	file:	signature:(fsm *f)
lcp_fsm	lwip/netif/ppp/lcp.c	/^static fsm lcp_fsm[NUM_PPP];			\/* LCP fsm structure (global)*\/$/;"	v	file:
lcp_gotoptions	lwip/netif/ppp/lcp.c	/^lcp_options lcp_gotoptions[NUM_PPP];	\/* Options that peer ack'd *\/$/;"	v
lcp_hisoptions	lwip/netif/ppp/lcp.c	/^lcp_options lcp_hisoptions[NUM_PPP];	\/* Options that we ack'd *\/$/;"	v
lcp_init	lwip/netif/ppp/lcp.c	/^void lcp_init(int unit)$/;"	f	signature:(int unit)
lcp_init	lwip/netif/ppp/lcp.h	/^void lcp_init (int);$/;"	p	signature:(int)
lcp_input	lwip/netif/ppp/lcp.c	/^static void lcp_input (int, u_char *, int);$/;"	p	file:	signature:(int, u_char *, int)
lcp_input	lwip/netif/ppp/lcp.c	/^static void lcp_input(int unit, u_char *p, int len)$/;"	f	file:	signature:(int unit, u_char *p, int len)
lcp_loopbackfail	lwip/netif/ppp/lcp.c	/^int lcp_loopbackfail = DEFLOOPBACKFAIL;$/;"	v
lcp_lowerdown	lwip/netif/ppp/lcp.c	/^void lcp_lowerdown(int unit)$/;"	f	signature:(int unit)
lcp_lowerdown	lwip/netif/ppp/lcp.h	/^void lcp_lowerdown (int);$/;"	p	signature:(int)
lcp_lowerup	lwip/netif/ppp/lcp.c	/^void lcp_lowerup(int unit)$/;"	f	signature:(int unit)
lcp_lowerup	lwip/netif/ppp/lcp.h	/^void lcp_lowerup (int);$/;"	p	signature:(int)
lcp_nakci	lwip/netif/ppp/lcp.c	/^static int  lcp_nakci (fsm*, u_char*, int);\/* Peer nak'd our CI *\/$/;"	p	file:	signature:(fsm*, u_char*, int)
lcp_nakci	lwip/netif/ppp/lcp.c	/^static int lcp_nakci(fsm *f, u_char *p, int len)$/;"	f	file:	signature:(fsm *f, u_char *p, int len)
lcp_open	lwip/netif/ppp/lcp.c	/^void lcp_open(int unit)$/;"	f	signature:(int unit)
lcp_open	lwip/netif/ppp/lcp.h	/^void lcp_open (int);$/;"	p	signature:(int)
lcp_options	lwip/netif/ppp/lcp.h	/^typedef struct lcp_options {$/;"	s
lcp_options	lwip/netif/ppp/lcp.h	/^} lcp_options;$/;"	t	typeref:struct:lcp_options
lcp_options::asyncmap	lwip/netif/ppp/lcp.h	/^    u32_t asyncmap;			\/* Value of async map *\/$/;"	m	struct:lcp_options	access:public
lcp_options::chap_mdtype	lwip/netif/ppp/lcp.h	/^    u_char chap_mdtype;			\/* which MD type (hashing algorithm) *\/$/;"	m	struct:lcp_options	access:public
lcp_options::endpoint	lwip/netif/ppp/lcp.h	/^    struct epdisc endpoint;	\/* endpoint discriminator *\/$/;"	m	struct:lcp_options	typeref:struct:lcp_options::epdisc	access:public
lcp_options::lqr_period	lwip/netif/ppp/lcp.h	/^    u32_t lqr_period;		\/* Reporting period for LQR 1\/100ths second *\/$/;"	m	struct:lcp_options	access:public
lcp_options::magicnumber	lwip/netif/ppp/lcp.h	/^    u32_t magicnumber;$/;"	m	struct:lcp_options	access:public
lcp_options::mrru	lwip/netif/ppp/lcp.h	/^    u_short mrru;			\/* Value of MRRU, and multilink enable *\/$/;"	m	struct:lcp_options	access:public
lcp_options::mru	lwip/netif/ppp/lcp.h	/^    u_short mru;			\/* Value of MRU *\/$/;"	m	struct:lcp_options	access:public
lcp_options::neg_accompression	lwip/netif/ppp/lcp.h	/^    u_int neg_accompression : 1;	\/* HDLC Address\/Control Field Compression? *\/$/;"	m	struct:lcp_options	access:public
lcp_options::neg_asyncmap	lwip/netif/ppp/lcp.h	/^    u_int neg_asyncmap : 1;		\/* Negotiate the async map? *\/$/;"	m	struct:lcp_options	access:public
lcp_options::neg_cbcp	lwip/netif/ppp/lcp.h	/^    u_int neg_cbcp : 1;			\/* Negotiate use of CBCP *\/$/;"	m	struct:lcp_options	access:public
lcp_options::neg_chap	lwip/netif/ppp/lcp.h	/^    u_int neg_chap : 1;			\/* Ask for CHAP authentication? *\/$/;"	m	struct:lcp_options	access:public
lcp_options::neg_endpoint	lwip/netif/ppp/lcp.h	/^    u_int neg_endpoint : 1;		\/* Negotiate endpoint discriminator *\/$/;"	m	struct:lcp_options	access:public
lcp_options::neg_lqr	lwip/netif/ppp/lcp.h	/^    u_int neg_lqr : 1;			\/* Negotiate use of Link Quality Reports *\/$/;"	m	struct:lcp_options	access:public
lcp_options::neg_magicnumber	lwip/netif/ppp/lcp.h	/^    u_int neg_magicnumber : 1;	\/* Ask for magic number? *\/$/;"	m	struct:lcp_options	access:public
lcp_options::neg_mrru	lwip/netif/ppp/lcp.h	/^    u_int neg_mrru : 1;			\/* Negotiate multilink MRRU *\/$/;"	m	struct:lcp_options	access:public
lcp_options::neg_mru	lwip/netif/ppp/lcp.h	/^    u_int neg_mru : 1;			\/* Negotiate the MRU? *\/$/;"	m	struct:lcp_options	access:public
lcp_options::neg_pcompression	lwip/netif/ppp/lcp.h	/^    u_int neg_pcompression : 1;	\/* HDLC Protocol Field Compression? *\/$/;"	m	struct:lcp_options	access:public
lcp_options::neg_ssnhf	lwip/netif/ppp/lcp.h	/^    u_int neg_ssnhf : 1;		\/* Negotiate short sequence numbers *\/$/;"	m	struct:lcp_options	access:public
lcp_options::neg_upap	lwip/netif/ppp/lcp.h	/^    u_int neg_upap : 1;			\/* Ask for UPAP authentication? *\/$/;"	m	struct:lcp_options	access:public
lcp_options::numloops	lwip/netif/ppp/lcp.h	/^    int numloops;				\/* Number of loops during magic number neg. *\/$/;"	m	struct:lcp_options	access:public
lcp_options::passive	lwip/netif/ppp/lcp.h	/^    u_int passive : 1;			\/* Don't die if we don't get a response *\/$/;"	m	struct:lcp_options	access:public
lcp_options::restart	lwip/netif/ppp/lcp.h	/^    u_int restart : 1;			\/* Restart vs. exit after close *\/$/;"	m	struct:lcp_options	access:public
lcp_options::silent	lwip/netif/ppp/lcp.h	/^    u_int silent : 1;				\/* Wait for the other end to start first *\/$/;"	m	struct:lcp_options	access:public
lcp_phase	lwip/netif/ppp/lcp.c	/^LinkPhase lcp_phase[NUM_PPP];			\/* Phase of link session (RFC 1661) *\/$/;"	v
lcp_protent	lwip/netif/ppp/lcp.c	/^struct protent lcp_protent = {$/;"	v	typeref:struct:protent
lcp_protrej	lwip/netif/ppp/lcp.c	/^static void lcp_protrej (int);$/;"	p	file:	signature:(int)
lcp_protrej	lwip/netif/ppp/lcp.c	/^static void lcp_protrej(int unit)$/;"	f	file:	signature:(int unit)
lcp_received_echo_reply	lwip/netif/ppp/lcp.c	/^static void lcp_received_echo_reply (fsm *f, int id, u_char *inp, int len)$/;"	f	file:	signature:(fsm *f, int id, u_char *inp, int len)
lcp_received_echo_reply	lwip/netif/ppp/lcp.c	/^static void lcp_received_echo_reply (fsm*, int, u_char*, int);$/;"	p	file:	signature:(fsm*, int, u_char*, int)
lcp_rejci	lwip/netif/ppp/lcp.c	/^static int  lcp_rejci (fsm*, u_char*, int);\/* Peer rej'd our CI *\/$/;"	p	file:	signature:(fsm*, u_char*, int)
lcp_rejci	lwip/netif/ppp/lcp.c	/^static int lcp_rejci(fsm *f, u_char *p, int len)$/;"	f	file:	signature:(fsm *f, u_char *p, int len)
lcp_reqci	lwip/netif/ppp/lcp.c	/^static int  lcp_reqci (fsm*, u_char*, int*, int);  \/* Rcv peer CI *\/$/;"	p	file:	signature:(fsm*, u_char*, int*, int)
lcp_reqci	lwip/netif/ppp/lcp.c	/^static int lcp_reqci(fsm *f, $/;"	f	file:	signature:(fsm *f, u_char *inp, int *lenp, int reject_if_disagree)
lcp_resetci	lwip/netif/ppp/lcp.c	/^static void lcp_resetci (fsm*);	        \/* Reset our CI *\/$/;"	p	file:	signature:(fsm*)
lcp_resetci	lwip/netif/ppp/lcp.c	/^static void lcp_resetci(fsm *f)$/;"	f	file:	signature:(fsm *f)
lcp_rprotrej	lwip/netif/ppp/lcp.c	/^static void lcp_rprotrej (fsm*, u_char*, int);$/;"	p	file:	signature:(fsm*, u_char*, int)
lcp_rprotrej	lwip/netif/ppp/lcp.c	/^static void lcp_rprotrej(fsm *f, u_char *inp, int len)$/;"	f	file:	signature:(fsm *f, u_char *inp, int len)
lcp_sprotrej	lwip/netif/ppp/lcp.c	/^void lcp_sprotrej(int unit, u_char *p, int len)$/;"	f	signature:(int unit, u_char *p, int len)
lcp_sprotrej	lwip/netif/ppp/lcp.h	/^void lcp_sprotrej (int, u_char *, int);	\/* send protocol reject *\/$/;"	p	signature:(int, u_char *, int)
lcp_starting	lwip/netif/ppp/lcp.c	/^static void lcp_starting (fsm*);   	    \/* We need lower layer up *\/$/;"	p	file:	signature:(fsm*)
lcp_starting	lwip/netif/ppp/lcp.c	/^static void lcp_starting(fsm *f)$/;"	f	file:	signature:(fsm *f)
lcp_up	lwip/netif/ppp/lcp.c	/^static void lcp_up (fsm*);		            \/* We're UP *\/$/;"	p	file:	signature:(fsm*)
lcp_up	lwip/netif/ppp/lcp.c	/^static void lcp_up(fsm *f)$/;"	f	file:	signature:(fsm *f)
lcp_wantoptions	lwip/netif/ppp/lcp.c	/^lcp_options lcp_wantoptions[NUM_PPP];	\/* Options that we want to request *\/$/;"	v
ldt	mmu.h	/^  ushort ldt;$/;"	m	struct:taskstate	access:public
left	sh.c	/^  struct cmd *left;$/;"	m	struct:listcmd	typeref:struct:listcmd::cmd	file:	access:public
left	sh.c	/^  struct cmd *left;$/;"	m	struct:pipecmd	typeref:struct:pipecmd::cmd	file:	access:public
len	kalloc.c	/^  int len; \/\/ bytes$/;"	m	struct:run	file:	access:public
len	lwip/include/ipv6/lwip/ip.h	/^  u16_t len;                \/* payload length *\/$/;"	m	struct:ip_hdr	access:public
len	lwip/include/lwip/api_msg.h	/^      u16_t len;$/;"	m	struct:api_msg_msg	access:public
len	lwip/include/lwip/api_msg.h	/^    u16_t len;$/;"	m	union:api_msg_msg	access:public
len	lwip/include/lwip/pbuf.h	/^  u16_t len;  $/;"	m	struct:pbuf	access:public
len	lwip/include/lwip/tcp.h	/^  u16_t len;               \/* the TCP length of this segment *\/$/;"	m	struct:tcp_seg	access:public
lenerr	lwip/include/lwip/stats.h	/^  u16_t lenerr;  \/* Invalid length error. *\/$/;"	m	struct:stats_proto	access:public
length	mp.h	/^  uchar length;                 \/\/ 1$/;"	m	struct:mp	access:public
length	mp.h	/^  ushort length;                \/\/ total table length$/;"	m	struct:mpconf	access:public
lfree	lwip/core/mem.c	/^static struct mem *lfree;   \/* pointer to the lowest free block *\/$/;"	v	typeref:struct:mem	file:
lgdt	x86.h	/^lgdt(struct segdesc *p, int size)$/;"	f	signature:(struct segdesc *p, int size)
lidt	x86.h	/^lidt(struct gatedesc *p, int size)$/;"	f	signature:(struct gatedesc *p, int size)
lim_15_0	mmu.h	/^  uint lim_15_0 : 16;  \/\/ Low bits of segment limit$/;"	m	struct:segdesc	access:public
lim_19_16	mmu.h	/^  uint lim_19_16 : 4;  \/\/ High bits of segment limit$/;"	m	struct:segdesc	access:public
line	httpd.c	/^char **line;$/;"	v
linepos	httpd.c	/^int linepos = 0;$/;"	v
lineptr	httpd.c	/^int lineptr = 0;$/;"	v
linger	lwip/include/lwip/sockets.h	/^struct linger {$/;"	s
linger::l_linger	lwip/include/lwip/sockets.h	/^       int l_linger;               \/* linger time *\/$/;"	m	struct:linger	access:public
linger::l_onoff	lwip/include/lwip/sockets.h	/^       int l_onoff;                \/* option on\/off *\/$/;"	m	struct:linger	access:public
link	e100.h	/^    struct command_block_tag * link;$/;"	m	struct:command_block_tag	typeref:struct:command_block_tag::command_block_tag	access:public
link	lwip/include/lwip/stats.h	/^  struct stats_proto link;$/;"	m	struct:stats_	typeref:struct:stats_::stats_proto	access:public
link	mmu.h	/^  uint link;         \/\/ Old ts selector$/;"	m	struct:taskstate	access:public
link	user.h	/^int link(char*, char*);$/;"	p	signature:(char*, char*)
linkStatusCB	lwip/netif/ppp/ppp.c	/^    void (*linkStatusCB)(void *ctx, int errCode, void *arg);$/;"	m	struct:PPPControl_s	file:	access:public
linkStatusCtx	lwip/netif/ppp/ppp.c	/^    void *linkStatusCtx;$/;"	m	struct:PPPControl_s	file:	access:public
link_down	lwip/netif/ppp/auth.c	/^void link_down(int unit)$/;"	f	signature:(int unit)
link_down	lwip/netif/ppp/auth.h	/^void link_down (int);			\/* the LCP layer has left the Opened state *\/$/;"	p	signature:(int)
link_established	lwip/netif/ppp/auth.c	/^void link_established(int unit)$/;"	f	signature:(int unit)
link_established	lwip/netif/ppp/auth.h	/^void link_established (int);	\/* the link is up; authenticate now *\/$/;"	p	signature:(int)
link_required	lwip/netif/ppp/auth.c	/^void link_required(int unit)$/;"	f	signature:(int unit)
link_required	lwip/netif/ppp/auth.h	/^void link_required (int);		\/* we are starting to use the link *\/$/;"	p	signature:(int)
link_terminated	lwip/netif/ppp/auth.c	/^void link_terminated(int unit)$/;"	f	signature:(int unit)
link_terminated	lwip/netif/ppp/auth.h	/^void link_terminated (int);	\/* we are finished with the link *\/$/;"	p	signature:(int)
linkoutput	lwip/include/lwip/netif.h	/^  err_t (* linkoutput)(struct netif *netif, struct pbuf *p);$/;"	m	struct:netif	access:public
linktest	usertests.c	/^linktest(void)$/;"	f	signature:(void)
listcmd	sh.c	/^listcmd(struct cmd *left, struct cmd *right)$/;"	f	signature:(struct cmd *left, struct cmd *right)
listcmd	sh.c	/^struct listcmd {$/;"	s	file:
listcmd::left	sh.c	/^  struct cmd *left;$/;"	m	struct:listcmd	typeref:struct:listcmd::cmd	file:	access:public
listcmd::right	sh.c	/^  struct cmd *right;$/;"	m	struct:listcmd	typeref:struct:listcmd::cmd	file:	access:public
listcmd::type	sh.c	/^  int type;$/;"	m	struct:listcmd	file:	access:public
listen	lwip/include/lwip/sockets.h	/^#define listen(/;"	d
listen	user.h	/^int listen(int s, int backlog);$/;"	p	signature:(int s, int backlog)
listen_pcbs	lwip/include/lwip/tcp.h	/^	struct tcp_pcb_listen *listen_pcbs; $/;"	m	union:tcp_listen_pcbs_t	typeref:struct:tcp_listen_pcbs_t::tcp_pcb_listen	access:public
local_port	lwip/include/lwip/tcp.h	/^  u16_t local_port; $/;"	m	struct:tcp_pcb_listen	access:public
local_port	lwip/include/lwip/tcp.h	/^  u16_t local_port;$/;"	m	struct:tcp_pcb	access:public
local_port	lwip/include/lwip/udp.h	/^  u16_t local_port, remote_port;$/;"	m	struct:udp_pcb	access:public
lock	console.c	/^  struct spinlock lock;$/;"	m	struct:__anon1	typeref:struct:__anon1::spinlock	file:	access:public
lock	fs.c	/^  struct spinlock lock;$/;"	m	struct:__anon2	typeref:struct:__anon2::spinlock	file:	access:public
lock	lwip/xv6/arch/sys_arch.c	/^    struct spinlock lock;$/;"	m	struct:mbox	typeref:struct:mbox::spinlock	file:	access:public
lock	pipe.c	/^  struct spinlock lock;$/;"	m	struct:pipe	typeref:struct:pipe::spinlock	file:	access:public
lock	sem.c	/^    struct spinlock lock;$/;"	m	struct:sem	typeref:struct:sem::spinlock	file:	access:public
locked	spinlock.h	/^  uint locked;   \/\/ Is the lock held?$/;"	m	struct:spinlock	access:public
locks	proc.h	/^  struct spinlock *locks[MAX_LOCKS];$/;"	m	struct:cpu	typeref:struct:cpu::spinlock	access:public
logged_in	lwip/netif/ppp/auth.c	/^static int logged_in;$/;"	v	file:
logout	lwip/netif/ppp/auth.c	/^static void logout (void);$/;"	p	file:	signature:(void)
logout	lwip/netif/ppp/auth.c	/^static void logout(void)$/;"	f	file:	signature:(void)
loopif_init	lwip/include/netif/loopif.h	/^err_t loopif_init(struct netif *netif);$/;"	p	signature:(struct netif *netif)
loopif_init	lwip/netif/loopif.c	/^loopif_init(struct netif *netif)$/;"	f	signature:(struct netif *netif)
loopif_input	lwip/netif/loopif.c	/^loopif_input( void * arg )$/;"	f	file:	signature:( void * arg )
loopif_output	lwip/netif/loopif.c	/^loopif_output(struct netif *netif, struct pbuf *p,$/;"	f	file:	signature:(struct netif *netif, struct pbuf *p, struct ip_addr *ipaddr)
low_level_init	lwip/netif/ethernetif.c	/^low_level_init(struct netif *netif)$/;"	f	file:	signature:(struct netif *netif)
low_level_input	lwip/netif/ethernetif.c	/^low_level_input(struct ethernetif *ethernetif)$/;"	f	file:	signature:(struct ethernetif *ethernetif)
low_level_output	lwip/netif/ethernetif.c	/^low_level_output(struct ethernetif *ethernetif, struct pbuf *p)$/;"	f	file:	signature:(struct ethernetif *ethernetif, struct pbuf *p)
low_level_output_wrap	lwip/netif/ethernetif.c	/^low_level_output_wrap(struct netif *netif, struct pbuf *p)$/;"	f	file:	signature:(struct netif *netif, struct pbuf *p)
lowerdown	lwip/netif/ppp/ppp.h	/^    void (*lowerdown) (int unit);$/;"	m	struct:protent	access:public
lowerup	lwip/netif/ppp/ppp.h	/^    void (*lowerup) (int unit);$/;"	m	struct:protent	access:public
lpt_putc	console.c	/^lpt_putc(int c)$/;"	f	file:	signature:(int c)
lqr_period	lwip/netif/ppp/lcp.h	/^    u32_t lqr_period;		\/* Reporting period for LQR 1\/100ths second *\/$/;"	m	struct:lcp_options	access:public
ls	ls.c	/^ls(char *path)$/;"	f	signature:(char *path)
ltr	x86.h	/^ltr(ushort sel)$/;"	f	signature:(ushort sel)
lwip_accept	lwip/api/sockets.c	/^lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)$/;"	f	signature:(int s, struct sockaddr *addr, socklen_t *addrlen)
lwip_accept	lwip/include/lwip/sockets.h	/^int lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen);$/;"	p	signature:(int s, struct sockaddr *addr, socklen_t *addrlen)
lwip_bind	lwip/api/sockets.c	/^lwip_bind(int s, struct sockaddr *name, socklen_t namelen)$/;"	f	signature:(int s, struct sockaddr *name, socklen_t namelen)
lwip_bind	lwip/include/lwip/sockets.h	/^int lwip_bind(int s, struct sockaddr *name, socklen_t namelen);$/;"	p	signature:(int s, struct sockaddr *name, socklen_t namelen)
lwip_chksum	lwip/core/inet.c	/^lwip_chksum(void *dataptr, int len)$/;"	f	file:	signature:(void *dataptr, int len)
lwip_close	lwip/api/sockets.c	/^lwip_close(int s)$/;"	f	signature:(int s)
lwip_close	lwip/include/lwip/sockets.h	/^int lwip_close(int s);$/;"	p	signature:(int s)
lwip_connect	lwip/api/sockets.c	/^lwip_connect(int s, struct sockaddr *name, socklen_t namelen)$/;"	f	signature:(int s, struct sockaddr *name, socklen_t namelen)
lwip_connect	lwip/include/lwip/sockets.h	/^int lwip_connect(int s, struct sockaddr *name, socklen_t namelen);$/;"	p	signature:(int s, struct sockaddr *name, socklen_t namelen)
lwip_event	lwip/include/lwip/tcp.h	/^enum lwip_event {$/;"	g
lwip_getpeername	lwip/api/sockets.c	/^int lwip_getpeername (int s, struct sockaddr *name, socklen_t *namelen)$/;"	f	signature:(int s, struct sockaddr *name, socklen_t *namelen)
lwip_getpeername	lwip/include/lwip/sockets.h	/^int lwip_getpeername (int s, struct sockaddr *name, socklen_t *namelen);$/;"	p	signature:(int s, struct sockaddr *name, socklen_t *namelen)
lwip_getsockname	lwip/api/sockets.c	/^int lwip_getsockname (int s, struct sockaddr *name, socklen_t *namelen)$/;"	f	signature:(int s, struct sockaddr *name, socklen_t *namelen)
lwip_getsockname	lwip/include/lwip/sockets.h	/^int lwip_getsockname (int s, struct sockaddr *name, socklen_t *namelen);$/;"	p	signature:(int s, struct sockaddr *name, socklen_t *namelen)
lwip_getsockopt	lwip/api/sockets.c	/^int lwip_getsockopt (int s, int level, int optname, void *optval, socklen_t *optlen)$/;"	f	signature:(int s, int level, int optname, void *optval, socklen_t *optlen)
lwip_getsockopt	lwip/include/lwip/sockets.h	/^int lwip_getsockopt (int s, int level, int optname, void *optval, socklen_t *optlen);$/;"	p	signature:(int s, int level, int optname, void *optval, socklen_t *optlen)
lwip_ioctl	lwip/api/sockets.c	/^int lwip_ioctl(int s, long cmd, void *argp)$/;"	f	signature:(int s, long cmd, void *argp)
lwip_ioctl	lwip/include/lwip/sockets.h	/^int lwip_ioctl(int s, long cmd, void *argp);$/;"	p	signature:(int s, long cmd, void *argp)
lwip_listen	lwip/api/sockets.c	/^lwip_listen(int s, int backlog)$/;"	f	signature:(int s, int backlog)
lwip_listen	lwip/include/lwip/sockets.h	/^int lwip_listen(int s, int backlog);$/;"	p	signature:(int s, int backlog)
lwip_read	lwip/api/sockets.c	/^lwip_read(int s, void *mem, int len)$/;"	f	signature:(int s, void *mem, int len)
lwip_read	lwip/include/lwip/sockets.h	/^int lwip_read(int s, void *mem, int len);$/;"	p	signature:(int s, void *mem, int len)
lwip_recv	lwip/api/sockets.c	/^lwip_recv(int s, void *mem, int len, unsigned int flags)$/;"	f	signature:(int s, void *mem, int len, unsigned int flags)
lwip_recv	lwip/include/lwip/sockets.h	/^int lwip_recv(int s, void *mem, int len, unsigned int flags);$/;"	p	signature:(int s, void *mem, int len, unsigned int flags)
lwip_recvfrom	lwip/api/sockets.c	/^lwip_recvfrom(int s, void *mem, int len, unsigned int flags,$/;"	f	signature:(int s, void *mem, int len, unsigned int flags, struct sockaddr *from, socklen_t *fromlen)
lwip_recvfrom	lwip/include/lwip/sockets.h	/^int lwip_recvfrom(int s, void *mem, int len, unsigned int flags,$/;"	p	signature:(int s, void *mem, int len, unsigned int flags, struct sockaddr *from, socklen_t *fromlen)
lwip_select	lwip/api/sockets.c	/^lwip_select(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset,$/;"	f	signature:(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset, struct timeval *timeout)
lwip_select	lwip/include/lwip/sockets.h	/^int lwip_select(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset,$/;"	p	signature:(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset, struct timeval *timeout)
lwip_select_cb	lwip/api/sockets.c	/^struct lwip_select_cb$/;"	s	file:
lwip_select_cb::exceptset	lwip/api/sockets.c	/^    fd_set *exceptset;$/;"	m	struct:lwip_select_cb	file:	access:public
lwip_select_cb::next	lwip/api/sockets.c	/^    struct lwip_select_cb *next;$/;"	m	struct:lwip_select_cb	typeref:struct:lwip_select_cb::lwip_select_cb	file:	access:public
lwip_select_cb::readset	lwip/api/sockets.c	/^    fd_set *readset;$/;"	m	struct:lwip_select_cb	file:	access:public
lwip_select_cb::sem	lwip/api/sockets.c	/^    sys_sem_t sem;$/;"	m	struct:lwip_select_cb	file:	access:public
lwip_select_cb::sem_signalled	lwip/api/sockets.c	/^    int sem_signalled;$/;"	m	struct:lwip_select_cb	file:	access:public
lwip_select_cb::writeset	lwip/api/sockets.c	/^    fd_set *writeset;$/;"	m	struct:lwip_select_cb	file:	access:public
lwip_selscan	lwip/api/sockets.c	/^lwip_selscan(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset)$/;"	f	file:	signature:(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset)
lwip_send	lwip/api/sockets.c	/^lwip_send(int s, void *data, int size, unsigned int flags)$/;"	f	signature:(int s, void *data, int size, unsigned int flags)
lwip_send	lwip/include/lwip/sockets.h	/^int lwip_send(int s, void *dataptr, int size, unsigned int flags);$/;"	p	signature:(int s, void *dataptr, int size, unsigned int flags)
lwip_sendto	lwip/api/sockets.c	/^lwip_sendto(int s, void *data, int size, unsigned int flags,$/;"	f	signature:(int s, void *data, int size, unsigned int flags, struct sockaddr *to, socklen_t tolen)
lwip_sendto	lwip/include/lwip/sockets.h	/^int lwip_sendto(int s, void *dataptr, int size, unsigned int flags,$/;"	p	signature:(int s, void *dataptr, int size, unsigned int flags, struct sockaddr *to, socklen_t tolen)
lwip_setsockopt	lwip/api/sockets.c	/^int lwip_setsockopt (int s, int level, int optname, const void *optval, socklen_t optlen)$/;"	f	signature:(int s, int level, int optname, const void *optval, socklen_t optlen)
lwip_setsockopt	lwip/include/lwip/sockets.h	/^int lwip_setsockopt (int s, int level, int optname, const void *optval, socklen_t optlen);$/;"	p	signature:(int s, int level, int optname, const void *optval, socklen_t optlen)
lwip_shutdown	lwip/api/sockets.c	/^int lwip_shutdown(int s, int how)$/;"	f	signature:(int s, int how)
lwip_shutdown	lwip/include/lwip/sockets.h	/^int lwip_shutdown(int s, int how);$/;"	p	signature:(int s, int how)
lwip_socket	lwip/api/sockets.c	/^lwip_socket(int domain, int type, int protocol)$/;"	f	signature:(int domain, int type, int protocol)
lwip_socket	lwip/api/sockets.c	/^struct lwip_socket {$/;"	s	file:
lwip_socket	lwip/include/lwip/sockets.h	/^int lwip_socket(int domain, int type, int protocol);$/;"	p	signature:(int domain, int type, int protocol)
lwip_socket::conn	lwip/api/sockets.c	/^  struct netconn *conn;$/;"	m	struct:lwip_socket	typeref:struct:lwip_socket::netconn	file:	access:public
lwip_socket::err	lwip/api/sockets.c	/^  int err;$/;"	m	struct:lwip_socket	file:	access:public
lwip_socket::flags	lwip/api/sockets.c	/^  u16_t  flags;$/;"	m	struct:lwip_socket	file:	access:public
lwip_socket::lastdata	lwip/api/sockets.c	/^  struct netbuf *lastdata;$/;"	m	struct:lwip_socket	typeref:struct:lwip_socket::netbuf	file:	access:public
lwip_socket::lastoffset	lwip/api/sockets.c	/^  u16_t lastoffset;$/;"	m	struct:lwip_socket	file:	access:public
lwip_socket::rcvevent	lwip/api/sockets.c	/^  u16_t rcvevent;$/;"	m	struct:lwip_socket	file:	access:public
lwip_socket::sendevent	lwip/api/sockets.c	/^  u16_t sendevent;$/;"	m	struct:lwip_socket	file:	access:public
lwip_stats	lwip/core/stats.c	/^struct stats_ lwip_stats;$/;"	v	typeref:struct:stats_
lwip_strerr	lwip/api/err.c	/^lwip_strerr(err_t err)$/;"	f	signature:(err_t err)
lwip_strerr	lwip/include/lwip/err.h	/^#define lwip_strerr(/;"	d
lwip_strerr	lwip/include/lwip/err.h	/^extern char *lwip_strerr(err_t err);$/;"	p	signature:(err_t err)
lwip_tcp_event	lwip/include/lwip/tcp.h	/^err_t lwip_tcp_event(void *arg, struct tcp_pcb *pcb,$/;"	p	signature:(void *arg, struct tcp_pcb *pcb, enum lwip_event, struct pbuf *p, u16_t size, err_t err)
lwip_write	lwip/api/sockets.c	/^lwip_write(int s, void *data, int size)$/;"	f	signature:(int s, void *data, int size)
lwip_write	lwip/include/lwip/sockets.h	/^int lwip_write(int s, void *dataptr, int size);$/;"	p	signature:(int s, void *dataptr, int size)
m	e100.h	/^    char m : 1;$/;"	m	struct:scb_command_word	access:public
macaddr	e100.c	/^    char macaddr[6];$/;"	m	struct:e100_devinfo	file:	access:public
machine	elf.h	/^  ushort machine;$/;"	m	struct:elfhdr	access:public
magic	elf.h	/^  uint magic;  \/\/ must equal ELF_MAGIC$/;"	m	struct:elfhdr	access:public
magic	lwip/netif/ppp/magic.c	/^u32_t magic()$/;"	f
magic	lwip/netif/ppp/magic.h	/^u32_t magic(void);  \/* Returns the next magic number *\/$/;"	p	signature:(void)
magicInit	lwip/netif/ppp/magic.c	/^void magicInit()$/;"	f
magicInit	lwip/netif/ppp/magic.h	/^void magicInit(void);   \/* Initialize the magic number generator *\/$/;"	p	signature:(void)
magicnumber	lwip/netif/ppp/lcp.h	/^    u32_t magicnumber;$/;"	m	struct:lcp_options	access:public
main	cat.c	/^main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	echo.c	/^main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	forktest.c	/^main(void)$/;"	f	signature:(void)
main	grep.c	/^main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	httpd.c	/^int main()$/;"	f
main	init.c	/^main(void)$/;"	f	signature:(void)
main	kill.c	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	ln.c	/^main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	ls.c	/^main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	main.c	/^main(void)$/;"	f	signature:(void)
main	mkdir.c	/^main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	mkfs.c	/^main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	rm.c	/^main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	sh.c	/^main(void)$/;"	f	signature:(void)
main	tcpecho.c	/^int main()$/;"	f
main	uptime.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	usertests.c	/^main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	wc.c	/^main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	zombie.c	/^main(void)$/;"	f	signature:(void)
major	fs.h	/^  short major;          \/\/ Major device number (T_DEV only)$/;"	m	struct:dinode	access:public
major	fsvar.h	/^  short major;$/;"	m	struct:inode	access:public
malloc	umalloc.c	/^malloc(uint nbytes)$/;"	f	signature:(uint nbytes)
malloc	user.h	/^void* malloc(uint);$/;"	p	signature:(uint)
match	grep.c	/^int match(char*, char*);$/;"	p	file:	signature:(char*, char*)
match	grep.c	/^match(char *re, char *text)$/;"	f	signature:(char *re, char *text)
matchhere	grep.c	/^int matchhere(char *re, char *text)$/;"	f	signature:(char *re, char *text)
matchhere	grep.c	/^int matchhere(char*, char*);$/;"	p	file:	signature:(char*, char*)
matchstar	grep.c	/^int matchstar(int c, char *re, char *text)$/;"	f	signature:(int c, char *re, char *text)
matchstar	grep.c	/^int matchstar(int, char*, char*);$/;"	p	file:	signature:(int, char*, char*)
max	lwip/include/lwip/stats.h	/^  mem_size_t max;  $/;"	m	struct:stats_mem	access:public
max	lwip/include/lwip/stats.h	/^  u16_t max;  $/;"	m	struct:stats_pbuf	access:public
max	lwip/include/lwip/stats.h	/^  u16_t max;$/;"	m	struct:stats_syselem	access:public
maxSlotIndex	lwip/netif/ppp/vj.h	/^    u_char maxSlotIndex;$/;"	m	struct:vjcompress	access:public
max_transmits	lwip/netif/ppp/chap.h	/^    int max_transmits;		\/* Maximum # of challenge transmissions *\/$/;"	m	struct:chap_state	access:public
maxconfreqtransmits	lwip/netif/ppp/fsm.h	/^    int maxconfreqtransmits;\/* Maximum Configure-Request transmissions *\/$/;"	m	struct:fsm	access:public
maxconnect	lwip/netif/ppp/ppp.h	/^	int  maxconnect;         \/* Maximum connect time (seconds) *\/$/;"	m	struct:ppp_settings	access:public
maxnakloops	lwip/netif/ppp/fsm.h	/^    int maxnakloops;		\/* Maximum number of nak loops tolerated *\/$/;"	m	struct:fsm	access:public
maxslotindex	lwip/netif/ppp/ipcp.h	/^    u_char maxslotindex;		\/* VJ slots - 1. *\/$/;"	m	struct:ipcp_options	access:public
maxtermtransmits	lwip/netif/ppp/fsm.h	/^    int maxtermtransmits;	\/* Maximum Terminate-Request transmissions *\/$/;"	m	struct:fsm	access:public
mbox	lwip/api/tcpip.c	/^static sys_mbox_t mbox;$/;"	v	file:
mbox	lwip/include/lwip/api.h	/^  sys_mbox_t mbox;$/;"	m	struct:netconn	access:public
mbox	lwip/include/lwip/api_msg.h	/^    sys_mbox_t mbox;$/;"	m	union:api_msg_msg	access:public
mbox	lwip/include/lwip/stats.h	/^  struct stats_syselem mbox;$/;"	m	struct:stats_sys	typeref:struct:stats_sys::stats_syselem	access:public
mbox	lwip/xv6/arch/sys_arch.c	/^struct mbox {$/;"	s	file:
mbox::count	lwip/xv6/arch/sys_arch.c	/^    int count, head, next;$/;"	m	struct:mbox	file:	access:public
mbox::free	lwip/xv6/arch/sys_arch.c	/^    sys_sem_t free, queued;$/;"	m	struct:mbox	file:	access:public
mbox::head	lwip/xv6/arch/sys_arch.c	/^    int count, head, next;$/;"	m	struct:mbox	file:	access:public
mbox::lock	lwip/xv6/arch/sys_arch.c	/^    struct spinlock lock;$/;"	m	struct:mbox	typeref:struct:mbox::spinlock	file:	access:public
mbox::next	lwip/xv6/arch/sys_arch.c	/^    int count, head, next;$/;"	m	struct:mbox	file:	access:public
mbox::queued	lwip/xv6/arch/sys_arch.c	/^    sys_sem_t free, queued;$/;"	m	struct:mbox	file:	access:public
mbox::slots	lwip/xv6/arch/sys_arch.c	/^    void *slots[NSLOTS];$/;"	m	struct:mbox	file:	access:public
mdi	e100.h	/^    char mdi  : 1;$/;"	m	struct:scb_status_word	access:public
mem	lwip/core/mem.c	/^struct mem {$/;"	s	file:
mem	lwip/include/lwip/stats.h	/^  struct stats_mem mem;$/;"	m	struct:stats_	typeref:struct:stats_::stats_mem	access:public
mem	proc.h	/^  char *mem;                \/\/ Start of process memory (kernel address)$/;"	m	struct:proc	access:public
mem	usertests.c	/^mem(void)$/;"	f	signature:(void)
mem::next	lwip/core/mem.c	/^  mem_size_t next, prev;$/;"	m	struct:mem	file:	access:public
mem::prev	lwip/core/mem.c	/^  mem_size_t next, prev;$/;"	m	struct:mem	file:	access:public
mem::used	lwip/core/mem.c	/^  u16_t used;$/;"	m	struct:mem	file:	access:public
mem::used	lwip/core/mem.c	/^  u32_t used;$/;"	m	struct:mem	file:	access:public
mem::used	lwip/core/mem.c	/^  u64_t used;$/;"	m	struct:mem	file:	access:public
mem::used	lwip/core/mem.c	/^  u8_t used;$/;"	m	struct:mem	file:	access:public
mem_free	lwip/core/mem.c	/^mem_free(void *rmem)$/;"	f	signature:(void *rmem)
mem_free	lwip/include/lwip/mem.h	/^void mem_free(void *mem);$/;"	p	signature:(void *mem)
mem_init	lwip/core/mem.c	/^mem_init(void)$/;"	f	signature:(void)
mem_init	lwip/include/lwip/mem.h	/^void mem_init(void);$/;"	p	signature:(void)
mem_malloc	lwip/core/mem.c	/^mem_malloc(mem_size_t size)$/;"	f	signature:(mem_size_t size)
mem_malloc	lwip/include/lwip/mem.h	/^void *mem_malloc(mem_size_t size);$/;"	p	signature:(mem_size_t size)
mem_ptr_t	lwip/xv6/arch/cc.h	/^typedef unsigned int mem_ptr_t;$/;"	t
mem_realloc	lwip/core/mem.c	/^mem_realloc(void *rmem, mem_size_t newsize)$/;"	f	signature:(void *rmem, mem_size_t newsize)
mem_realloc	lwip/include/lwip/mem.h	/^void *mem_realloc(void *mem, mem_size_t size);$/;"	p	signature:(void *mem, mem_size_t size)
mem_reallocm	lwip/core/mem.c	/^mem_reallocm(void *rmem, mem_size_t newsize)$/;"	f	signature:(void *rmem, mem_size_t newsize)
mem_reallocm	lwip/include/lwip/mem.h	/^void *mem_reallocm(void *mem, mem_size_t size);$/;"	p	signature:(void *mem, mem_size_t size)
mem_sem	lwip/core/mem.c	/^static sys_sem_t mem_sem;$/;"	v	file:
mem_size_t	lwip/include/lwip/mem.h	/^typedef u16_t mem_size_t;$/;"	t
mem_size_t	lwip/include/lwip/mem.h	/^typedef u32_t mem_size_t;$/;"	t
memcmp	defs.h	/^int             memcmp(const void*, const void*, uint);$/;"	p	signature:(const void*, const void*, uint)
memcmp	string.c	/^memcmp(const void *v1, const void *v2, uint n)$/;"	f	signature:(const void *v1, const void *v2, uint n)
memcpy	defs.h	/^void*           memcpy(void *dst, const void *src, uint n);$/;"	p	signature:(void *dst, const void *src, uint n)
memcpy	string.c	/^memcpy(void *dst, const void *src, uint n)$/;"	f	signature:(void *dst, const void *src, uint n)
memerr	lwip/include/lwip/stats.h	/^  u16_t memerr;  \/* Out of memory error. *\/$/;"	m	struct:stats_proto	access:public
memmove	defs.h	/^void*           memmove(void*, const void*, uint);$/;"	p	signature:(void*, const void*, uint)
memmove	string.c	/^memmove(void *dst, const void *src, uint n)$/;"	f	signature:(void *dst, const void *src, uint n)
memmove	ulib.c	/^memmove(void *vdst, void *vsrc, int n)$/;"	f	signature:(void *vdst, void *vsrc, int n)
memmove	user.h	/^void *memmove(void*, void*, int);$/;"	p	signature:(void*, void*, int)
memp	lwip/core/memp.c	/^struct memp {$/;"	s	file:
memp	lwip/include/lwip/stats.h	/^  struct stats_mem memp[MEMP_MAX];$/;"	m	struct:stats_	typeref:struct:stats_::stats_mem	access:public
memp::next	lwip/core/memp.c	/^  struct memp *next;$/;"	m	struct:memp	typeref:struct:memp::memp	file:	access:public
memp_free	lwip/core/memp.c	/^memp_free(memp_t type, void *mem)$/;"	f	signature:(memp_t type, void *mem)
memp_free	lwip/include/lwip/memp.h	/^void memp_free(memp_t type, void *mem);$/;"	p	signature:(memp_t type, void *mem)
memp_init	lwip/core/memp.c	/^memp_init(void)$/;"	f	signature:(void)
memp_init	lwip/include/lwip/memp.h	/^void memp_init(void);$/;"	p	signature:(void)
memp_malloc	lwip/core/memp.c	/^memp_malloc(memp_t type)$/;"	f	signature:(memp_t type)
memp_malloc	lwip/include/lwip/memp.h	/^void *memp_malloc(memp_t type);$/;"	p	signature:(memp_t type)
memp_memory	lwip/core/memp.c	/^static u8_t memp_memory[(MEMP_NUM_PBUF *$/;"	v	file:
memp_num	lwip/core/memp.c	/^static const u16_t memp_num[MEMP_MAX] = {$/;"	v	file:
memp_realloc	lwip/include/lwip/memp.h	/^void *memp_realloc(memp_t fromtype, memp_t totype, void *mem);$/;"	p	signature:(memp_t fromtype, memp_t totype, void *mem)
memp_sanity	lwip/core/memp.c	/^memp_sanity(void)$/;"	f	file:	signature:(void)
memp_sizes	lwip/core/memp.c	/^static const u16_t memp_sizes[MEMP_MAX] = {$/;"	v	file:
memp_t	lwip/include/lwip/memp.h	/^} memp_t;$/;"	t	typeref:enum:__anon16
memp_tab	lwip/core/memp.c	/^static struct memp *memp_tab[MEMP_MAX];$/;"	v	typeref:struct:memp	file:
memset	defs.h	/^void*           memset(void*, int, uint);$/;"	p	signature:(void*, int, uint)
memset	string.c	/^memset(void *dst, int c, uint n)$/;"	f	signature:(void *dst, int c, uint n)
memset	ulib.c	/^memset(void *dst, int c, uint n)$/;"	f	signature:(void *dst, int c, uint n)
memset	user.h	/^void* memset(void*, int, uint);$/;"	p	signature:(void*, int, uint)
memsz	elf.h	/^  uint memsz;$/;"	m	struct:proghdr	access:public
microdelay	lapic.c	/^microdelay(int us)$/;"	f	file:	signature:(int us)
millitime	defs.h	/^int             millitime(void);$/;"	p	signature:(void)
millitime	timer.c	/^millitime(void)$/;"	f	signature:(void)
min	fs.c	/^#define min(/;"	d	file:
min	mkfs.c	/^#define min(/;"	d	file:
minor	fs.h	/^  short minor;          \/\/ Minor device number (T_DEV only)$/;"	m	struct:dinode	access:public
minor	fsvar.h	/^  short minor;$/;"	m	struct:inode	access:public
mkdir	user.h	/^int mkdir(char*);$/;"	p	signature:(char*)
mknod	user.h	/^int mknod(char*, short, short);$/;"	p	signature:(char*, short, short)
mode	lwip/netif/ppp/ppp.c	/^    enum NPmode mode;$/;"	m	struct:npioctl	typeref:enum:npioctl::NPmode	file:	access:public
mode	sh.c	/^  int mode;$/;"	m	struct:redircmd	file:	access:public
morecore	umalloc.c	/^morecore(uint nu)$/;"	f	file:	signature:(uint nu)
mp	mp.h	/^struct mp {             \/\/ floating pointer$/;"	s
mp::checksum	mp.h	/^  uchar checksum;               \/\/ all bytes must add up to 0$/;"	m	struct:mp	access:public
mp::imcrp	mp.h	/^  uchar imcrp;$/;"	m	struct:mp	access:public
mp::length	mp.h	/^  uchar length;                 \/\/ 1$/;"	m	struct:mp	access:public
mp::physaddr	mp.h	/^  void *physaddr;               \/\/ phys addr of MP config table$/;"	m	struct:mp	access:public
mp::reserved	mp.h	/^  uchar reserved[3];$/;"	m	struct:mp	access:public
mp::signature	mp.h	/^  uchar signature[4];           \/\/ "_MP_"$/;"	m	struct:mp	access:public
mp::specrev	mp.h	/^  uchar specrev;                \/\/ [14]$/;"	m	struct:mp	access:public
mp::type	mp.h	/^  uchar type;                   \/\/ MP system config type$/;"	m	struct:mp	access:public
mp_bcpu	defs.h	/^int             mp_bcpu(void);$/;"	p	signature:(void)
mp_bcpu	mp.c	/^mp_bcpu(void)$/;"	f	signature:(void)
mp_config	mp.c	/^mp_config(struct mp **pmp)$/;"	f	file:	signature:(struct mp **pmp)
mp_init	defs.h	/^void            mp_init(void);$/;"	p	signature:(void)
mp_init	mp.c	/^mp_init(void)$/;"	f	signature:(void)
mp_search	mp.c	/^mp_search(void)$/;"	f	file:	signature:(void)
mp_search1	mp.c	/^mp_search1(uchar *addr, int len)$/;"	f	file:	signature:(uchar *addr, int len)
mp_startthem	defs.h	/^void            mp_startthem(void);$/;"	p	signature:(void)
mpconf	mp.h	/^struct mpconf {         \/\/ configuration table header$/;"	s
mpconf::checksum	mp.h	/^  uchar checksum;               \/\/ all bytes must add up to 0$/;"	m	struct:mpconf	access:public
mpconf::entry	mp.h	/^  ushort entry;                 \/\/ entry count$/;"	m	struct:mpconf	access:public
mpconf::lapicaddr	mp.h	/^  uint *lapicaddr;              \/\/ address of local APIC$/;"	m	struct:mpconf	access:public
mpconf::length	mp.h	/^  ushort length;                \/\/ total table length$/;"	m	struct:mpconf	access:public
mpconf::oemlength	mp.h	/^  ushort oemlength;             \/\/ OEM table length$/;"	m	struct:mpconf	access:public
mpconf::oemtable	mp.h	/^  uint *oemtable;               \/\/ OEM table pointer$/;"	m	struct:mpconf	access:public
mpconf::product	mp.h	/^  uchar product[20];            \/\/ product id$/;"	m	struct:mpconf	access:public
mpconf::reserved	mp.h	/^  uchar reserved;$/;"	m	struct:mpconf	access:public
mpconf::signature	mp.h	/^  uchar signature[4];           \/\/ "PCMP"$/;"	m	struct:mpconf	access:public
mpconf::version	mp.h	/^  uchar version;                \/\/ [14]$/;"	m	struct:mpconf	access:public
mpconf::xchecksum	mp.h	/^  uchar xchecksum;              \/\/ extended table checksum$/;"	m	struct:mpconf	access:public
mpconf::xlength	mp.h	/^  ushort xlength;               \/\/ extended table length$/;"	m	struct:mpconf	access:public
mpioapic	mp.h	/^struct mpioapic {       \/\/ I\/O APIC table entry$/;"	s
mpioapic::addr	mp.h	/^  uint *addr;                  \/\/ I\/O APIC address$/;"	m	struct:mpioapic	access:public
mpioapic::apicno	mp.h	/^  uchar apicno;                 \/\/ I\/O APIC id$/;"	m	struct:mpioapic	access:public
mpioapic::flags	mp.h	/^  uchar flags;                  \/\/ I\/O APIC flags$/;"	m	struct:mpioapic	access:public
mpioapic::type	mp.h	/^  uchar type;                   \/\/ entry type (2)$/;"	m	struct:mpioapic	access:public
mpioapic::version	mp.h	/^  uchar version;                \/\/ I\/O APIC version$/;"	m	struct:mpioapic	access:public
mpmain	main.c	/^mpmain(void)$/;"	f	file:	signature:(void)
mpproc	mp.h	/^struct mpproc {         \/\/ processor table entry$/;"	s
mpproc::apicid	mp.h	/^  uchar apicid;                 \/\/ local APIC id$/;"	m	struct:mpproc	access:public
mpproc::feature	mp.h	/^  uint feature;                 \/\/ feature flags from CPUID instruction$/;"	m	struct:mpproc	access:public
mpproc::flags	mp.h	/^  uchar flags;                  \/\/ CPU flags$/;"	m	struct:mpproc	access:public
mpproc::reserved	mp.h	/^  uchar reserved[8];$/;"	m	struct:mpproc	access:public
mpproc::signature	mp.h	/^  uchar signature[4];           \/\/ CPU signature$/;"	m	struct:mpproc	access:public
mpproc::type	mp.h	/^  uchar type;                   \/\/ entry type (0)$/;"	m	struct:mpproc	access:public
mpproc::version	mp.h	/^  uchar version;                \/\/ local APIC verison$/;"	m	struct:mpproc	access:public
mpstack	proc.h	/^  char mpstack[MPSTACK];      \/\/ Per-CPU startup stack$/;"	m	struct:cpu	access:public
mrru	lwip/netif/ppp/lcp.h	/^    u_short mrru;			\/* Value of MRRU, and multilink enable *\/$/;"	m	struct:lcp_options	access:public
mru	lwip/netif/ppp/lcp.h	/^    u_short mru;			\/* Value of MRU *\/$/;"	m	struct:lcp_options	access:public
msg	lwip/include/lwip/api_msg.h	/^  struct api_msg_msg msg;$/;"	m	struct:api_msg	typeref:struct:api_msg::api_msg_msg	access:public
msg	lwip/include/lwip/api_msg.h	/^  } msg;$/;"	m	struct:api_msg_msg	typeref:union:api_msg_msg	access:public
msg	lwip/include/lwip/tcpip.h	/^  } msg;$/;"	m	struct:tcpip_msg	typeref:union:tcpip_msg	access:public
msg_in	lwip/include/lwip/dhcp.h	/^  struct dhcp_msg *msg_in;$/;"	m	struct:dhcp	typeref:struct:dhcp::dhcp_msg	access:public
msg_out	lwip/include/lwip/dhcp.h	/^  struct dhcp_msg *msg_out; \/* outgoing msg *\/$/;"	m	struct:dhcp	typeref:struct:dhcp::dhcp_msg	access:public
msleep_spin	defs.h	/^int             msleep_spin(void*, struct spinlock*, int);$/;"	p	signature:(void*, struct spinlock*, int)
msleep_spin	proc.c	/^msleep_spin(void *chan, struct spinlock *lk, int timo)$/;"	f	signature:(void *chan, struct spinlock *lk, int timo)
mss	lwip/include/lwip/tcp.h	/^  u16_t mss;   \/* maximum segment size *\/$/;"	m	struct:tcp_pcb	access:public
mtu	lwip/include/lwip/netif.h	/^  u16_t mtu;$/;"	m	struct:netif	access:public
mtu	lwip/netif/ppp/ppp.c	/^    int  mtu;                           \/* Peer's mru *\/$/;"	m	struct:PPPControl_s	file:	access:public
mutex	lwip/core/memp.c	/^static sys_sem_t mutex;$/;"	v	file:
nPut	lwip/netif/ppp/ppp.c	/^static void nPut(PPPControl *pc, struct pbuf *nb)$/;"	f	file:	signature:(PPPControl *pc, struct pbuf *nb)
nak_buffer	lwip/netif/ppp/lcp.c	/^static u_char nak_buffer[PPP_MRU];	\/* where we construct a nak packet *\/$/;"	v	file:
nakci	lwip/netif/ppp/fsm.h	/^    int  (*nakci)			\/* NAK our Configuration Information *\/$/;"	m	struct:fsm_callbacks	access:public
nakloops	lwip/netif/ppp/fsm.h	/^    int nakloops;			\/* Number of nak loops since last ack *\/$/;"	m	struct:fsm	access:public
name	fs.h	/^  char name[DIRSIZ];$/;"	m	struct:dirent	access:public
name	lwip/include/lwip/netif.h	/^  char name[2];$/;"	m	struct:netif	access:public
name	lwip/netif/ppp/ppp.h	/^    char *name;         \/* Text name of protocol *\/$/;"	m	struct:protent	access:public
name	proc.h	/^  char name[32];            \/\/ Process name (debugging)$/;"	m	struct:proc	access:public
name	spinlock.h	/^  char *name;    \/\/ Name of lock.$/;"	m	struct:spinlock	access:public
name	usertests.c	/^char name[3];$/;"	v
namecmp	defs.h	/^int             namecmp(const char*, const char*);$/;"	p	signature:(const char*, const char*)
namecmp	fs.c	/^namecmp(const char *s, const char *t)$/;"	f	signature:(const char *s, const char *t)
namei	defs.h	/^struct inode*   namei(char*);$/;"	p	signature:(char*)
namei	fs.c	/^namei(char *path)$/;"	f	signature:(char *path)
nameiparent	defs.h	/^struct inode*   nameiparent(char*, char*);$/;"	p	signature:(char*, char*)
nameiparent	fs.c	/^nameiparent(char *path, char *name)$/;"	f	signature:(char *path, char *name)
nblocks	fs.h	/^  uint nblocks;      \/\/ Number of data blocks$/;"	m	struct:superblock	access:public
nblocks	mkfs.c	/^int nblocks = 995;$/;"	v
nc	e100.h	/^            char nc     : 1;$/;"	m	struct:op_transmit_cmd_cmd_tag	access:public
ncpu	mp.c	/^int ncpu;$/;"	v
neg_accompression	lwip/netif/ppp/lcp.h	/^    u_int neg_accompression : 1;	\/* HDLC Address\/Control Field Compression? *\/$/;"	m	struct:lcp_options	access:public
neg_addr	lwip/netif/ppp/ipcp.h	/^    u_int neg_addr : 1;			\/* Negotiate IP Address? *\/$/;"	m	struct:ipcp_options	access:public
neg_asyncmap	lwip/netif/ppp/lcp.h	/^    u_int neg_asyncmap : 1;		\/* Negotiate the async map? *\/$/;"	m	struct:lcp_options	access:public
neg_cbcp	lwip/netif/ppp/lcp.h	/^    u_int neg_cbcp : 1;			\/* Negotiate use of CBCP *\/$/;"	m	struct:lcp_options	access:public
neg_chap	lwip/netif/ppp/lcp.h	/^    u_int neg_chap : 1;			\/* Ask for CHAP authentication? *\/$/;"	m	struct:lcp_options	access:public
neg_endpoint	lwip/netif/ppp/lcp.h	/^    u_int neg_endpoint : 1;		\/* Negotiate endpoint discriminator *\/$/;"	m	struct:lcp_options	access:public
neg_lqr	lwip/netif/ppp/lcp.h	/^    u_int neg_lqr : 1;			\/* Negotiate use of Link Quality Reports *\/$/;"	m	struct:lcp_options	access:public
neg_magicnumber	lwip/netif/ppp/lcp.h	/^    u_int neg_magicnumber : 1;	\/* Ask for magic number? *\/$/;"	m	struct:lcp_options	access:public
neg_mrru	lwip/netif/ppp/lcp.h	/^    u_int neg_mrru : 1;			\/* Negotiate multilink MRRU *\/$/;"	m	struct:lcp_options	access:public
neg_mru	lwip/netif/ppp/lcp.h	/^    u_int neg_mru : 1;			\/* Negotiate the MRU? *\/$/;"	m	struct:lcp_options	access:public
neg_pcompression	lwip/netif/ppp/lcp.h	/^    u_int neg_pcompression : 1;	\/* HDLC Protocol Field Compression? *\/$/;"	m	struct:lcp_options	access:public
neg_ssnhf	lwip/netif/ppp/lcp.h	/^    u_int neg_ssnhf : 1;		\/* Negotiate short sequence numbers *\/$/;"	m	struct:lcp_options	access:public
neg_upap	lwip/netif/ppp/lcp.h	/^    u_int neg_upap : 1;			\/* Ask for UPAP authentication? *\/$/;"	m	struct:lcp_options	access:public
neg_vj	lwip/netif/ppp/ipcp.h	/^    u_int neg_vj : 1;				\/* Van Jacobson Compression? *\/$/;"	m	struct:ipcp_options	access:public
netbuf	lwip/include/lwip/api.h	/^struct netbuf {$/;"	s
netbuf::err	lwip/include/lwip/api.h	/^  err_t err;$/;"	m	struct:netbuf	access:public
netbuf::fromaddr	lwip/include/lwip/api.h	/^  struct ip_addr *fromaddr;$/;"	m	struct:netbuf	typeref:struct:netbuf::ip_addr	access:public
netbuf::fromport	lwip/include/lwip/api.h	/^  u16_t fromport;$/;"	m	struct:netbuf	access:public
netbuf::p	lwip/include/lwip/api.h	/^  struct pbuf *p, *ptr;$/;"	m	struct:netbuf	typeref:struct:netbuf::pbuf	access:public
netbuf::ptr	lwip/include/lwip/api.h	/^  struct pbuf *p, *ptr;$/;"	m	struct:netbuf	typeref:struct:netbuf::	access:public
netbuf_alloc	lwip/api/api_lib.c	/^netbuf_alloc(struct netbuf *buf, u16_t size)$/;"	f	signature:(struct netbuf *buf, u16_t size)
netbuf_alloc	lwip/include/lwip/api.h	/^void *            netbuf_alloc    (struct netbuf *buf, u16_t size);$/;"	p	signature:(struct netbuf *buf, u16_t size)
netbuf_chain	lwip/api/api_lib.c	/^netbuf_chain(struct netbuf *head, struct netbuf *tail)$/;"	f	signature:(struct netbuf *head, struct netbuf *tail)
netbuf_chain	lwip/include/lwip/api.h	/^void              netbuf_chain    (struct netbuf *head,$/;"	p	signature:(struct netbuf *head, struct netbuf *tail)
netbuf_copy	lwip/api/api_lib.c	/^netbuf_copy(struct netbuf *buf, void *dataptr, u16_t len)$/;"	f	signature:(struct netbuf *buf, void *dataptr, u16_t len)
netbuf_copy	lwip/include/lwip/api.h	/^void              netbuf_copy     (struct netbuf *buf,$/;"	p	signature:(struct netbuf *buf, void *dataptr, u16_t len)
netbuf_copy_partial	lwip/api/api_lib.c	/^netbuf_copy_partial(struct netbuf *buf, void *dataptr, u16_t len, u16_t offset)$/;"	f	signature:(struct netbuf *buf, void *dataptr, u16_t len, u16_t offset)
netbuf_copy_partial	lwip/include/lwip/api.h	/^void              netbuf_copy_partial(struct netbuf *buf, void *dataptr, $/;"	p	signature:(struct netbuf *buf, void *dataptr, u16_t len, u16_t offset)
netbuf_data	lwip/api/api_lib.c	/^netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)$/;"	f	signature:(struct netbuf *buf, void **dataptr, u16_t *len)
netbuf_data	lwip/include/lwip/api.h	/^err_t             netbuf_data     (struct netbuf *buf,$/;"	p	signature:(struct netbuf *buf, void **dataptr, u16_t *len)
netbuf_delete	lwip/api/api_lib.c	/^netbuf_delete(struct netbuf *buf)$/;"	f	signature:(struct netbuf *buf)
netbuf_delete	lwip/include/lwip/api.h	/^void              netbuf_delete   (struct netbuf *buf);$/;"	p	signature:(struct netbuf *buf)
netbuf_first	lwip/api/api_lib.c	/^netbuf_first(struct netbuf *buf)$/;"	f	signature:(struct netbuf *buf)
netbuf_first	lwip/include/lwip/api.h	/^void              netbuf_first    (struct netbuf *buf);$/;"	p	signature:(struct netbuf *buf)
netbuf_free	lwip/api/api_lib.c	/^netbuf_free(struct netbuf *buf)$/;"	f	signature:(struct netbuf *buf)
netbuf_free	lwip/include/lwip/api.h	/^void              netbuf_free     (struct netbuf *buf);$/;"	p	signature:(struct netbuf *buf)
netbuf_fromaddr	lwip/api/api_lib.c	/^netbuf_fromaddr(struct netbuf *buf)$/;"	f	signature:(struct netbuf *buf)
netbuf_fromaddr	lwip/include/lwip/api.h	/^struct ip_addr *  netbuf_fromaddr (struct netbuf *buf);$/;"	p	signature:(struct netbuf *buf)
netbuf_fromport	lwip/api/api_lib.c	/^netbuf_fromport(struct netbuf *buf)$/;"	f	signature:(struct netbuf *buf)
netbuf_fromport	lwip/include/lwip/api.h	/^u16_t             netbuf_fromport (struct netbuf *buf);$/;"	p	signature:(struct netbuf *buf)
netbuf_len	lwip/api/api_lib.c	/^netbuf_len(struct netbuf *buf)$/;"	f	signature:(struct netbuf *buf)
netbuf_len	lwip/include/lwip/api.h	/^u16_t             netbuf_len      (struct netbuf *buf);$/;"	p	signature:(struct netbuf *buf)
netbuf_new	lwip/api/api_lib.c	/^netbuf *netbuf_new(void)$/;"	f	signature:(void)
netbuf_new	lwip/include/lwip/api.h	/^struct netbuf *   netbuf_new      (void);$/;"	p	signature:(void)
netbuf_next	lwip/api/api_lib.c	/^netbuf_next(struct netbuf *buf)$/;"	f	signature:(struct netbuf *buf)
netbuf_next	lwip/include/lwip/api.h	/^s8_t              netbuf_next     (struct netbuf *buf);$/;"	p	signature:(struct netbuf *buf)
netbuf_ref	lwip/api/api_lib.c	/^netbuf_ref(struct netbuf *buf, void *dataptr, u16_t size)$/;"	f	signature:(struct netbuf *buf, void *dataptr, u16_t size)
netbuf_ref	lwip/include/lwip/api.h	/^void              netbuf_ref      (struct netbuf *buf,$/;"	p	signature:(struct netbuf *buf, void *dataptr, u16_t size)
netconn	lwip/include/lwip/api.h	/^struct netconn {$/;"	s
netconn::raw	lwip/include/lwip/api.h	/^    struct raw_pcb *raw;$/;"	m	union:netconn	typeref:struct:netconn::raw_pcb	access:public
netconn::tcp	lwip/include/lwip/api.h	/^    struct tcp_pcb *tcp;$/;"	m	union:netconn	typeref:struct:netconn::tcp_pcb	access:public
netconn::udp	lwip/include/lwip/api.h	/^    struct udp_pcb *udp;$/;"	m	union:netconn	typeref:struct:netconn::udp_pcb	access:public
netconn::acceptmbox	lwip/include/lwip/api.h	/^  sys_mbox_t acceptmbox;$/;"	m	struct:netconn	access:public
netconn::callback	lwip/include/lwip/api.h	/^  void (* callback)(struct netconn *, enum netconn_evt, u16_t len);$/;"	m	struct:netconn	access:public
netconn::err	lwip/include/lwip/api.h	/^  err_t err;$/;"	m	struct:netconn	access:public
netconn::mbox	lwip/include/lwip/api.h	/^  sys_mbox_t mbox;$/;"	m	struct:netconn	access:public
netconn::pcb	lwip/include/lwip/api.h	/^  } pcb;$/;"	m	struct:netconn	typeref:union:netconn	access:public
netconn::recv_avail	lwip/include/lwip/api.h	/^  u16_t recv_avail;$/;"	m	struct:netconn	access:public
netconn::recvmbox	lwip/include/lwip/api.h	/^  sys_mbox_t recvmbox;$/;"	m	struct:netconn	access:public
netconn::sem	lwip/include/lwip/api.h	/^  sys_sem_t sem;$/;"	m	struct:netconn	access:public
netconn::socket	lwip/include/lwip/api.h	/^  int socket;$/;"	m	struct:netconn	access:public
netconn::state	lwip/include/lwip/api.h	/^  enum netconn_state state;$/;"	m	struct:netconn	typeref:enum:netconn::netconn_state	access:public
netconn::type	lwip/include/lwip/api.h	/^  enum netconn_type type;$/;"	m	struct:netconn	typeref:enum:netconn::netconn_type	access:public
netconn_accept	lwip/api/api_lib.c	/^netconn_accept(struct netconn *conn)$/;"	f	signature:(struct netconn *conn)
netconn_accept	lwip/include/lwip/api.h	/^struct netconn *  netconn_accept  (struct netconn *conn);$/;"	p	signature:(struct netconn *conn)
netconn_addr	lwip/api/api_lib.c	/^netconn_addr(struct netconn *conn, struct ip_addr **addr,$/;"	f	signature:(struct netconn *conn, struct ip_addr **addr, u16_t *port)
netconn_addr	lwip/include/lwip/api.h	/^err_t             netconn_addr    (struct netconn *conn,$/;"	p	signature:(struct netconn *conn, struct ip_addr **addr, u16_t *port)
netconn_bind	lwip/api/api_lib.c	/^netconn_bind(struct netconn *conn, struct ip_addr *addr,$/;"	f	signature:(struct netconn *conn, struct ip_addr *addr, u16_t port)
netconn_bind	lwip/include/lwip/api.h	/^err_t             netconn_bind    (struct netconn *conn,$/;"	p	signature:(struct netconn *conn, struct ip_addr *addr, u16_t port)
netconn_close	lwip/api/api_lib.c	/^netconn_close(struct netconn *conn)$/;"	f	signature:(struct netconn *conn)
netconn_close	lwip/include/lwip/api.h	/^err_t             netconn_close   (struct netconn *conn);$/;"	p	signature:(struct netconn *conn)
netconn_connect	lwip/api/api_lib.c	/^netconn_connect(struct netconn *conn, struct ip_addr *addr,$/;"	f	signature:(struct netconn *conn, struct ip_addr *addr, u16_t port)
netconn_connect	lwip/include/lwip/api.h	/^err_t             netconn_connect (struct netconn *conn,$/;"	p	signature:(struct netconn *conn, struct ip_addr *addr, u16_t port)
netconn_delete	lwip/api/api_lib.c	/^netconn_delete(struct netconn *conn)$/;"	f	signature:(struct netconn *conn)
netconn_delete	lwip/include/lwip/api.h	/^err_t             netconn_delete  (struct netconn *conn);$/;"	p	signature:(struct netconn *conn)
netconn_disconnect	lwip/api/api_lib.c	/^netconn_disconnect(struct netconn *conn)$/;"	f	signature:(struct netconn *conn)
netconn_disconnect	lwip/include/lwip/api.h	/^err_t             netconn_disconnect (struct netconn *conn);$/;"	p	signature:(struct netconn *conn)
netconn_err	lwip/api/api_lib.c	/^netconn_err(struct netconn *conn)$/;"	f	signature:(struct netconn *conn)
netconn_err	lwip/include/lwip/api.h	/^err_t             netconn_err     (struct netconn *conn);$/;"	p	signature:(struct netconn *conn)
netconn_evt	lwip/include/lwip/api.h	/^enum netconn_evt {$/;"	g
netconn_listen	lwip/api/api_lib.c	/^netconn_listen(struct netconn *conn)$/;"	f	signature:(struct netconn *conn)
netconn_listen	lwip/include/lwip/api.h	/^err_t             netconn_listen  (struct netconn *conn);$/;"	p	signature:(struct netconn *conn)
netconn_new	lwip/api/api_lib.c	/^netconn *netconn_new(enum netconn_type t)$/;"	f	signature:(enum netconn_type t)
netconn_new	lwip/include/lwip/api.h	/^struct netconn *  netconn_new     (enum netconn_type type);$/;"	p	signature:(enum netconn_type type)
netconn_new_with_callback	lwip/api/api_lib.c	/^netconn *netconn_new_with_callback(enum netconn_type t,$/;"	f	signature:(enum netconn_type t, void (*callback)(struct netconn *, enum netconn_evt, u16_t len))
netconn_new_with_callback	lwip/include/lwip/api.h	/^netconn *netconn_new_with_callback(enum netconn_type t,$/;"	p	signature:(enum netconn_type t, void (*callback)(struct netconn *, enum netconn_evt, u16_t len))
netconn_new_with_proto_and_callback	lwip/api/api_lib.c	/^netconn *netconn_new_with_proto_and_callback(enum netconn_type t, u16_t proto,$/;"	f	signature:(enum netconn_type t, u16_t proto, void (*callback)(struct netconn *, enum netconn_evt, u16_t len))
netconn_new_with_proto_and_callback	lwip/include/lwip/api.h	/^netconn *netconn_new_with_proto_and_callback(enum netconn_type t, u16_t proto,$/;"	p	signature:(enum netconn_type t, u16_t proto, void (*callback)(struct netconn *, enum netconn_evt, u16_t len))
netconn_peer	lwip/api/api_lib.c	/^netconn_peer(struct netconn *conn, struct ip_addr *addr,$/;"	f	signature:(struct netconn *conn, struct ip_addr *addr, u16_t *port)
netconn_peer	lwip/include/lwip/api.h	/^err_t             netconn_peer    (struct netconn *conn,$/;"	p	signature:(struct netconn *conn, struct ip_addr *addr, u16_t *port)
netconn_recv	lwip/api/api_lib.c	/^netconn_recv(struct netconn *conn)$/;"	f	signature:(struct netconn *conn)
netconn_recv	lwip/include/lwip/api.h	/^struct netbuf *   netconn_recv    (struct netconn *conn);$/;"	p	signature:(struct netconn *conn)
netconn_send	lwip/api/api_lib.c	/^netconn_send(struct netconn *conn, struct netbuf *buf)$/;"	f	signature:(struct netconn *conn, struct netbuf *buf)
netconn_send	lwip/include/lwip/api.h	/^err_t             netconn_send    (struct netconn *conn,$/;"	p	signature:(struct netconn *conn, struct netbuf *buf)
netconn_state	lwip/include/lwip/api.h	/^enum netconn_state {$/;"	g
netconn_type	lwip/api/api_lib.c	/^netconn_type(struct netconn *conn)$/;"	f	signature:(struct netconn *conn)
netconn_type	lwip/include/lwip/api.h	/^enum netconn_type netconn_type    (struct netconn *conn);$/;"	p	signature:(struct netconn *conn)
netconn_type	lwip/include/lwip/api.h	/^enum netconn_type {$/;"	g
netconn_write	lwip/api/api_lib.c	/^netconn_write(struct netconn *conn, void *dataptr, u16_t size, u8_t copy)$/;"	f	signature:(struct netconn *conn, void *dataptr, u16_t size, u8_t copy)
netconn_write	lwip/include/lwip/api.h	/^err_t             netconn_write   (struct netconn *conn,$/;"	p	signature:(struct netconn *conn, void *dataptr, u16_t size, u8_t copy)
netif	e100.c	/^    struct netif netif;$/;"	m	struct:e100_devinfo	typeref:struct:e100_devinfo::netif	file:	access:public
netif	lwip/include/lwip/netif.h	/^struct netif {$/;"	s
netif	lwip/include/lwip/tcpip.h	/^      struct netif *netif;$/;"	m	struct:tcpip_msg	typeref:struct:tcpip_msg::netif	access:public
netif	lwip/netif/ppp/ppp.c	/^    struct netif netif;$/;"	m	struct:PPPControl_s	typeref:struct:PPPControl_s::netif	file:	access:public
netif::dhcp	lwip/include/lwip/netif.h	/^  struct dhcp *dhcp;$/;"	m	struct:netif	typeref:struct:netif::dhcp	access:public
netif::flags	lwip/include/lwip/netif.h	/^  u8_t flags;$/;"	m	struct:netif	access:public
netif::gw	lwip/include/lwip/netif.h	/^  struct ip_addr gw;$/;"	m	struct:netif	typeref:struct:netif::ip_addr	access:public
netif::hwaddr	lwip/include/lwip/netif.h	/^  unsigned char hwaddr[NETIF_MAX_HWADDR_LEN];$/;"	m	struct:netif	access:public
netif::hwaddr_len	lwip/include/lwip/netif.h	/^  unsigned char hwaddr_len;$/;"	m	struct:netif	access:public
netif::input	lwip/include/lwip/netif.h	/^  err_t (* input)(struct pbuf *p, struct netif *inp);$/;"	m	struct:netif	access:public
netif::ip_addr	lwip/include/lwip/netif.h	/^  struct ip_addr ip_addr;$/;"	m	struct:netif	typeref:struct:netif::ip_addr	access:public
netif::linkoutput	lwip/include/lwip/netif.h	/^  err_t (* linkoutput)(struct netif *netif, struct pbuf *p);$/;"	m	struct:netif	access:public
netif::mtu	lwip/include/lwip/netif.h	/^  u16_t mtu;$/;"	m	struct:netif	access:public
netif::name	lwip/include/lwip/netif.h	/^  char name[2];$/;"	m	struct:netif	access:public
netif::netmask	lwip/include/lwip/netif.h	/^  struct ip_addr netmask;$/;"	m	struct:netif	typeref:struct:netif::ip_addr	access:public
netif::next	lwip/include/lwip/netif.h	/^  struct netif *next;$/;"	m	struct:netif	typeref:struct:netif::netif	access:public
netif::num	lwip/include/lwip/netif.h	/^  u8_t num;$/;"	m	struct:netif	access:public
netif::output	lwip/include/lwip/netif.h	/^  err_t (* output)(struct netif *netif, struct pbuf *p,$/;"	m	struct:netif	access:public
netif::state	lwip/include/lwip/netif.h	/^  void *state;$/;"	m	struct:netif	access:public
netif_add	lwip/core/netif.c	/^netif_add(struct netif *netif, struct ip_addr *ipaddr, struct ip_addr *netmask,$/;"	f	signature:(struct netif *netif, struct ip_addr *ipaddr, struct ip_addr *netmask, struct ip_addr *gw, void *state, err_t (* init)(struct netif *netif), err_t (* input)(struct pbuf *p, struct netif *netif))
netif_add	lwip/include/lwip/netif.h	/^struct netif *netif_add(struct netif *netif, struct ip_addr *ipaddr, struct ip_addr *netmask,$/;"	p	signature:(struct netif *netif, struct ip_addr *ipaddr, struct ip_addr *netmask, struct ip_addr *gw, void *state, err_t (* init)(struct netif *netif), err_t (* input)(struct pbuf *p, struct netif *netif))
netif_default	lwip/core/netif.c	/^struct netif *netif_default = NULL;$/;"	v	typeref:struct:netif
netif_find	lwip/core/netif.c	/^netif_find(char *name)$/;"	f	signature:(char *name)
netif_find	lwip/include/lwip/netif.h	/^struct netif *netif_find(char *name);$/;"	p	signature:(char *name)
netif_init	lwip/core/netif.c	/^netif_init(void)$/;"	f	signature:(void)
netif_init	lwip/include/lwip/netif.h	/^void netif_init(void);$/;"	p	signature:(void)
netif_list	lwip/core/netif.c	/^struct netif *netif_list = NULL;$/;"	v	typeref:struct:netif
netif_remove	lwip/core/netif.c	/^void netif_remove(struct netif * netif)$/;"	f	signature:(struct netif * netif)
netif_remove	lwip/include/lwip/netif.h	/^void netif_remove(struct netif * netif);$/;"	p	signature:(struct netif * netif)
netif_set_addr	lwip/core/netif.c	/^netif_set_addr(struct netif *netif,struct ip_addr *ipaddr, struct ip_addr *netmask,$/;"	f	signature:(struct netif *netif,struct ip_addr *ipaddr, struct ip_addr *netmask, struct ip_addr *gw)
netif_set_addr	lwip/include/lwip/netif.h	/^netif_set_addr(struct netif *netif,struct ip_addr *ipaddr, struct ip_addr *netmask,$/;"	p	signature:(struct netif *netif,struct ip_addr *ipaddr, struct ip_addr *netmask, struct ip_addr *gw)
netif_set_default	lwip/core/netif.c	/^netif_set_default(struct netif *netif)$/;"	f	signature:(struct netif *netif)
netif_set_default	lwip/include/lwip/netif.h	/^void netif_set_default(struct netif *netif);$/;"	p	signature:(struct netif *netif)
netif_set_gw	lwip/core/netif.c	/^netif_set_gw(struct netif *netif, struct ip_addr *gw)$/;"	f	signature:(struct netif *netif, struct ip_addr *gw)
netif_set_gw	lwip/include/lwip/netif.h	/^void netif_set_gw(struct netif *netif, struct ip_addr *gw);$/;"	p	signature:(struct netif *netif, struct ip_addr *gw)
netif_set_ipaddr	lwip/core/netif.c	/^netif_set_ipaddr(struct netif *netif, struct ip_addr *ipaddr)$/;"	f	signature:(struct netif *netif, struct ip_addr *ipaddr)
netif_set_ipaddr	lwip/include/lwip/netif.h	/^void netif_set_ipaddr(struct netif *netif, struct ip_addr *ipaddr);$/;"	p	signature:(struct netif *netif, struct ip_addr *ipaddr)
netif_set_netmask	lwip/core/netif.c	/^netif_set_netmask(struct netif *netif, struct ip_addr *netmask)$/;"	f	signature:(struct netif *netif, struct ip_addr *netmask)
netif_set_netmask	lwip/include/lwip/netif.h	/^void netif_set_netmask(struct netif *netif, struct ip_addr *netmast);$/;"	p	signature:(struct netif *netif, struct ip_addr *netmast)
netmask	lwip/include/lwip/netif.h	/^  struct ip_addr netmask;$/;"	m	struct:netif	typeref:struct:netif::ip_addr	access:public
netmask	lwip/netif/ppp/ppp.h	/^    struct ip_addr our_ipaddr, his_ipaddr, netmask, dns1, dns2;$/;"	m	struct:ppp_addrs	typeref:struct:ppp_addrs::	access:public
network_phase	lwip/netif/ppp/auth.c	/^static void network_phase (int);$/;"	p	file:	signature:(int)
network_phase	lwip/netif/ppp/auth.c	/^static void network_phase(int unit)$/;"	f	file:	signature:(int unit)
next	buf.h	/^  struct buf *next;$/;"	m	struct:buf	typeref:struct:buf::buf	access:public
next	kalloc.c	/^  struct run *next;$/;"	m	struct:run	typeref:struct:run::run	file:	access:public
next	lwip/api/sockets.c	/^    struct lwip_select_cb *next;$/;"	m	struct:lwip_select_cb	typeref:struct:lwip_select_cb::lwip_select_cb	file:	access:public
next	lwip/core/mem.c	/^  mem_size_t next, prev;$/;"	m	struct:mem	file:	access:public
next	lwip/core/memp.c	/^  struct memp *next;$/;"	m	struct:memp	typeref:struct:memp::memp	file:	access:public
next	lwip/include/lwip/netif.h	/^  struct netif *next;$/;"	m	struct:netif	typeref:struct:netif::netif	access:public
next	lwip/include/lwip/pbuf.h	/^  struct pbuf *next;$/;"	m	struct:pbuf	typeref:struct:pbuf::pbuf	access:public
next	lwip/include/lwip/raw.h	/^  struct raw_pcb *next;$/;"	m	struct:raw_pcb	typeref:struct:raw_pcb::raw_pcb	access:public
next	lwip/include/lwip/sys.h	/^  struct sys_timeout *next;$/;"	m	struct:sys_timeout	typeref:struct:sys_timeout::sys_timeout	access:public
next	lwip/include/lwip/sys.h	/^  struct sys_timeout *next;$/;"	m	struct:sys_timeouts	typeref:struct:sys_timeouts::sys_timeout	access:public
next	lwip/include/lwip/tcp.h	/^  struct tcp_pcb *next;   \/* for the linked list *\/$/;"	m	struct:tcp_pcb	typeref:struct:tcp_pcb::tcp_pcb	access:public
next	lwip/include/lwip/tcp.h	/^  struct tcp_pcb_listen *next;   \/* for the linked list *\/$/;"	m	struct:tcp_pcb_listen	typeref:struct:tcp_pcb_listen::tcp_pcb_listen	access:public
next	lwip/include/lwip/tcp.h	/^  struct tcp_seg *next;    \/* used when putting segements on a queue *\/$/;"	m	struct:tcp_seg	typeref:struct:tcp_seg::tcp_seg	access:public
next	lwip/include/lwip/udp.h	/^  struct udp_pcb *next;$/;"	m	struct:udp_pcb	typeref:struct:udp_pcb::udp_pcb	access:public
next	lwip/netif/ppp/auth.c	/^    struct wordlist *next;$/;"	m	struct:wordlist	typeref:struct:wordlist::wordlist	file:	access:public
next	lwip/xv6/arch/sys_arch.c	/^    int count, head, next;$/;"	m	struct:mbox	file:	access:public
next	thread.h	/^    struct sys_timeout *next;$/;"	m	struct:sys_timeouts	typeref:struct:sys_timeouts::sys_timeout	access:public
nexthdr	lwip/include/ipv6/lwip/ip.h	/^  u8_t nexthdr;             \/* next header *\/$/;"	m	struct:ip_hdr	access:public
nextpid	proc.c	/^int nextpid = 1;$/;"	v
ninodes	fs.h	/^  uint ninodes;      \/\/ Number of inodes.$/;"	m	struct:superblock	access:public
ninodes	mkfs.c	/^int ninodes = 200;$/;"	v
nlink	fs.h	/^  short nlink;          \/\/ Number of links to inode in file system$/;"	m	struct:dinode	access:public
nlink	fsvar.h	/^  short nlink;$/;"	m	struct:inode	access:public
nlink	stat.h	/^  short nlink; \/\/ Number of links to file$/;"	m	struct:stat	access:public
nlock	proc.h	/^  int nlock;                  \/\/ Number of locks currently held$/;"	m	struct:cpu	access:public
no_buf	e100.h	/^    char no_buf :   1;$/;"	m	struct:rf_status	access:public
nomatch	e100.h	/^    char nomatch :  1;$/;"	m	struct:rf_status	access:public
normalmap	kbd.h	/^static uchar normalmap[256] =$/;"	v
np_down	lwip/netif/ppp/auth.c	/^void np_down(int unit, u16_t proto)$/;"	f	signature:(int unit, u16_t proto)
np_down	lwip/netif/ppp/auth.h	/^void np_down (int, u16_t);		\/* a network protocol has gone down *\/$/;"	p	signature:(int, u16_t)
np_finished	lwip/netif/ppp/auth.c	/^void np_finished(int unit, u16_t proto)$/;"	f	signature:(int unit, u16_t proto)
np_finished	lwip/netif/ppp/auth.h	/^void np_finished (int, u16_t);	\/* a network protocol no longer needs link *\/$/;"	p	signature:(int, u16_t)
np_up	lwip/netif/ppp/auth.c	/^void np_up(int unit, u16_t proto)$/;"	f	signature:(int unit, u16_t proto)
np_up	lwip/netif/ppp/auth.h	/^void np_up (int, u16_t);			\/* a network protocol has come up *\/$/;"	p	signature:(int, u16_t)
npioctl	lwip/netif/ppp/ppp.c	/^struct npioctl {$/;"	s	file:
npioctl::mode	lwip/netif/ppp/ppp.c	/^    enum NPmode mode;$/;"	m	struct:npioctl	typeref:enum:npioctl::NPmode	file:	access:public
npioctl::protocol	lwip/netif/ppp/ppp.c	/^    int     protocol;           \/* PPP procotol, e.g. PPP_IP *\/$/;"	m	struct:npioctl	file:	access:public
nrtx	lwip/include/lwip/tcp.h	/^  u8_t nrtx;    \/* number of retransmissions *\/$/;"	m	struct:tcp_pcb	access:public
ntohl	lwip/core/inet.c	/^ntohl(u32_t n)$/;"	f	signature:(u32_t n)
ntohl	lwip/include/ipv4/lwip/inet.h	/^#define ntohl /;"	d
ntohl	lwip/include/ipv4/lwip/inet.h	/^#define ntohl(/;"	d
ntohl	lwip/include/ipv4/lwip/inet.h	/^#undef ntohl$/;"	d
ntohl	lwip/include/ipv4/lwip/inet.h	/^u32_t ntohl(u32_t x);$/;"	p	signature:(u32_t x)
ntohl	lwip/include/ipv6/lwip/inet.h	/^u32_t ntohl(u32_t n);$/;"	p	signature:(u32_t n)
ntohs	lwip/core/inet.c	/^ntohs(u16_t n)$/;"	f	signature:(u16_t n)
ntohs	lwip/include/ipv4/lwip/inet.h	/^#define ntohs /;"	d
ntohs	lwip/include/ipv4/lwip/inet.h	/^#define ntohs(/;"	d
ntohs	lwip/include/ipv4/lwip/inet.h	/^#undef ntohs$/;"	d
ntohs	lwip/include/ipv4/lwip/inet.h	/^u16_t ntohs(u16_t x);$/;"	p	signature:(u16_t x)
ntohs	lwip/include/ipv6/lwip/inet.h	/^u16_t ntohs(u16_t n);$/;"	p	signature:(u16_t n)
null_login	lwip/netif/ppp/auth.c	/^static int  null_login (int);$/;"	p	file:	signature:(int)
null_login	lwip/netif/ppp/auth.c	/^static int null_login(int unit)$/;"	f	file:	signature:(int unit)
nulterminate	sh.c	/^nulterminate(struct cmd *cmd)$/;"	f	signature:(struct cmd *cmd)
nulterminate	sh.c	/^struct cmd *nulterminate(struct cmd*);$/;"	p	file:	signature:(struct cmd*)
num	lwip/include/lwip/netif.h	/^  u8_t num;$/;"	m	struct:netif	access:public
num_np_open	lwip/netif/ppp/auth.c	/^static int num_np_open;$/;"	v	file:
num_np_up	lwip/netif/ppp/auth.c	/^static int num_np_up;$/;"	v	file:
numloops	lwip/netif/ppp/lcp.h	/^    int numloops;				\/* Number of loops during magic number neg. *\/$/;"	m	struct:lcp_options	access:public
oemlength	mp.h	/^  ushort oemlength;             \/\/ OEM table length$/;"	m	struct:mpconf	access:public
oemtable	mp.h	/^  uint *oemtable;               \/\/ OEM table pointer$/;"	m	struct:mpconf	access:public
oesp	x86.h	/^  uint oesp;      \/\/ useless & ignored$/;"	m	struct:trapframe	access:public
off	file.h	/^  uint off;$/;"	m	struct:file	access:public
off_15_0	mmu.h	/^  uint off_15_0 : 16;   \/\/ low 16 bits of offset in segment$/;"	m	struct:gatedesc	access:public
off_31_16	mmu.h	/^  uint off_31_16 : 16;  \/\/ high bits of offset in segment$/;"	m	struct:gatedesc	access:public
offered_bc_addr	lwip/include/lwip/dhcp.h	/^  struct ip_addr offered_bc_addr;$/;"	m	struct:dhcp	typeref:struct:dhcp::ip_addr	access:public
offered_gw_addr	lwip/include/lwip/dhcp.h	/^  struct ip_addr offered_gw_addr;$/;"	m	struct:dhcp	typeref:struct:dhcp::ip_addr	access:public
offered_ip_addr	lwip/include/lwip/dhcp.h	/^  struct ip_addr offered_ip_addr;$/;"	m	struct:dhcp	typeref:struct:dhcp::ip_addr	access:public
offered_sn_mask	lwip/include/lwip/dhcp.h	/^  struct ip_addr offered_sn_mask;$/;"	m	struct:dhcp	typeref:struct:dhcp::ip_addr	access:public
offered_t0_lease	lwip/include/lwip/dhcp.h	/^  u32_t offered_t0_lease; \/* lease period (in seconds) *\/$/;"	m	struct:dhcp	access:public
offered_t1_renew	lwip/include/lwip/dhcp.h	/^  u32_t offered_t1_renew; \/* recommended renew time (usually 50% of lease period) *\/$/;"	m	struct:dhcp	access:public
offered_t2_rebind	lwip/include/lwip/dhcp.h	/^  u32_t offered_t2_rebind; \/* recommended rebind time (usually 66% of lease period)  *\/$/;"	m	struct:dhcp	access:public
offset	elf.h	/^  uint offset;$/;"	m	struct:proghdr	access:public
ofile	proc.h	/^  struct file *ofile[NOFILE];  \/\/ Open files$/;"	m	struct:proc	typeref:struct:proc::file	access:public
ok	e100.h	/^            char ok :       1;    \/\/ No Error$/;"	m	struct:command_block_tag	access:public
oldFrame	lwip/netif/ppp/ppp.c	/^    char oldFrame;                      \/* Old framing character for fd. *\/$/;"	m	struct:PPPControl_s	file:	access:public
old_addrs	lwip/netif/ppp/ipcp.h	/^    u_int old_addrs : 1;			\/* Use old (IP-Addresses) option? *\/$/;"	m	struct:ipcp_options	access:public
old_vj	lwip/netif/ppp/ipcp.h	/^    u_int old_vj : 1;				\/* use old (short) form of VJ option? *\/$/;"	m	struct:ipcp_options	access:public
ooseq	lwip/include/lwip/tcp.h	/^  struct tcp_seg *ooseq;    \/* Received out of sequence segments. *\/$/;"	m	struct:tcp_pcb	typeref:struct:tcp_pcb::tcp_seg	access:public
op_transmit_cmd	e100.h	/^typedef struct op_transmit_cmd {$/;"	s
op_transmit_cmd	e100.h	/^} op_transmit_cmd;$/;"	t	typeref:struct:op_transmit_cmd
op_transmit_cmd::byte_count	e100.h	/^        int byte_count :14;$/;"	m	struct:op_transmit_cmd	access:public
op_transmit_cmd::eof	e100.h	/^        char eof :      1;$/;"	m	struct:op_transmit_cmd	access:public
op_transmit_cmd::res	e100.h	/^        char res :      1;$/;"	m	struct:op_transmit_cmd	access:public
op_transmit_cmd::tbd_num	e100.h	/^        uint8_t tbd_num;$/;"	m	struct:op_transmit_cmd	access:public
op_transmit_cmd::trans_thres	e100.h	/^        uint8_t trans_thres;$/;"	m	struct:op_transmit_cmd	access:public
op_transmit_cmd::base_cmd	e100.h	/^    command_block base_cmd;$/;"	m	struct:op_transmit_cmd	access:public
op_transmit_cmd::tbd_addr	e100.h	/^    uint32_t tbd_addr;$/;"	m	struct:op_transmit_cmd	access:public
op_transmit_cmd_cmd	e100.h	/^} op_transmit_cmd_cmd;$/;"	t	typeref:struct:op_transmit_cmd_cmd_tag
op_transmit_cmd_cmd_tag	e100.h	/^typedef struct op_transmit_cmd_cmd_tag {$/;"	s
op_transmit_cmd_cmd_tag::cid	e100.h	/^            char cid    : 5;$/;"	m	struct:op_transmit_cmd_cmd_tag	access:public
op_transmit_cmd_cmd_tag::cmd	e100.h	/^            char cmd    : 3;$/;"	m	struct:op_transmit_cmd_cmd_tag	access:public
op_transmit_cmd_cmd_tag::el	e100.h	/^            char el     : 1;$/;"	m	struct:op_transmit_cmd_cmd_tag	access:public
op_transmit_cmd_cmd_tag::i	e100.h	/^            char i      : 1;$/;"	m	struct:op_transmit_cmd_cmd_tag	access:public
op_transmit_cmd_cmd_tag::nc	e100.h	/^            char nc     : 1;$/;"	m	struct:op_transmit_cmd_cmd_tag	access:public
op_transmit_cmd_cmd_tag::res	e100.h	/^            char res    : 3;$/;"	m	struct:op_transmit_cmd_cmd_tag	access:public
op_transmit_cmd_cmd_tag::s	e100.h	/^            char s      : 1;$/;"	m	struct:op_transmit_cmd_cmd_tag	access:public
op_transmit_cmd_cmd_tag::sf	e100.h	/^            char sf     : 1;$/;"	m	struct:op_transmit_cmd_cmd_tag	access:public
op_transmit_cmd_cmd_tag::word	e100.h	/^        uint16_t word;$/;"	m	union:op_transmit_cmd_cmd_tag	access:public
open	lwip/netif/ppp/ppp.h	/^    void (*open) (int unit);$/;"	m	struct:protent	access:public
open	user.h	/^int open(char*, int);$/;"	p	signature:(char*, int)
openFlag	lwip/netif/ppp/ppp.c	/^    char openFlag;                      \/* True when in use. *\/$/;"	m	struct:PPPControl_s	file:	access:public
opentest	usertests.c	/^opentest(void)$/;"	f	signature:(void)
opterr	lwip/include/lwip/stats.h	/^  u16_t opterr;  \/* Error in options. *\/$/;"	m	struct:stats_proto	access:public
options_in	lwip/include/lwip/dhcp.h	/^  struct dhcp_msg *options_in; $/;"	m	struct:dhcp	typeref:struct:dhcp::dhcp_msg	access:public
options_in_len	lwip/include/lwip/dhcp.h	/^  u16_t options_in_len;$/;"	m	struct:dhcp	access:public
options_out_len	lwip/include/lwip/dhcp.h	/^  u16_t options_out_len; \/* outgoing msg options length *\/$/;"	m	struct:dhcp	access:public
our_ipaddr	lwip/netif/ppp/ppp.h	/^    struct ip_addr our_ipaddr, his_ipaddr, netmask, dns1, dns2;$/;"	m	struct:ppp_addrs	typeref:struct:ppp_addrs::ip_addr	access:public
our_name	lwip/netif/ppp/ppp.h	/^	char our_name[MAXNAMELEN + 1];         \/* Our name for authentication purposes *\/$/;"	m	struct:ppp_settings	access:public
ouraddr	lwip/netif/ppp/ipcp.h	/^    u32_t ouraddr, hisaddr;	\/* Addresses in NETWORK BYTE ORDER *\/$/;"	m	struct:ipcp_options	access:public
outACCM	lwip/netif/ppp/ppp.c	/^    ext_accm outACCM;                   \/* Async-Ctl-Char-Map for output. *\/$/;"	m	struct:PPPControl_s	file:	access:public
outb	x86.h	/^outb(ushort port, uchar data)$/;"	f	signature:(ushort port, uchar data)
outl	x86.h	/^outl(ushort port, uint data)$/;"	f	signature:(ushort port, uint data)
outpacket_buf	lwip/netif/ppp/ppp.c	/^u_char outpacket_buf[NUM_PPP][PPP_MRU+PPP_HDRLEN];  $/;"	v
output	lwip/include/lwip/netif.h	/^  err_t (* output)(struct netif *netif, struct pbuf *p,$/;"	m	struct:netif	access:public
outsl	x86.h	/^outsl(int port, const void *addr, int cnt)$/;"	f	signature:(int port, const void *addr, int cnt)
outw	x86.h	/^outw(ushort port, ushort data)$/;"	f	signature:(ushort port, ushort data)
p	lwip/include/lwip/api.h	/^  struct pbuf *p, *ptr;$/;"	m	struct:netbuf	typeref:struct:netbuf::pbuf	access:public
p	lwip/include/lwip/api_msg.h	/^    struct pbuf *p;   $/;"	m	union:api_msg_msg	typeref:struct:api_msg_msg::pbuf	access:public
p	lwip/include/lwip/dhcp.h	/^  struct pbuf *p;$/;"	m	struct:dhcp	typeref:struct:dhcp::pbuf	access:public
p	lwip/include/lwip/tcp.h	/^  struct pbuf *p;          \/* buffer containing data + TCP header *\/$/;"	m	struct:tcp_seg	typeref:struct:tcp_seg::pbuf	access:public
p	lwip/include/lwip/tcpip.h	/^      struct pbuf *p;$/;"	m	struct:tcpip_msg	typeref:struct:tcpip_msg::pbuf	access:public
p	lwip/netif/etharp.c	/^  struct pbuf *p;$/;"	m	struct:etharp_entry	typeref:struct:etharp_entry::pbuf	file:	access:public
p	mmu.h	/^  uint p : 1;           \/\/ Present$/;"	m	struct:gatedesc	access:public
p	mmu.h	/^  uint p : 1;          \/\/ Present$/;"	m	struct:segdesc	access:public
p	thread.h	/^    struct proc *p;$/;"	m	struct:thread	typeref:struct:thread::proc	access:public
p_out	lwip/include/lwip/dhcp.h	/^  struct pbuf *p_out; \/* pbuf of outcoming msg *\/$/;"	m	struct:dhcp	typeref:struct:dhcp::pbuf	access:public
pa	elf.h	/^  uint pa;$/;"	m	struct:proghdr	access:public
pad	ioapic.c	/^  uint pad[3];$/;"	m	struct:ioapic	file:	access:public
padding1	mmu.h	/^  ushort padding1;$/;"	m	struct:taskstate	access:public
padding1	x86.h	/^  ushort padding1;$/;"	m	struct:trapframe	access:public
padding10	mmu.h	/^  ushort padding10;$/;"	m	struct:taskstate	access:public
padding2	mmu.h	/^  ushort padding2;$/;"	m	struct:taskstate	access:public
padding2	x86.h	/^  ushort padding2;$/;"	m	struct:trapframe	access:public
padding3	mmu.h	/^  ushort padding3;$/;"	m	struct:taskstate	access:public
padding3	x86.h	/^  ushort padding3;$/;"	m	struct:trapframe	access:public
padding4	mmu.h	/^  ushort padding4;$/;"	m	struct:taskstate	access:public
padding4	x86.h	/^  ushort padding4;$/;"	m	struct:trapframe	access:public
padding5	mmu.h	/^  ushort padding5;$/;"	m	struct:taskstate	access:public
padding6	mmu.h	/^  ushort padding6;$/;"	m	struct:taskstate	access:public
padding7	mmu.h	/^  ushort padding7;$/;"	m	struct:taskstate	access:public
padding8	mmu.h	/^  ushort padding8;$/;"	m	struct:taskstate	access:public
padding9	mmu.h	/^  ushort padding9;$/;"	m	struct:taskstate	access:public
panic	console.c	/^panic(char *s)$/;"	f	signature:(char *s)
panic	defs.h	/^void            panic(char*) __attribute__((noreturn));$/;"	p	signature:(char*)
panic	sh.c	/^panic(char *s)$/;"	f	signature:(char *s)
panic	sh.c	/^void panic(char*);$/;"	p	file:	signature:(char*)
panicked	console.c	/^int panicked = 0;$/;"	v
pap_protent	lwip/netif/ppp/pap.c	/^struct protent pap_protent = {$/;"	v	typeref:struct:protent
parent	proc.h	/^  struct proc *parent;      \/\/ Parent process$/;"	m	struct:proc	typeref:struct:proc::proc	access:public
parent_bridge	pci.h	/^    struct pci_func *parent_bridge;$/;"	m	struct:pci_bus	typeref:struct:pci_bus::pci_func	access:public
parse_request	httpd.c	/^parse_request(int client)$/;"	f	signature:(int client)
parseblock	sh.c	/^parseblock(char **ps, char *es)$/;"	f	signature:(char **ps, char *es)
parsecmd	sh.c	/^parsecmd(char *s)$/;"	f	signature:(char *s)
parsecmd	sh.c	/^struct cmd *parsecmd(char*);$/;"	p	file:	signature:(char*)
parsedata	httpd.c	/^parsedata(char *start, char *end)$/;"	f	signature:(char *start, char *end)
parseexec	sh.c	/^parseexec(char **ps, char *es)$/;"	f	signature:(char **ps, char *es)
parseexec	sh.c	/^struct cmd *parseexec(char**, char*);$/;"	p	file:	signature:(char**, char*)
parseline	sh.c	/^parseline(char **ps, char *es)$/;"	f	signature:(char **ps, char *es)
parseline	sh.c	/^struct cmd *parseline(char**, char*);$/;"	p	file:	signature:(char**, char*)
parsepipe	sh.c	/^parsepipe(char **ps, char *es)$/;"	f	signature:(char **ps, char *es)
parsepipe	sh.c	/^struct cmd *parsepipe(char**, char*);$/;"	p	file:	signature:(char**, char*)
parseredirs	sh.c	/^parseredirs(struct cmd *cmd, char **ps, char *es)$/;"	f	signature:(struct cmd *cmd, char **ps, char *es)
passive	lwip/netif/ppp/lcp.h	/^    u_int passive : 1;			\/* Don't die if we don't get a response *\/$/;"	m	struct:lcp_options	access:public
passwd	lwip/netif/ppp/ppp.h	/^	char passwd[MAXSECRETLEN + 1];           \/* Password for PAP, secret for CHAP *\/$/;"	m	struct:ppp_settings	access:public
passwd_from_file	lwip/netif/ppp/auth.c	/^static int passwd_from_file;$/;"	v	file:
payload	lwip/include/lwip/pbuf.h	/^  void *payload;$/;"	m	struct:pbuf	access:public
pbuf	lwip/include/lwip/pbuf.h	/^struct pbuf {$/;"	s
pbuf	lwip/include/lwip/stats.h	/^  struct stats_pbuf pbuf;$/;"	m	struct:stats_	typeref:struct:stats_::stats_pbuf	access:public
pbuf::flags	lwip/include/lwip/pbuf.h	/^  u16_t flags;$/;"	m	struct:pbuf	access:public
pbuf::len	lwip/include/lwip/pbuf.h	/^  u16_t len;  $/;"	m	struct:pbuf	access:public
pbuf::next	lwip/include/lwip/pbuf.h	/^  struct pbuf *next;$/;"	m	struct:pbuf	typeref:struct:pbuf::pbuf	access:public
pbuf::payload	lwip/include/lwip/pbuf.h	/^  void *payload;$/;"	m	struct:pbuf	access:public
pbuf::ref	lwip/include/lwip/pbuf.h	/^  u16_t ref;$/;"	m	struct:pbuf	access:public
pbuf::tot_len	lwip/include/lwip/pbuf.h	/^  u16_t tot_len;$/;"	m	struct:pbuf	access:public
pbuf_alloc	lwip/core/pbuf.c	/^pbuf_alloc(pbuf_layer l, u16_t length, pbuf_flag flag)$/;"	f	signature:(pbuf_layer l, u16_t length, pbuf_flag flag)
pbuf_alloc	lwip/include/lwip/pbuf.h	/^struct pbuf *pbuf_alloc(pbuf_layer l, u16_t size, pbuf_flag flag);$/;"	p	signature:(pbuf_layer l, u16_t size, pbuf_flag flag)
pbuf_cat	lwip/core/pbuf.c	/^pbuf_cat(struct pbuf *h, struct pbuf *t)$/;"	f	signature:(struct pbuf *h, struct pbuf *t)
pbuf_cat	lwip/include/lwip/pbuf.h	/^void pbuf_cat(struct pbuf *h, struct pbuf *t);$/;"	p	signature:(struct pbuf *h, struct pbuf *t)
pbuf_chain	lwip/core/pbuf.c	/^pbuf_chain(struct pbuf *h, struct pbuf *t)$/;"	f	signature:(struct pbuf *h, struct pbuf *t)
pbuf_chain	lwip/include/lwip/pbuf.h	/^void pbuf_chain(struct pbuf *h, struct pbuf *t);$/;"	p	signature:(struct pbuf *h, struct pbuf *t)
pbuf_clen	lwip/core/pbuf.c	/^pbuf_clen(struct pbuf *p)$/;"	f	signature:(struct pbuf *p)
pbuf_clen	lwip/include/lwip/pbuf.h	/^u8_t pbuf_clen(struct pbuf *p);  $/;"	p	signature:(struct pbuf *p)
pbuf_dechain	lwip/core/pbuf.c	/^pbuf_dechain(struct pbuf *p)$/;"	f	signature:(struct pbuf *p)
pbuf_dechain	lwip/include/lwip/pbuf.h	/^struct pbuf *pbuf_dechain(struct pbuf *p);$/;"	p	signature:(struct pbuf *p)
pbuf_dequeue	lwip/core/pbuf.c	/^pbuf_dequeue(struct pbuf *p)$/;"	f	signature:(struct pbuf *p)
pbuf_flag	lwip/include/lwip/pbuf.h	/^} pbuf_flag;$/;"	t	typeref:enum:__anon15
pbuf_free	lwip/core/pbuf.c	/^pbuf_free(struct pbuf *p)$/;"	f	signature:(struct pbuf *p)
pbuf_free	lwip/include/lwip/pbuf.h	/^u8_t pbuf_free(struct pbuf *p);$/;"	p	signature:(struct pbuf *p)
pbuf_header	lwip/core/pbuf.c	/^pbuf_header(struct pbuf *p, s16_t header_size)$/;"	f	signature:(struct pbuf *p, s16_t header_size)
pbuf_header	lwip/include/lwip/pbuf.h	/^u8_t pbuf_header(struct pbuf *p, s16_t header_size);$/;"	p	signature:(struct pbuf *p, s16_t header_size)
pbuf_init	lwip/core/pbuf.c	/^pbuf_init(void)$/;"	f	signature:(void)
pbuf_init	lwip/include/lwip/pbuf.h	/^void pbuf_init(void);$/;"	p	signature:(void)
pbuf_layer	lwip/include/lwip/pbuf.h	/^} pbuf_layer;$/;"	t	typeref:enum:__anon14
pbuf_pool	lwip/core/pbuf.c	/^static struct pbuf *pbuf_pool = NULL;$/;"	v	typeref:struct:pbuf	file:
pbuf_pool_alloc	lwip/core/pbuf.c	/^pbuf_pool_alloc(void)$/;"	f	file:	signature:(void)
pbuf_pool_alloc_lock	lwip/core/pbuf.c	/^static volatile u8_t pbuf_pool_free_lock, pbuf_pool_alloc_lock;$/;"	v	file:
pbuf_pool_free_lock	lwip/core/pbuf.c	/^static volatile u8_t pbuf_pool_free_lock, pbuf_pool_alloc_lock;$/;"	v	file:
pbuf_pool_free_sem	lwip/core/pbuf.c	/^static sys_sem_t pbuf_pool_free_sem;$/;"	v	file:
pbuf_pool_memory	lwip/core/pbuf.c	/^static u8_t pbuf_pool_memory[(PBUF_POOL_SIZE * MEM_ALIGN_SIZE(PBUF_POOL_BUFSIZE + sizeof(struct pbuf)))];$/;"	v	file:
pbuf_queue	lwip/core/pbuf.c	/^pbuf_queue(struct pbuf *p, struct pbuf *n)$/;"	f	signature:(struct pbuf *p, struct pbuf *n)
pbuf_realloc	lwip/core/pbuf.c	/^pbuf_realloc(struct pbuf *p, u16_t new_len)$/;"	f	signature:(struct pbuf *p, u16_t new_len)
pbuf_realloc	lwip/include/lwip/pbuf.h	/^void pbuf_realloc(struct pbuf *p, u16_t size); $/;"	p	signature:(struct pbuf *p, u16_t size)
pbuf_ref	lwip/core/pbuf.c	/^pbuf_ref(struct pbuf *p)$/;"	f	signature:(struct pbuf *p)
pbuf_ref	lwip/include/lwip/pbuf.h	/^void pbuf_ref(struct pbuf *p);$/;"	p	signature:(struct pbuf *p)
pbuf_ref_chain	lwip/include/lwip/pbuf.h	/^void pbuf_ref_chain(struct pbuf *p);$/;"	p	signature:(struct pbuf *p)
pbuf_take	lwip/core/pbuf.c	/^pbuf_take(struct pbuf *p)$/;"	f	signature:(struct pbuf *p)
pbuf_take	lwip/include/lwip/pbuf.h	/^struct pbuf *pbuf_take(struct pbuf *f);$/;"	p	signature:(struct pbuf *f)
pcb	lwip/include/lwip/api.h	/^  } pcb;$/;"	m	struct:netconn	typeref:union:netconn	access:public
pcb	lwip/include/lwip/dhcp.h	/^  struct udp_pcb *pcb;$/;"	m	struct:dhcp	typeref:struct:dhcp::udp_pcb	access:public
pcb_cache	lwip/core/udp.c	/^static struct udp_pcb *pcb_cache = NULL;$/;"	v	typeref:struct:udp_pcb	file:
pcbs	lwip/include/lwip/tcp.h	/^	struct tcp_pcb *pcbs;$/;"	m	union:tcp_listen_pcbs_t	typeref:struct:tcp_listen_pcbs_t::tcp_pcb	access:public
pci_attach	pci.c	/^pci_attach(struct pci_func *f)$/;"	f	file:	signature:(struct pci_func *f)
pci_attach_class	pci.c	/^struct pci_driver pci_attach_class[] = {$/;"	v	typeref:struct:pci_driver
pci_attach_match	pci.c	/^pci_attach_match(uint32_t key1, uint32_t key2,$/;"	f	file:	signature:(uint32_t key1, uint32_t key2, struct pci_driver *list, struct pci_func *pcif)
pci_attach_vendor	pci.c	/^struct pci_driver pci_attach_vendor[] = {$/;"	v	typeref:struct:pci_driver
pci_bridge_attach	pci.c	/^pci_bridge_attach(struct pci_func *pcif)$/;"	f	file:	signature:(struct pci_func *pcif)
pci_bridge_attach	pci.c	/^static int pci_bridge_attach(struct pci_func *pcif);$/;"	p	file:	signature:(struct pci_func *pcif)
pci_bridge_pci_attach	pci.c	/^pci_bridge_pci_attach(struct pci_func *pcif)$/;"	f	file:	signature:(struct pci_func *pcif)
pci_bridge_pci_attach	pci.c	/^static int pci_bridge_pci_attach(struct pci_func *pcif);$/;"	p	file:	signature:(struct pci_func *pcif)
pci_bus	pci.h	/^struct pci_bus {$/;"	s
pci_bus::busno	pci.h	/^    uint32_t busno;$/;"	m	struct:pci_bus	access:public
pci_bus::parent_bridge	pci.h	/^    struct pci_func *parent_bridge;$/;"	m	struct:pci_bus	typeref:struct:pci_bus::pci_func	access:public
pci_class_t	pcireg.h	/^typedef uint8_t pci_class_t;$/;"	t
pci_conf1_addr_ioport	pci.c	/^static uint32_t pci_conf1_addr_ioport = 0x0cf8;$/;"	v	file:
pci_conf1_data_ioport	pci.c	/^static uint32_t pci_conf1_data_ioport = 0x0cfc;$/;"	v	file:
pci_conf1_set_addr	pci.c	/^pci_conf1_set_addr(uint32_t bus,$/;"	f	file:	signature:(uint32_t bus, uint32_t dev, uint32_t func, uint32_t offset)
pci_conf_read	pci.c	/^pci_conf_read(struct pci_func *f, uint32_t off)$/;"	f	file:	signature:(struct pci_func *f, uint32_t off)
pci_conf_write	pci.c	/^pci_conf_write(struct pci_func *f, uint32_t off, uint32_t v)$/;"	f	file:	signature:(struct pci_func *f, uint32_t off, uint32_t v)
pci_display_attach	pci.c	/^pci_display_attach(struct pci_func *pcif)$/;"	f	file:	signature:(struct pci_func *pcif)
pci_display_attach	pci.c	/^static int pci_display_attach(struct pci_func *pcif);$/;"	p	file:	signature:(struct pci_func *pcif)
pci_driver	pci.c	/^struct pci_driver {$/;"	s	file:
pci_driver::attachfn	pci.c	/^    int (*attachfn) (struct pci_func *pcif);$/;"	m	struct:pci_driver	file:	access:public
pci_driver::key1	pci.c	/^    uint32_t key1, key2;$/;"	m	struct:pci_driver	file:	access:public
pci_driver::key2	pci.c	/^    uint32_t key1, key2;$/;"	m	struct:pci_driver	file:	access:public
pci_func	pci.h	/^struct pci_func {$/;"	s
pci_func::bus	pci.h	/^    struct pci_bus *bus;	\/\/ Primary bus for bridges$/;"	m	struct:pci_func	typeref:struct:pci_func::pci_bus	access:public
pci_func::dev	pci.h	/^    uint32_t dev;$/;"	m	struct:pci_func	access:public
pci_func::dev_class	pci.h	/^    uint32_t dev_class;$/;"	m	struct:pci_func	access:public
pci_func::dev_id	pci.h	/^    uint32_t dev_id;$/;"	m	struct:pci_func	access:public
pci_func::func	pci.h	/^    uint32_t func;$/;"	m	struct:pci_func	access:public
pci_func::irq_line	pci.h	/^    uint8_t irq_line;$/;"	m	struct:pci_func	access:public
pci_func::reg_base	pci.h	/^    uint32_t reg_base[6];$/;"	m	struct:pci_func	access:public
pci_func::reg_size	pci.h	/^    uint32_t reg_size[6];$/;"	m	struct:pci_func	access:public
pci_func_enable	pci.c	/^pci_func_enable(struct pci_func *f)$/;"	f	signature:(struct pci_func *f)
pci_func_enable	pci.h	/^void pci_func_enable(struct pci_func *f);$/;"	p	signature:(struct pci_func *f)
pci_init	pci.c	/^pci_init(void)$/;"	f	signature:(void)
pci_init	pci.h	/^int pci_init(void);$/;"	p	signature:(void)
pci_interface_t	pcireg.h	/^typedef uint8_t pci_interface_t;$/;"	t
pci_intr_grant_t	pcireg.h	/^typedef uint8_t pci_intr_grant_t;$/;"	t
pci_intr_latency_t	pcireg.h	/^typedef uint8_t pci_intr_latency_t;$/;"	t
pci_intr_line_t	pcireg.h	/^typedef uint8_t pci_intr_line_t;$/;"	t
pci_intr_pin_t	pcireg.h	/^typedef uint8_t pci_intr_pin_t;$/;"	t
pci_net_ether_attach	pci.c	/^pci_net_ether_attach(struct pci_func *pcif)$/;"	f	file:	signature:(struct pci_func *pcif)
pci_net_ether_attach	pci.c	/^static int pci_net_ether_attach(struct pci_func *pcif);$/;"	p	file:	signature:(struct pci_func *pcif)
pci_product_id_t	pcireg.h	/^typedef uint16_t pci_product_id_t;$/;"	t
pci_res_bus	pci.h	/^enum { pci_res_bus, pci_res_mem, pci_res_io, pci_res_max };$/;"	e	enum:__anon13
pci_res_io	pci.h	/^enum { pci_res_bus, pci_res_mem, pci_res_io, pci_res_max };$/;"	e	enum:__anon13
pci_res_max	pci.h	/^enum { pci_res_bus, pci_res_mem, pci_res_io, pci_res_max };$/;"	e	enum:__anon13
pci_res_mem	pci.h	/^enum { pci_res_bus, pci_res_mem, pci_res_io, pci_res_max };$/;"	e	enum:__anon13
pci_revision_t	pcireg.h	/^typedef uint8_t pci_revision_t;$/;"	t
pci_scan_bus	pci.c	/^pci_scan_bus(struct pci_bus *bus)$/;"	f	file:	signature:(struct pci_bus *bus)
pci_show_addrs	pci.c	/^static int pci_show_addrs = 1;$/;"	v	file:
pci_show_devs	pci.c	/^static int pci_show_devs = 1;$/;"	v	file:
pci_subclass_t	pcireg.h	/^typedef uint8_t pci_subclass_t;$/;"	t
pci_vendor_id_t	pcireg.h	/^typedef uint16_t pci_vendor_id_t;$/;"	t
pci_vpd	pcireg.h	/^struct pci_vpd {$/;"	s
pci_vpd::vpd_key0	pcireg.h	/^	uint8_t		vpd_key0;$/;"	m	struct:pci_vpd	access:public
pci_vpd::vpd_key1	pcireg.h	/^	uint8_t		vpd_key1;$/;"	m	struct:pci_vpd	access:public
pci_vpd::vpd_len	pcireg.h	/^	uint8_t		vpd_len;		\/* length of data only *\/$/;"	m	struct:pci_vpd	access:public
pci_vpd_largeres	pcireg.h	/^struct pci_vpd_largeres {$/;"	s
pci_vpd_largeres::vpdres_byte0	pcireg.h	/^	uint8_t		vpdres_byte0;$/;"	m	struct:pci_vpd_largeres	access:public
pci_vpd_largeres::vpdres_len_lsb	pcireg.h	/^	uint8_t		vpdres_len_lsb;		\/* length of data only *\/$/;"	m	struct:pci_vpd_largeres	access:public
pci_vpd_largeres::vpdres_len_msb	pcireg.h	/^	uint8_t		vpdres_len_msb;$/;"	m	struct:pci_vpd_largeres	access:public
pci_vpd_smallres	pcireg.h	/^struct pci_vpd_smallres {$/;"	s
pci_vpd_smallres::vpdres_byte0	pcireg.h	/^	uint8_t		vpdres_byte0;		\/* length of data + tag *\/$/;"	m	struct:pci_vpd_smallres	access:public
pcomp	lwip/netif/ppp/ppp.c	/^    int  pcomp;                         \/* Does peer accept protocol compression? *\/$/;"	m	struct:PPPControl_s	file:	access:public
pcs	spinlock.h	/^  uint pcs[10];  \/\/ The call stack (an array of program counters)$/;"	m	struct:spinlock	access:public
peek	sh.c	/^peek(char **ps, char *es, char *toks)$/;"	f	signature:(char **ps, char *es, char *toks)
peer_authname	lwip/netif/ppp/auth.c	/^static char peer_authname[MAXNAMELEN];$/;"	v	file:
peer_mru	lwip/netif/ppp/fsm.c	/^int peer_mru[NUM_PPP];$/;"	v
phentsize	elf.h	/^  ushort phentsize;$/;"	m	struct:elfhdr	access:public
phnum	elf.h	/^  ushort phnum;$/;"	m	struct:elfhdr	access:public
phoff	elf.h	/^  uint phoff;$/;"	m	struct:elfhdr	access:public
physaddr	mp.h	/^  void *physaddr;               \/\/ phys addr of MP config table$/;"	m	struct:mp	access:public
pic_enable	defs.h	/^void            pic_enable(int);$/;"	p	signature:(int)
pic_enable	picirq.c	/^pic_enable(int irq)$/;"	f	signature:(int irq)
pic_init	defs.h	/^void            pic_init(void);$/;"	p	signature:(void)
pic_init	picirq.c	/^pic_init(void)$/;"	f	signature:(void)
pic_setmask	picirq.c	/^pic_setmask(ushort mask)$/;"	f	file:	signature:(ushort mask)
pid	proc.h	/^  int pid;                  \/\/ Process ID$/;"	m	struct:proc	access:public
pinit	defs.h	/^void            pinit(void);$/;"	p	signature:(void)
pinit	proc.c	/^pinit(void)$/;"	f	signature:(void)
pipe	file.h	/^  struct pipe *pipe;$/;"	m	struct:file	typeref:struct:file::pipe	access:public
pipe	pipe.c	/^struct pipe {$/;"	s	file:
pipe	user.h	/^int pipe(int*);$/;"	p	signature:(int*)
pipe1	usertests.c	/^pipe1(void)$/;"	f	signature:(void)
pipe::data	pipe.c	/^  char data[PIPESIZE];$/;"	m	struct:pipe	file:	access:public
pipe::lock	pipe.c	/^  struct spinlock lock;$/;"	m	struct:pipe	typeref:struct:pipe::spinlock	file:	access:public
pipe::readopen	pipe.c	/^  int readopen;   \/\/ read fd is still open$/;"	m	struct:pipe	file:	access:public
pipe::readp	pipe.c	/^  int readp;      \/\/ next index to read$/;"	m	struct:pipe	file:	access:public
pipe::writeopen	pipe.c	/^  int writeopen;  \/\/ write fd is still open$/;"	m	struct:pipe	file:	access:public
pipe::writep	pipe.c	/^  int writep;     \/\/ next index to write$/;"	m	struct:pipe	file:	access:public
pipealloc	defs.h	/^int             pipealloc(struct file**, struct file**);$/;"	p	signature:(struct file**, struct file**)
pipealloc	pipe.c	/^pipealloc(struct file **f0, struct file **f1)$/;"	f	signature:(struct file **f0, struct file **f1)
pipeclose	defs.h	/^void            pipeclose(struct pipe*, int);$/;"	p	signature:(struct pipe*, int)
pipeclose	pipe.c	/^pipeclose(struct pipe *p, int writable)$/;"	f	signature:(struct pipe *p, int writable)
pipecmd	sh.c	/^pipecmd(struct cmd *left, struct cmd *right)$/;"	f	signature:(struct cmd *left, struct cmd *right)
pipecmd	sh.c	/^struct pipecmd {$/;"	s	file:
pipecmd::left	sh.c	/^  struct cmd *left;$/;"	m	struct:pipecmd	typeref:struct:pipecmd::cmd	file:	access:public
pipecmd::right	sh.c	/^  struct cmd *right;$/;"	m	struct:pipecmd	typeref:struct:pipecmd::cmd	file:	access:public
pipecmd::type	sh.c	/^  int type;$/;"	m	struct:pipecmd	file:	access:public
piperead	defs.h	/^int             piperead(struct pipe*, char*, int);$/;"	p	signature:(struct pipe*, char*, int)
piperead	pipe.c	/^piperead(struct pipe *p, char *addr, int n)$/;"	f	signature:(struct pipe *p, char *addr, int n)
pipewrite	defs.h	/^int             pipewrite(struct pipe*, char*, int);$/;"	p	signature:(struct pipe*, char*, int)
pipewrite	pipe.c	/^pipewrite(struct pipe *p, char *addr, int n)$/;"	f	signature:(struct pipe *p, char *addr, int n)
plug_holes	lwip/core/mem.c	/^plug_holes(struct mem *mem)$/;"	f	file:	signature:(struct mem *mem)
poll	lwip/include/lwip/tcp.h	/^  err_t (* poll)(void *arg, struct tcp_pcb *pcb);$/;"	m	struct:tcp_pcb	access:public
poll_tcp	lwip/api/api_msg.c	/^poll_tcp(void *arg, struct tcp_pcb *pcb)$/;"	f	file:	signature:(void *arg, struct tcp_pcb *pcb)
pollinterval	lwip/include/lwip/tcp.h	/^  u8_t polltmr, pollinterval;$/;"	m	struct:tcp_pcb	access:public
polltmr	lwip/include/lwip/tcp.h	/^  u8_t polltmr, pollinterval;$/;"	m	struct:tcp_pcb	access:public
port	lwip/include/lwip/api_msg.h	/^      u16_t port;$/;"	m	struct:api_msg_msg	access:public
pppACCMMask	lwip/netif/ppp/ppp.c	/^static u_char pppACCMMask[] = {$/;"	v	file:
pppAppend	lwip/netif/ppp/ppp.c	/^static struct pbuf *pppAppend(u_char c, struct pbuf *nb, ext_accm *outACCM)$/;"	f	file:	signature:(u_char c, struct pbuf *nb, ext_accm *outACCM)
pppAuthType	lwip/netif/ppp/ppp.h	/^enum pppAuthType {$/;"	g
pppClose	lwip/netif/ppp/ppp.c	/^int pppClose(int pd)$/;"	f	signature:(int pd)
pppClose	lwip/netif/ppp/ppp.h	/^int pppClose(int pd);$/;"	p	signature:(int pd)
pppControl	lwip/netif/ppp/ppp.c	/^static PPPControl pppControl[NUM_PPP]; \/* The PPP interface control blocks. *\/$/;"	v	file:
pppDrop	lwip/netif/ppp/ppp.c	/^static void pppDrop(PPPControl *pc)$/;"	f	file:	signature:(PPPControl *pc)
pppDrop	lwip/netif/ppp/ppp.c	/^static void pppDrop(PPPControl *pc);$/;"	p	file:	signature:(PPPControl *pc)
pppHupCB	lwip/netif/ppp/ppp.c	/^pppHupCB(void *arg)$/;"	f	file:	signature:(void *arg)
pppIOCtl	lwip/netif/ppp/ppp.c	/^int  pppIOCtl(int pd, int cmd, void *arg)$/;"	f	signature:(int pd, int cmd, void *arg)
pppIOCtl	lwip/netif/ppp/ppp.h	/^int  pppIOCtl(int pd, int cmd, void *arg);$/;"	p	signature:(int pd, int cmd, void *arg)
pppInProc	lwip/netif/ppp/ppp.c	/^static void pppInProc(int pd, u_char *s, int l)$/;"	f	file:	signature:(int pd, u_char *s, int l)
pppInProc	lwip/netif/ppp/ppp.c	/^static void pppInProc(int pd, u_char *s, int l);$/;"	p	file:	signature:(int pd, u_char *s, int l)
pppInit	lwip/netif/ppp/ppp.c	/^void pppInit(void)$/;"	f	signature:(void)
pppInit	lwip/netif/ppp/ppp.h	/^void pppInit(void);$/;"	p	signature:(void)
pppInput	lwip/netif/ppp/ppp.c	/^static void pppInput(void *arg)$/;"	f	file:	signature:(void *arg)
pppInputHeader	lwip/netif/ppp/ppp.c	/^struct pppInputHeader {$/;"	s	file:
pppInputHeader::proto	lwip/netif/ppp/ppp.c	/^	u16_t proto;$/;"	m	struct:pppInputHeader	file:	access:public
pppInputHeader::unit	lwip/netif/ppp/ppp.c	/^	int unit;$/;"	m	struct:pppInputHeader	file:	access:public
pppMTU	lwip/netif/ppp/ppp.c	/^u_int pppMTU(int pd)$/;"	f	signature:(int pd)
pppMTU	lwip/netif/ppp/ppp.h	/^u_int pppMTU(int pd);$/;"	p	signature:(int pd)
pppMain	lwip/netif/ppp/ppp.c	/^static void pppMain(void *arg)$/;"	f	file:	signature:(void *arg)
pppMain	lwip/netif/ppp/ppp.c	/^static void pppMain(void *pd);$/;"	p	file:	signature:(void *pd)
pppMainWakeup	lwip/netif/ppp/ppp.c	/^pppMainWakeup(int pd)$/;"	f	signature:(int pd)
pppMainWakeup	lwip/netif/ppp/ppp.h	/^void pppMainWakeup(int pd);$/;"	p	signature:(int pd)
pppOpen	lwip/netif/ppp/ppp.c	/^int pppOpen(sio_fd_t fd, void (*linkStatusCB)(void *ctx, int errCode, void *arg), void *linkStatusCtx)$/;"	f	signature:(sio_fd_t fd, void (*linkStatusCB)(void *ctx, int errCode, void *arg), void *linkStatusCtx)
pppOpen	lwip/netif/ppp/ppp.h	/^int pppOpen(sio_fd_t fd, void (*linkStatusCB)(void *ctx, int errCode, void *arg), void *linkStatusCtx);$/;"	p	signature:(sio_fd_t fd, void (*linkStatusCB)(void *ctx, int errCode, void *arg), void *linkStatusCtx)
pppSetAuth	lwip/netif/ppp/ppp.c	/^void pppSetAuth(enum pppAuthType authType, const char *user, const char *passwd)$/;"	f	signature:(enum pppAuthType authType, const char *user, const char *passwd)
pppSetAuth	lwip/netif/ppp/ppp.h	/^void pppSetAuth(enum pppAuthType authType, const char *user, const char *passwd);$/;"	p	signature:(enum pppAuthType authType, const char *user, const char *passwd)
pppSigHUP	lwip/netif/ppp/ppp.c	/^void pppSigHUP(int pd)$/;"	f	signature:(int pd)
pppSigHUP	lwip/netif/ppp/ppp.h	/^void pppSigHUP(int pd);$/;"	p	signature:(int pd)
pppSingleBuf	lwip/netif/ppp/ppp.c	/^static struct pbuf *pppSingleBuf(struct pbuf *p)$/;"	f	file:	signature:(struct pbuf *p)
pppStartCB	lwip/netif/ppp/ppp.c	/^pppStartCB(void *arg)$/;"	f	file:	signature:(void *arg)
pppStopCB	lwip/netif/ppp/ppp.c	/^pppStopCB(void *arg)$/;"	f	file:	signature:(void *arg)
pppWrite	lwip/netif/ppp/ppp.c	/^int pppWrite(int pd, const u_char *s, int n)$/;"	f	signature:(int pd, const u_char *s, int n)
pppWrite	lwip/netif/ppp/ppp.h	/^int pppWrite(int pd, const u_char *s, int n);$/;"	p	signature:(int pd, const u_char *s, int n)
ppp_addrs	lwip/netif/ppp/ppp.h	/^struct ppp_addrs {$/;"	s
ppp_addrs::dns1	lwip/netif/ppp/ppp.h	/^    struct ip_addr our_ipaddr, his_ipaddr, netmask, dns1, dns2;$/;"	m	struct:ppp_addrs	typeref:struct:ppp_addrs::	access:public
ppp_addrs::dns2	lwip/netif/ppp/ppp.h	/^    struct ip_addr our_ipaddr, his_ipaddr, netmask, dns1, dns2;$/;"	m	struct:ppp_addrs	typeref:struct:ppp_addrs::	access:public
ppp_addrs::his_ipaddr	lwip/netif/ppp/ppp.h	/^    struct ip_addr our_ipaddr, his_ipaddr, netmask, dns1, dns2;$/;"	m	struct:ppp_addrs	typeref:struct:ppp_addrs::	access:public
ppp_addrs::netmask	lwip/netif/ppp/ppp.h	/^    struct ip_addr our_ipaddr, his_ipaddr, netmask, dns1, dns2;$/;"	m	struct:ppp_addrs	typeref:struct:ppp_addrs::	access:public
ppp_addrs::our_ipaddr	lwip/netif/ppp/ppp.h	/^    struct ip_addr our_ipaddr, his_ipaddr, netmask, dns1, dns2;$/;"	m	struct:ppp_addrs	typeref:struct:ppp_addrs::ip_addr	access:public
ppp_idle	lwip/netif/ppp/ppp.h	/^struct ppp_idle {$/;"	s
ppp_idle::recv_idle	lwip/netif/ppp/ppp.h	/^    u_short recv_idle;      \/* seconds since last NP packet received *\/$/;"	m	struct:ppp_idle	access:public
ppp_idle::xmit_idle	lwip/netif/ppp/ppp.h	/^    u_short xmit_idle;      \/* seconds since last NP packet sent *\/$/;"	m	struct:ppp_idle	access:public
ppp_protocols	lwip/netif/ppp/ppp.c	/^struct protent *ppp_protocols[] = {$/;"	v	typeref:struct:protent
ppp_recv_config	lwip/netif/ppp/ppp.c	/^void ppp_recv_config($/;"	f	signature:( int unit, int mru, u32_t asyncmap, int pcomp, int accomp )
ppp_recv_config	lwip/netif/ppp/ppp.h	/^void ppp_recv_config (int, int, u32_t, int, int);$/;"	p	signature:(int, int, u32_t, int, int)
ppp_send_config	lwip/netif/ppp/ppp.c	/^void ppp_send_config($/;"	f	signature:( int unit, int mtu, u32_t asyncmap, int pcomp, int accomp )
ppp_send_config	lwip/netif/ppp/ppp.h	/^void ppp_send_config (int, int, u32_t, int, int);$/;"	p	signature:(int, int, u32_t, int, int)
ppp_set_xaccm	lwip/netif/ppp/ppp.c	/^void ppp_set_xaccm(int unit, ext_accm *accm)$/;"	f	signature:(int unit, ext_accm *accm)
ppp_set_xaccm	lwip/netif/ppp/ppp.h	/^void ppp_set_xaccm (int, ext_accm *);$/;"	p	signature:(int, ext_accm *)
ppp_settings	lwip/netif/ppp/ppp.c	/^struct ppp_settings ppp_settings;$/;"	v	typeref:struct:ppp_settings
ppp_settings	lwip/netif/ppp/ppp.h	/^struct ppp_settings {$/;"	s
ppp_settings::auth_required	lwip/netif/ppp/ppp.h	/^	u_int  auth_required : 1;      \/* Peer is required to authenticate *\/$/;"	m	struct:ppp_settings	access:public
ppp_settings::disable_defaultip	lwip/netif/ppp/ppp.h	/^	u_int  disable_defaultip : 1;   \/* Don't use hostname for default IP addrs *\/$/;"	m	struct:ppp_settings	access:public
ppp_settings::explicit_remote	lwip/netif/ppp/ppp.h	/^	u_int  explicit_remote : 1;    \/* remote_name specified with remotename opt *\/$/;"	m	struct:ppp_settings	access:public
ppp_settings::idle_time_limit	lwip/netif/ppp/ppp.h	/^	u_short idle_time_limit; \/* Shut down link if idle for this long *\/$/;"	m	struct:ppp_settings	access:public
ppp_settings::maxconnect	lwip/netif/ppp/ppp.h	/^	int  maxconnect;         \/* Maximum connect time (seconds) *\/$/;"	m	struct:ppp_settings	access:public
ppp_settings::our_name	lwip/netif/ppp/ppp.h	/^	char our_name[MAXNAMELEN + 1];         \/* Our name for authentication purposes *\/$/;"	m	struct:ppp_settings	access:public
ppp_settings::passwd	lwip/netif/ppp/ppp.h	/^	char passwd[MAXSECRETLEN + 1];           \/* Password for PAP, secret for CHAP *\/$/;"	m	struct:ppp_settings	access:public
ppp_settings::refuse_chap	lwip/netif/ppp/ppp.h	/^	u_int  refuse_chap : 1;        \/* Don't wanna auth. ourselves with CHAP *\/$/;"	m	struct:ppp_settings	access:public
ppp_settings::refuse_pap	lwip/netif/ppp/ppp.h	/^	u_int  refuse_pap : 1;         \/* Don't wanna auth. ourselves with PAP *\/$/;"	m	struct:ppp_settings	access:public
ppp_settings::remote_name	lwip/netif/ppp/ppp.h	/^	char remote_name[MAXNAMELEN + 1];      \/* Peer's name for authentication *\/$/;"	m	struct:ppp_settings	access:public
ppp_settings::usehostname	lwip/netif/ppp/ppp.h	/^	u_int  usehostname : 1;        \/* Use hostname for our_name *\/$/;"	m	struct:ppp_settings	access:public
ppp_settings::usepeerdns	lwip/netif/ppp/ppp.h	/^	u_int  usepeerdns : 1;         \/* Ask peer for DNS adds *\/$/;"	m	struct:ppp_settings	access:public
ppp_settings::user	lwip/netif/ppp/ppp.h	/^	char user[MAXNAMELEN + 1];\/* Username for PAP *\/$/;"	m	struct:ppp_settings	access:public
ppp_trace	lwip/netif/ppp/pppdebug.h	/^void ppp_trace(int level, const char *format,...);$/;"	p	signature:(int level, const char *format,...)
pppifNetifInit	lwip/netif/ppp/ppp.c	/^static err_t pppifNetifInit(struct netif *netif)$/;"	f	file:	signature:(struct netif *netif)
pppifOutput	lwip/netif/ppp/ppp.c	/^static err_t pppifOutput(struct netif *netif, struct pbuf *pb, struct ip_addr *ipaddr)$/;"	f	file:	signature:(struct netif *netif, struct pbuf *pb, struct ip_addr *ipaddr)
preempt	usertests.c	/^preempt(void)$/;"	f	signature:(void)
prev	buf.h	/^  struct buf *prev; \/\/ LRU cache list$/;"	m	struct:buf	typeref:struct:buf::buf	access:public
prev	lwip/core/mem.c	/^  mem_size_t next, prev;$/;"	m	struct:mem	file:	access:public
printf	forktest.c	/^printf(int fd, char *s, ...)$/;"	f	signature:(int fd, char *s, ...)
printf	printf.c	/^printf(int fd, char *fmt, ...)$/;"	f	signature:(int fd, char *fmt, ...)
printf	user.h	/^void printf(int, char*, ...);$/;"	p	signature:(int, char*, ...)
printint	console.c	/^printint(int xx, int base, int sgn)$/;"	f	signature:(int xx, int base, int sgn)
printint	printf.c	/^printint(int fd, int xx, int base, int sgn)$/;"	f	file:	signature:(int fd, int xx, int base, int sgn)
printintlen	console.c	/^printintlen(int xx, int base, int sgn, int len, char fill)$/;"	f	signature:(int xx, int base, int sgn, int len, char fill)
printstack	console.c	/^printstack()$/;"	f
printstack	defs.h	/^void            printstack(void);$/;"	p	signature:(void)
prio	lwip/include/lwip/tcp.h	/^  u8_t prio;$/;"	m	struct:tcp_pcb	access:public
prio	lwip/include/lwip/tcp.h	/^  u8_t prio;$/;"	m	struct:tcp_pcb_listen	access:public
proc	proc.c	/^struct proc proc[NPROC];$/;"	v	typeref:struct:proc
proc	proc.h	/^struct proc {$/;"	s
proc::chan	proc.h	/^  void *chan;               \/\/ If non-zero, sleeping on chan$/;"	m	struct:proc	access:public
proc::context	proc.h	/^  struct context context;   \/\/ Switch here to run process$/;"	m	struct:proc	typeref:struct:proc::context	access:public
proc::cwd	proc.h	/^  struct inode *cwd;        \/\/ Current directory$/;"	m	struct:proc	typeref:struct:proc::inode	access:public
proc::killed	proc.h	/^  int killed;               \/\/ If non-zero, have been killed$/;"	m	struct:proc	access:public
proc::kstack	proc.h	/^  char *kstack;             \/\/ Bottom of kernel stack for this process$/;"	m	struct:proc	access:public
proc::mem	proc.h	/^  char *mem;                \/\/ Start of process memory (kernel address)$/;"	m	struct:proc	access:public
proc::name	proc.h	/^  char name[32];            \/\/ Process name (debugging)$/;"	m	struct:proc	access:public
proc::ofile	proc.h	/^  struct file *ofile[NOFILE];  \/\/ Open files$/;"	m	struct:proc	typeref:struct:proc::file	access:public
proc::parent	proc.h	/^  struct proc *parent;      \/\/ Parent process$/;"	m	struct:proc	typeref:struct:proc::proc	access:public
proc::pid	proc.h	/^  int pid;                  \/\/ Process ID$/;"	m	struct:proc	access:public
proc::state	proc.h	/^  enum proc_state state;    \/\/ Process state$/;"	m	struct:proc	typeref:enum:proc::proc_state	access:public
proc::sz	proc.h	/^  uint sz;                  \/\/ Size of process memory (bytes)$/;"	m	struct:proc	access:public
proc::tf	proc.h	/^  struct trapframe *tf;     \/\/ Trap frame for current interrupt$/;"	m	struct:proc	typeref:struct:proc::trapframe	access:public
proc::thr	proc.h	/^  struct thread *thr;$/;"	m	struct:proc	typeref:struct:proc::thread	access:public
proc_state	proc.h	/^enum proc_state { UNUSED, EMBRYO, SLEEPING, RUNNABLE, $/;"	g
proc_table_lock	proc.c	/^struct spinlock proc_table_lock;$/;"	v	typeref:struct:spinlock
procdump	defs.h	/^void            procdump(void);$/;"	p	signature:(void)
procdump	proc.c	/^procdump(void)$/;"	f	signature:(void)
product	mp.h	/^  uchar product[20];            \/\/ product id$/;"	m	struct:mpconf	access:public
proghdr	elf.h	/^struct proghdr {$/;"	s
proghdr::align	elf.h	/^  uint align;$/;"	m	struct:proghdr	access:public
proghdr::filesz	elf.h	/^  uint filesz;$/;"	m	struct:proghdr	access:public
proghdr::flags	elf.h	/^  uint flags;$/;"	m	struct:proghdr	access:public
proghdr::memsz	elf.h	/^  uint memsz;$/;"	m	struct:proghdr	access:public
proghdr::offset	elf.h	/^  uint offset;$/;"	m	struct:proghdr	access:public
proghdr::pa	elf.h	/^  uint pa;$/;"	m	struct:proghdr	access:public
proghdr::type	elf.h	/^  uint type;$/;"	m	struct:proghdr	access:public
proghdr::va	elf.h	/^  uint va;$/;"	m	struct:proghdr	access:public
protent	lwip/netif/ppp/ppp.h	/^struct protent {$/;"	s
protent::close	lwip/netif/ppp/ppp.h	/^    void (*close) (int unit, char *reason);$/;"	m	struct:protent	access:public
protent::enabled_flag	lwip/netif/ppp/ppp.h	/^    int  enabled_flag;      \/* 0 iff protocol is disabled *\/$/;"	m	struct:protent	access:public
protent::init	lwip/netif/ppp/ppp.h	/^    void (*init) (int unit);$/;"	m	struct:protent	access:public
protent::input	lwip/netif/ppp/ppp.h	/^    void (*input) (int unit, u_char *pkt, int len);$/;"	m	struct:protent	access:public
protent::lowerdown	lwip/netif/ppp/ppp.h	/^    void (*lowerdown) (int unit);$/;"	m	struct:protent	access:public
protent::lowerup	lwip/netif/ppp/ppp.h	/^    void (*lowerup) (int unit);$/;"	m	struct:protent	access:public
protent::name	lwip/netif/ppp/ppp.h	/^    char *name;         \/* Text name of protocol *\/$/;"	m	struct:protent	access:public
protent::open	lwip/netif/ppp/ppp.h	/^    void (*open) (int unit);$/;"	m	struct:protent	access:public
protent::protocol	lwip/netif/ppp/ppp.h	/^    u_short protocol;       \/* PPP protocol number *\/$/;"	m	struct:protent	access:public
protent::protrej	lwip/netif/ppp/ppp.h	/^    void (*protrej) (int unit);$/;"	m	struct:protent	access:public
proterr	lwip/include/lwip/stats.h	/^  u16_t proterr; \/* Protocol error. *\/$/;"	m	struct:stats_proto	access:public
proto	lwip/netif/ppp/ppp.c	/^	u16_t proto;$/;"	m	struct:pppInputHeader	file:	access:public
proto_name	lwip/netif/ppp/fsm.h	/^    char *proto_name;		\/* String name for protocol (for messages) *\/$/;"	m	struct:fsm_callbacks	access:public
protocol	lwip/include/lwip/raw.h	/^  u16_t protocol;$/;"	m	struct:raw_pcb	access:public
protocol	lwip/netif/ppp/fsm.h	/^    u_short protocol;		\/* Data Link Layer Protocol field value *\/$/;"	m	struct:fsm	access:public
protocol	lwip/netif/ppp/ppp.c	/^    int     protocol;           \/* PPP procotol, e.g. PPP_IP *\/$/;"	m	struct:npioctl	file:	access:public
protocol	lwip/netif/ppp/ppp.h	/^    u_short protocol;       \/* PPP protocol number *\/$/;"	m	struct:protent	access:public
protrej	lwip/netif/ppp/ppp.h	/^    void (*protrej) (int unit);$/;"	m	struct:protent	access:public
protreject	lwip/netif/ppp/fsm.h	/^    void (*protreject)		\/* Called when Protocol-Reject received *\/$/;"	m	struct:fsm_callbacks	access:public
proxy_arp	lwip/netif/ppp/ipcp.h	/^    u_int proxy_arp : 1;			\/* Make proxy ARP entry for peer? *\/$/;"	m	struct:ipcp_options	access:public
psem	lwip/core/sys.c	/^    sys_sem_t *psem;$/;"	m	struct:sswt_cb	file:	access:public
ptr	lwip/include/lwip/api.h	/^  struct pbuf *p, *ptr;$/;"	m	struct:netbuf	typeref:struct:netbuf::	access:public
ptr	umalloc.c	/^    union header *ptr;$/;"	m	struct:header	typeref:union:header::header	file:	access:public
putc	printf.c	/^putc(int fd, char c)$/;"	f	signature:(int fd, char c)
qnext	buf.h	/^  struct buf *qnext; \/\/ disk queue$/;"	m	struct:buf	typeref:struct:buf::buf	access:public
queued	lwip/xv6/arch/sys_arch.c	/^    sys_sem_t free, queued;$/;"	m	struct:mbox	file:	access:public
r	console.c	/^  int r;  \/\/ Read index$/;"	m	struct:__anon1	file:	access:public
ram	lwip/core/mem.c	/^static u8_t ram[MEM_SIZE + sizeof(struct mem) + MEM_ALIGNMENT];$/;"	v	file:
ram_end	lwip/core/mem.c	/^static struct mem *ram_end;$/;"	v	typeref:struct:mem	file:
randCount	lwip/netif/ppp/randm.c	/^static long randCount = 0;      \/* Pseudo-random incrementer *\/$/;"	v	file:
randPool	lwip/netif/ppp/randm.c	/^static char randPool[RANDPOOLSZ];   \/* Pool of randomness. *\/$/;"	v	file:
raw	lwip/include/lwip/api.h	/^    struct raw_pcb *raw;$/;"	m	union:netconn	typeref:struct:netconn::raw_pcb	access:public
raw_bind	lwip/core/raw.c	/^raw_bind(struct raw_pcb *pcb, struct ip_addr *ipaddr)$/;"	f	signature:(struct raw_pcb *pcb, struct ip_addr *ipaddr)
raw_bind	lwip/include/lwip/raw.h	/^err_t            raw_bind       (struct raw_pcb *pcb, struct ip_addr *ipaddr);$/;"	p	signature:(struct raw_pcb *pcb, struct ip_addr *ipaddr)
raw_connect	lwip/core/raw.c	/^raw_connect(struct raw_pcb *pcb, struct ip_addr *ipaddr)$/;"	f	signature:(struct raw_pcb *pcb, struct ip_addr *ipaddr)
raw_connect	lwip/include/lwip/raw.h	/^err_t            raw_connect    (struct raw_pcb *pcb, struct ip_addr *ipaddr);$/;"	p	signature:(struct raw_pcb *pcb, struct ip_addr *ipaddr)
raw_init	lwip/core/raw.c	/^raw_init(void)$/;"	f	signature:(void)
raw_init	lwip/include/lwip/raw.h	/^void             raw_init       (void);$/;"	p	signature:(void)
raw_input	lwip/core/raw.c	/^raw_input(struct pbuf *p, struct netif *inp)$/;"	f	signature:(struct pbuf *p, struct netif *inp)
raw_input	lwip/include/lwip/raw.h	/^int              raw_input      (struct pbuf *p, struct netif *inp);$/;"	p	signature:(struct pbuf *p, struct netif *inp)
raw_new	lwip/core/raw.c	/^raw_new(u16_t proto) {$/;"	f	signature:(u16_t proto)
raw_new	lwip/include/lwip/raw.h	/^struct raw_pcb * raw_new        (u16_t proto);$/;"	p	signature:(u16_t proto)
raw_pcb	lwip/include/lwip/raw.h	/^struct raw_pcb {$/;"	s
raw_pcb::IP_PCB	lwip/include/lwip/raw.h	/^  IP_PCB;$/;"	m	struct:raw_pcb	access:public
raw_pcb::next	lwip/include/lwip/raw.h	/^  struct raw_pcb *next;$/;"	m	struct:raw_pcb	typeref:struct:raw_pcb::raw_pcb	access:public
raw_pcb::protocol	lwip/include/lwip/raw.h	/^  u16_t protocol;$/;"	m	struct:raw_pcb	access:public
raw_pcb::recv	lwip/include/lwip/raw.h	/^  int (* recv)(void *arg, struct raw_pcb *pcb, struct pbuf *p,$/;"	m	struct:raw_pcb	access:public
raw_pcb::recv_arg	lwip/include/lwip/raw.h	/^  void *recv_arg;$/;"	m	struct:raw_pcb	access:public
raw_pcbs	lwip/core/raw.c	/^static struct raw_pcb *raw_pcbs = NULL;$/;"	v	typeref:struct:raw_pcb	file:
raw_recv	lwip/core/raw.c	/^raw_recv(struct raw_pcb *pcb,$/;"	f	signature:(struct raw_pcb *pcb, int (* recv)(void *arg, struct raw_pcb *upcb, struct pbuf *p, struct ip_addr *addr), void *recv_arg)
raw_recv	lwip/include/lwip/raw.h	/^void             raw_recv       (struct raw_pcb *pcb,$/;"	p	signature:(struct raw_pcb *pcb, int (* recv)(void *arg, struct raw_pcb *pcb, struct pbuf *p, struct ip_addr *addr), void *recv_arg)
raw_remove	lwip/core/raw.c	/^raw_remove(struct raw_pcb *pcb)$/;"	f	signature:(struct raw_pcb *pcb)
raw_remove	lwip/include/lwip/raw.h	/^void             raw_remove     (struct raw_pcb *pcb);$/;"	p	signature:(struct raw_pcb *pcb)
raw_send	lwip/core/raw.c	/^raw_send(struct raw_pcb *pcb, struct pbuf *p)$/;"	f	signature:(struct raw_pcb *pcb, struct pbuf *p)
raw_send	lwip/include/lwip/raw.h	/^err_t            raw_send       (struct raw_pcb *pcb, struct pbuf *p);$/;"	p	signature:(struct raw_pcb *pcb, struct pbuf *p)
raw_send_to	lwip/core/raw.c	/^raw_send_to(struct raw_pcb *pcb, struct pbuf *p, struct ip_addr *ipaddr)$/;"	f	signature:(struct raw_pcb *pcb, struct pbuf *p, struct ip_addr *ipaddr)
raw_send_to	lwip/include/lwip/raw.h	/^err_t            raw_send_to    (struct raw_pcb *pcb, struct pbuf *p, struct ip_addr *ipaddr);$/;"	p	signature:(struct raw_pcb *pcb, struct pbuf *p, struct ip_addr *ipaddr)
rcv_err	e100.h	/^    char rcv_err :  1;$/;"	m	struct:rf_status	access:public
rcv_nxt	lwip/include/lwip/tcp.h	/^  u32_t rcv_nxt;   \/* next seqno expected *\/$/;"	m	struct:tcp_pcb	access:public
rcv_wnd	lwip/include/lwip/tcp.h	/^  u16_t rcv_wnd;   \/* receiver window *\/$/;"	m	struct:tcp_pcb	access:public
rcvevent	lwip/api/sockets.c	/^  u16_t rcvevent;$/;"	m	struct:lwip_socket	file:	access:public
read	dev.h	/^  int (*read)(struct inode*, char*, int);$/;"	m	struct:devsw	access:public
read	lwip/include/lwip/sockets.h	/^#define read(/;"	d
read	user.h	/^int read(int, void*, int);$/;"	p	signature:(int, void*, int)
read_eflags	x86.h	/^read_eflags(void)$/;"	f	signature:(void)
readable	file.h	/^  char readable;$/;"	m	struct:file	access:public
readi	defs.h	/^int             readi(struct inode*, char*, uint, uint);$/;"	p	signature:(struct inode*, char*, uint, uint)
readi	fs.c	/^readi(struct inode *ip, char *dst, uint off, uint n)$/;"	f	signature:(struct inode *ip, char *dst, uint off, uint n)
readopen	pipe.c	/^  int readopen;   \/\/ read fd is still open$/;"	m	struct:pipe	file:	access:public
readp	pipe.c	/^  int readp;      \/\/ next index to read$/;"	m	struct:pipe	file:	access:public
readsb	fs.c	/^readsb(int dev, struct superblock *sb)$/;"	f	file:	signature:(int dev, struct superblock *sb)
readsect	bootmain.c	/^readsect(void *dst, uint offset)$/;"	f	signature:(void *dst, uint offset)
readseg	bootmain.c	/^readseg(uint va, uint count, uint offset)$/;"	f	signature:(uint va, uint count, uint offset)
readseg	bootmain.c	/^void readseg(uint, uint, uint);$/;"	p	file:
readset	lwip/api/sockets.c	/^    fd_set *readset;$/;"	m	struct:lwip_select_cb	file:	access:public
receive	lwip/include/netif/ethernetif.h	/^  int (*receive)(void *data, uint32_t len);$/;"	m	struct:ethernetif	access:public
recv	lwip/include/lwip/raw.h	/^  int (* recv)(void *arg, struct raw_pcb *pcb, struct pbuf *p,$/;"	m	struct:raw_pcb	access:public
recv	lwip/include/lwip/sockets.h	/^#define recv(/;"	d
recv	lwip/include/lwip/stats.h	/^  u16_t recv;    \/* Received packets. *\/$/;"	m	struct:stats_proto	access:public
recv	lwip/include/lwip/tcp.h	/^  err_t (* recv)(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err);$/;"	m	struct:tcp_pcb	access:public
recv	lwip/include/lwip/udp.h	/^  void (* recv)(void *arg, struct udp_pcb *pcb, struct pbuf *p,$/;"	m	struct:udp_pcb	access:public
recv	user.h	/^int recv(int s, void *mem, int len, unsigned int flags);$/;"	p	signature:(int s, void *mem, int len, unsigned int flags)
recv_arg	lwip/include/lwip/raw.h	/^  void *recv_arg;$/;"	m	struct:raw_pcb	access:public
recv_arg	lwip/include/lwip/udp.h	/^  void *recv_arg;  $/;"	m	struct:udp_pcb	access:public
recv_avail	lwip/include/lwip/api.h	/^  u16_t recv_avail;$/;"	m	struct:netconn	access:public
recv_data	lwip/core/tcp_in.c	/^static struct pbuf *recv_data;$/;"	v	typeref:struct:pbuf	file:
recv_flags	lwip/core/tcp_in.c	/^static u8_t recv_flags;$/;"	v	file:
recv_idle	lwip/netif/ppp/ppp.h	/^    u_short recv_idle;      \/* seconds since last NP packet received *\/$/;"	m	struct:ppp_idle	access:public
recv_raw	lwip/api/api_msg.c	/^recv_raw(void *arg, struct raw_pcb *pcb, struct pbuf *p,$/;"	f	file:	signature:(void *arg, struct raw_pcb *pcb, struct pbuf *p, struct ip_addr *addr)
recv_tcp	lwip/api/api_msg.c	/^recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)$/;"	f	file:	signature:(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
recv_udp	lwip/api/api_msg.c	/^recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,$/;"	f	file:	signature:(void *arg, struct udp_pcb *pcb, struct pbuf *p, struct ip_addr *addr, u16_t port)
recvfrom	lwip/include/lwip/sockets.h	/^#define recvfrom(/;"	d
recvfrom	user.h	/^int recvfrom(int s, void *mem, int len, unsigned int flags,$/;"	p	signature:(int s, void *mem, int len, unsigned int flags, struct sockaddr *from, socklen_t *fromlen)
recvmbox	lwip/include/lwip/api.h	/^  sys_mbox_t recvmbox;$/;"	m	struct:netconn	access:public
redircmd	sh.c	/^redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)$/;"	f	signature:(struct cmd *subcmd, char *file, char *efile, int mode, int fd)
redircmd	sh.c	/^struct redircmd {$/;"	s	file:
redircmd::cmd	sh.c	/^  struct cmd *cmd;$/;"	m	struct:redircmd	typeref:struct:redircmd::cmd	file:	access:public
redircmd::efile	sh.c	/^  char *efile;$/;"	m	struct:redircmd	file:	access:public
redircmd::fd	sh.c	/^  int fd;$/;"	m	struct:redircmd	file:	access:public
redircmd::file	sh.c	/^  char *file;$/;"	m	struct:redircmd	file:	access:public
redircmd::mode	sh.c	/^  int mode;$/;"	m	struct:redircmd	file:	access:public
redircmd::type	sh.c	/^  int type;$/;"	m	struct:redircmd	file:	access:public
ref	file.h	/^  int ref; \/\/ reference count$/;"	m	struct:file	access:public
ref	fsvar.h	/^  int ref;            \/\/ Reference count$/;"	m	struct:inode	access:public
ref	lwip/include/lwip/pbuf.h	/^  u16_t ref;$/;"	m	struct:pbuf	access:public
refresh_locked	lwip/include/lwip/stats.h	/^  u16_t refresh_locked;$/;"	m	struct:stats_pbuf	access:public
refuse_chap	lwip/netif/ppp/ppp.h	/^	u_int  refuse_chap : 1;        \/* Don't wanna auth. ourselves with CHAP *\/$/;"	m	struct:ppp_settings	access:public
refuse_pap	lwip/netif/ppp/ppp.h	/^	u_int  refuse_pap : 1;         \/* Don't wanna auth. ourselves with PAP *\/$/;"	m	struct:ppp_settings	access:public
reg	ioapic.c	/^  uint reg;$/;"	m	struct:ioapic	file:	access:public
reg_base	pci.h	/^    uint32_t reg_base[6];$/;"	m	struct:pci_func	access:public
reg_irq_handler	picirq.c	/^reg_irq_handler(int irq_num, irq_handler_t handler)$/;"	f	signature:(int irq_num, irq_handler_t handler)
reg_irq_handler	picirq.h	/^void reg_irq_handler(int irq_num, irq_handler_t handler);$/;"	p	signature:(int irq_num, irq_handler_t handler)
reg_size	pci.h	/^    uint32_t reg_size[6];$/;"	m	struct:pci_func	access:public
regbase	e100.c	/^    uint32_t regbase[6], regsize[6];$/;"	m	struct:e100_devinfo	file:	access:public
regsize	e100.c	/^    uint32_t regbase[6], regsize[6];$/;"	m	struct:e100_devinfo	file:	access:public
rejci	lwip/netif/ppp/fsm.h	/^    int  (*rejci)			\/* Reject our Configuration Information *\/$/;"	m	struct:fsm_callbacks	access:public
release	defs.h	/^void            release(struct spinlock*);$/;"	p	signature:(struct spinlock*)
release	spinlock.c	/^release(struct spinlock *lock)$/;"	f	signature:(struct spinlock *lock)
remote_name	lwip/netif/ppp/ppp.h	/^	char remote_name[MAXNAMELEN + 1];      \/* Peer's name for authentication *\/$/;"	m	struct:ppp_settings	access:public
remote_port	lwip/include/lwip/tcp.h	/^  u16_t remote_port;$/;"	m	struct:tcp_pcb	access:public
remote_port	lwip/include/lwip/udp.h	/^  u16_t local_port, remote_port;$/;"	m	struct:udp_pcb	access:public
req_addr	lwip/netif/ppp/ipcp.h	/^    u_int req_addr : 1;			\/* Ask peer to send IP address? *\/$/;"	m	struct:ipcp_options	access:public
req_dns1	lwip/netif/ppp/ipcp.h	/^    u_int req_dns1 : 1;			\/* Ask peer to send primary DNS address? *\/$/;"	m	struct:ipcp_options	access:public
req_dns2	lwip/netif/ppp/ipcp.h	/^    u_int req_dns2 : 1;			\/* Ask peer to send secondary DNS address? *\/$/;"	m	struct:ipcp_options	access:public
reqci	lwip/netif/ppp/fsm.h	/^    int  (*reqci)			\/* Request peer's Configuration Information *\/$/;"	m	struct:fsm_callbacks	access:public
reqid	lwip/netif/ppp/fsm.h	/^    u_char reqid;			\/* Current request id *\/$/;"	m	struct:fsm	access:public
request_timeout	lwip/include/lwip/dhcp.h	/^  u16_t request_timeout; \/* #ticks with period DHCP_FINE_TIMER_SECS for request timeout *\/$/;"	m	struct:dhcp	access:public
res	e100.h	/^            char res    : 3;$/;"	m	struct:op_transmit_cmd_cmd_tag	access:public
res	e100.h	/^            short res : 10;$/;"	m	struct:command_block_tag	access:public
res	e100.h	/^        char res :      1;$/;"	m	struct:op_transmit_cmd	access:public
res	e100.h	/^    char res :      1;$/;"	m	struct:rf_status	access:public
res	e100.h	/^    char res : 1;$/;"	m	struct:scb_command_word	access:public
res	e100.h	/^    uint32_t res;$/;"	m	struct:rf_desc	access:public
res2	e100.h	/^        char res2 :         2;$/;"	m	struct:rf_desc	access:public
res2	e100.h	/^    char res2 :     1;$/;"	m	struct:rf_status	access:public
res3	e100.h	/^    char res3 :     1;$/;"	m	struct:rf_status	access:public
reserved	mp.h	/^  uchar reserved;$/;"	m	struct:mpconf	access:public
reserved	mp.h	/^  uchar reserved[3];$/;"	m	struct:mp	access:public
reserved	mp.h	/^  uchar reserved[8];$/;"	m	struct:mpproc	access:public
resetci	lwip/netif/ppp/fsm.h	/^    void (*resetci)			\/* Reset our Configuration Information *\/$/;"	m	struct:fsm_callbacks	access:public
resp_id	lwip/netif/ppp/chap.h	/^    u_char resp_id;		\/* ID for response messages *\/$/;"	m	struct:chap_state	access:public
resp_length	lwip/netif/ppp/chap.h	/^    u_char resp_length;		\/* length of response *\/$/;"	m	struct:chap_state	access:public
resp_name	lwip/netif/ppp/chap.h	/^    char *resp_name;		\/* Our name to send with response *\/$/;"	m	struct:chap_state	access:public
resp_transmits	lwip/netif/ppp/chap.h	/^    int resp_transmits;		\/* Number of transmissions of response *\/$/;"	m	struct:chap_state	access:public
resp_type	lwip/netif/ppp/chap.h	/^    u_char resp_type;		\/* hash algorithm for responses *\/$/;"	m	struct:chap_state	access:public
response	lwip/netif/ppp/chap.h	/^    u_char response[MAX_RESPONSE_LENGTH];	\/* Response to send *\/$/;"	m	struct:chap_state	access:public
restart	lwip/netif/ppp/lcp.h	/^    u_int restart : 1;			\/* Restart vs. exit after close *\/$/;"	m	struct:lcp_options	access:public
retransmit	lwip/netif/ppp/fsm.h	/^    void (*retransmit)		\/* Retransmission is necessary *\/$/;"	m	struct:fsm_callbacks	access:public
retransmits	lwip/netif/ppp/fsm.h	/^    int retransmits;		\/* Number of retransmissions left *\/$/;"	m	struct:fsm	access:public
rexmit	lwip/include/lwip/stats.h	/^  u16_t rexmit;  \/* Retransmitted packets. *\/$/;"	m	struct:stats_proto	access:public
rf_desc	e100.h	/^typedef struct rf_desc {$/;"	s
rf_desc	e100.h	/^} rf_desc;$/;"	t	typeref:struct:rf_desc
rf_desc::count	e100.h	/^        uint16_t count :    14;$/;"	m	struct:rf_desc	access:public
rf_desc::eof	e100.h	/^        char eof :          1;$/;"	m	struct:rf_desc	access:public
rf_desc::f	e100.h	/^        char f :            1;$/;"	m	struct:rf_desc	access:public
rf_desc::res2	e100.h	/^        char res2 :         2;$/;"	m	struct:rf_desc	access:public
rf_desc::size	e100.h	/^        uint16_t size :     14;$/;"	m	struct:rf_desc	access:public
rf_desc::head	e100.h	/^    volatile command_block head;$/;"	m	struct:rf_desc	access:public
rf_desc::res	e100.h	/^    uint32_t res;$/;"	m	struct:rf_desc	access:public
rf_status	e100.h	/^typedef struct rf_status {$/;"	s
rf_status	e100.h	/^} rf_status;$/;"	t	typeref:struct:rf_status
rf_status::align_err	e100.h	/^    char align_err :1;$/;"	m	struct:rf_status	access:public
rf_status::crc_err	e100.h	/^    char crc_err :  1;$/;"	m	struct:rf_status	access:public
rf_status::dma_err	e100.h	/^    char dma_err :  1;$/;"	m	struct:rf_status	access:public
rf_status::ia	e100.h	/^    char ia :       1;$/;"	m	struct:rf_status	access:public
rf_status::no_buf	e100.h	/^    char no_buf :   1;$/;"	m	struct:rf_status	access:public
rf_status::nomatch	e100.h	/^    char nomatch :  1;$/;"	m	struct:rf_status	access:public
rf_status::rcv_err	e100.h	/^    char rcv_err :  1;$/;"	m	struct:rf_status	access:public
rf_status::res	e100.h	/^    char res :      1;$/;"	m	struct:rf_status	access:public
rf_status::res2	e100.h	/^    char res2 :     1;$/;"	m	struct:rf_status	access:public
rf_status::res3	e100.h	/^    char res3 :     1;$/;"	m	struct:rf_status	access:public
rf_status::tco	e100.h	/^    char tco :      1;$/;"	m	struct:rf_status	access:public
rf_status::tooshort	e100.h	/^    char tooshort : 1;$/;"	m	struct:rf_status	access:public
rf_status::type	e100.h	/^    char type :     1;$/;"	m	struct:rf_status	access:public
right	sh.c	/^  struct cmd *right;$/;"	m	struct:listcmd	typeref:struct:listcmd::cmd	file:	access:public
right	sh.c	/^  struct cmd *right;$/;"	m	struct:pipecmd	typeref:struct:pipecmd::cmd	file:	access:public
ring_alloc	e100.c	/^ring_alloc(e100_dev *dev, uint32_t len)$/;"	f	signature:(e100_dev *dev, uint32_t len)
ring_init	e100.c	/^ring_init(e100_dev *dev)$/;"	f	signature:(e100_dev *dev)
ring_init	e100.c	/^void ring_init(e100_dev *dev);$/;"	p	file:	signature:(e100_dev *dev)
ring_printinfo	e100.c	/^ring_printinfo(e100_dev *dev)$/;"	f	signature:(e100_dev *dev)
ring_printinfo	e100.c	/^void ring_printinfo(e100_dev *dev);$/;"	p	file:	signature:(e100_dev *dev)
rinode	mkfs.c	/^rinode(uint inum, struct dinode *ip)$/;"	f	signature:(uint inum, struct dinode *ip)
rinode	mkfs.c	/^void rinode(uint inum, struct dinode *ip);$/;"	p	file:	signature:(uint inum, struct dinode *ip)
rmdot	usertests.c	/^rmdot(void)$/;"	f	signature:(void)
rnr	e100.h	/^    char rnr  : 1;$/;"	m	struct:scb_status_word	access:public
rnr_mask	e100.h	/^    char rnr_mask : 1;$/;"	m	struct:scb_command_word	access:public
rsect	mkfs.c	/^rsect(uint sec, void *buf)$/;"	f	signature:(uint sec, void *buf)
rsect	mkfs.c	/^void rsect(uint sec, void *buf);$/;"	p	file:	signature:(uint sec, void *buf)
rstate	lwip/netif/ppp/vj.h	/^    struct cstate rstate[MAX_SLOTS];	\/* receive connection states *\/$/;"	m	struct:vjcompress	typeref:struct:vjcompress::cstate	access:public
rsv	e100.h	/^    char rsv  : 1;$/;"	m	struct:scb_status_word	access:public
rsv1	mmu.h	/^  uint rsv1 : 1;       \/\/ Reserved$/;"	m	struct:segdesc	access:public
rsv1	mmu.h	/^  uint rsv1 : 3;        \/\/ reserved(should be zero I guess)$/;"	m	struct:gatedesc	access:public
rterr	lwip/include/lwip/stats.h	/^  u16_t rterr;   \/* Routing error. *\/$/;"	m	struct:stats_proto	access:public
rtime	lwip/include/lwip/tcp.h	/^  u16_t rtime;$/;"	m	struct:tcp_pcb	access:public
rto	lwip/include/lwip/tcp.h	/^  u16_t rto;    \/* retransmission time-out *\/$/;"	m	struct:tcp_pcb	access:public
rtseq	lwip/include/lwip/tcp.h	/^  u32_t rtseq;  \/* sequence number being timed *\/$/;"	m	struct:tcp_pcb	access:public
rttest	lwip/include/lwip/tcp.h	/^  u16_t rttest; \/* RTT estimate in 500ms ticks *\/$/;"	m	struct:tcp_pcb	access:public
ru_command	e100.h	/^    char ru_command : 3;$/;"	m	struct:scb_command_word	access:public
ru_first	e100.c	/^    rf_desc *ru_first;$/;"	m	struct:e100_devinfo	file:	access:public
ru_full	e100.c	/^    int ru_full;$/;"	m	struct:e100_devinfo	file:	access:public
ru_last	e100.c	/^    rf_desc *ru_last;$/;"	m	struct:e100_devinfo	file:	access:public
ru_prev	e100.c	/^    rf_desc *ru_prev;$/;"	m	struct:e100_devinfo	file:	access:public
ru_state_name	e100.c	/^char *ru_state_name[16] = {$/;"	v
ru_state_name	e100.c	/^char *ru_state_name[];$/;"	v
rubase	e100.c	/^    uint32_t rubase;$/;"	m	struct:e100_devinfo	file:	access:public
rucount	e100.c	/^    uint32_t rucount;$/;"	m	struct:e100_devinfo	file:	access:public
rulock	e100.c	/^    struct spinlock rulock;$/;"	m	struct:e100_devinfo	typeref:struct:e100_devinfo::spinlock	file:	access:public
run	kalloc.c	/^struct run {$/;"	s	file:
run::len	kalloc.c	/^  int len; \/\/ bytes$/;"	m	struct:run	file:	access:public
run::next	kalloc.c	/^  struct run *next;$/;"	m	struct:run	typeref:struct:run::run	file:	access:public
runcmd	sh.c	/^runcmd(struct cmd *cmd)$/;"	f	signature:(struct cmd *cmd)
rus	e100.h	/^    char rus  : 4;$/;"	m	struct:scb_status_word	access:public
rusize	e100.c	/^    uint32_t rusize;$/;"	m	struct:e100_devinfo	file:	access:public
rxlock	e100.c	/^    struct spinlock rxlock;$/;"	m	struct:e100_devinfo	typeref:struct:e100_devinfo::spinlock	file:	access:public
s	e100.h	/^            char s      : 1;$/;"	m	struct:op_transmit_cmd_cmd_tag	access:public
s	e100.h	/^            char s :    1;     \/\/ Suspend after complete$/;"	m	struct:command_block_tag	access:public
s	mmu.h	/^  uint s : 1;           \/\/ must be 0 (system)$/;"	m	struct:gatedesc	access:public
s	mmu.h	/^  uint s : 1;          \/\/ 0 = system, 1 = application$/;"	m	struct:segdesc	access:public
s	umalloc.c	/^  } s;$/;"	m	union:header	typeref:struct:header	file:	access:public
s16_t	lwip/xv6/arch/cc.h	/^typedef signed short s16_t;$/;"	t
s32_t	lwip/xv6/arch/cc.h	/^typedef signed short s32_t;$/;"	t
s8_t	lwip/xv6/arch/cc.h	/^typedef signed char s8_t;$/;"	t
s_addr	lwip/include/ipv4/lwip/ip_addr.h	/^  u32_t s_addr;$/;"	m	struct:in_addr	access:public
sa	lwip/include/lwip/tcp.h	/^  s16_t sa, sv;$/;"	m	struct:tcp_pcb	access:public
sa_data	lwip/include/lwip/sockets.h	/^  char sa_data[14];$/;"	m	struct:sockaddr	access:public
sa_family	lwip/include/lwip/sockets.h	/^  u8_t sa_family;$/;"	m	struct:sockaddr	access:public
sa_len	lwip/include/lwip/sockets.h	/^  u8_t sa_len;$/;"	m	struct:sockaddr	access:public
safestrcpy	defs.h	/^char*           safestrcpy(char*, const char*, int);$/;"	p	signature:(char*, const char*, int)
safestrcpy	string.c	/^safestrcpy(char *s, const char *t, int n)$/;"	f	signature:(char *s, const char *t, int n)
sb	mkfs.c	/^struct superblock sb;$/;"	v	typeref:struct:superblock
sbrk	user.h	/^char* sbrk(int);$/;"	p	signature:(int)
scb_command_word	e100.h	/^struct scb_command_word {$/;"	s
scb_command_word	e100.h	/^} scb_command_word;$/;"	t	typeref:union:scb_command_word_tag
scb_command_word::cna_mask	e100.h	/^    char cna_mask : 1;$/;"	m	struct:scb_command_word	access:public
scb_command_word::cu_command	e100.h	/^    char cu_command : 4;$/;"	m	struct:scb_command_word	access:public
scb_command_word::cx_mask	e100.h	/^    char cx_mask : 1;$/;"	m	struct:scb_command_word	access:public
scb_command_word::er_mask	e100.h	/^    char er_mask : 1;$/;"	m	struct:scb_command_word	access:public
scb_command_word::fcp_mask	e100.h	/^    char fcp_mask : 1;$/;"	m	struct:scb_command_word	access:public
scb_command_word::fr_mask	e100.h	/^    char fr_mask : 1;$/;"	m	struct:scb_command_word	access:public
scb_command_word::m	e100.h	/^    char m : 1;$/;"	m	struct:scb_command_word	access:public
scb_command_word::res	e100.h	/^    char res : 1;$/;"	m	struct:scb_command_word	access:public
scb_command_word::rnr_mask	e100.h	/^    char rnr_mask : 1;$/;"	m	struct:scb_command_word	access:public
scb_command_word::ru_command	e100.h	/^    char ru_command : 3;$/;"	m	struct:scb_command_word	access:public
scb_command_word::si	e100.h	/^    char si : 1;$/;"	m	struct:scb_command_word	access:public
scb_command_word_tag	e100.h	/^typedef union scb_command_word_tag {$/;"	u
scb_command_word_tag::cmd	e100.h	/^    struct scb_command_word cmd;$/;"	m	union:scb_command_word_tag	typeref:struct:scb_command_word_tag::scb_command_word	access:public
scb_command_word_tag::word	e100.h	/^    uint16_t word;$/;"	m	union:scb_command_word_tag	access:public
scb_status_word	e100.h	/^struct scb_status_word {$/;"	s
scb_status_word	e100.h	/^} scb_status_word;$/;"	t	typeref:union:scb_status_word_tag
scb_status_word::cna	e100.h	/^    char cna  : 1;$/;"	m	struct:scb_status_word	access:public
scb_status_word::cus	e100.h	/^    char cus  : 2;$/;"	m	struct:scb_status_word	access:public
scb_status_word::cx	e100.h	/^    char cx   : 1;$/;"	m	struct:scb_status_word	access:public
scb_status_word::fcp	e100.h	/^    char fcp  : 1;$/;"	m	struct:scb_status_word	access:public
scb_status_word::fr	e100.h	/^    char fr   : 1;$/;"	m	struct:scb_status_word	access:public
scb_status_word::mdi	e100.h	/^    char mdi  : 1;$/;"	m	struct:scb_status_word	access:public
scb_status_word::rnr	e100.h	/^    char rnr  : 1;$/;"	m	struct:scb_status_word	access:public
scb_status_word::rsv	e100.h	/^    char rsv  : 1;$/;"	m	struct:scb_status_word	access:public
scb_status_word::rus	e100.h	/^    char rus  : 4;$/;"	m	struct:scb_status_word	access:public
scb_status_word::swi	e100.h	/^    char swi  : 1;$/;"	m	struct:scb_status_word	access:public
scb_status_word::zero	e100.h	/^    char zero : 2;$/;"	m	struct:scb_status_word	access:public
scb_status_word_tag	e100.h	/^typedef union scb_status_word_tag {$/;"	u
scb_status_word_tag::status	e100.h	/^    struct scb_status_word status;$/;"	m	union:scb_status_word_tag	typeref:struct:scb_status_word_tag::scb_status_word	access:public
scb_status_word_tag::word	e100.h	/^    uint16_t word;$/;"	m	union:scb_status_word_tag	access:public
sched	proc.c	/^sched(void)$/;"	f	signature:(void)
scheduler	defs.h	/^void            scheduler(void) __attribute__((noreturn));$/;"	p	signature:(void)
scheduler	proc.c	/^scheduler(void)$/;"	f	signature:(void)
sector	buf.h	/^  uint sector;$/;"	m	struct:buf	access:public
seen_ack	lwip/netif/ppp/fsm.h	/^    u_char seen_ack;		\/* Have received valid Ack\/Nak\/Rej to Req *\/$/;"	m	struct:fsm	access:public
segdesc	mmu.h	/^struct segdesc {$/;"	s
segdesc::avl	mmu.h	/^  uint avl : 1;        \/\/ Unused (available for software use)$/;"	m	struct:segdesc	access:public
segdesc::base_15_0	mmu.h	/^  uint base_15_0 : 16; \/\/ Low bits of segment base address$/;"	m	struct:segdesc	access:public
segdesc::base_23_16	mmu.h	/^  uint base_23_16 : 8; \/\/ Middle bits of segment base address$/;"	m	struct:segdesc	access:public
segdesc::base_31_24	mmu.h	/^  uint base_31_24 : 8; \/\/ High bits of segment base address$/;"	m	struct:segdesc	access:public
segdesc::db	mmu.h	/^  uint db : 1;         \/\/ 0 = 16-bit segment, 1 = 32-bit segment$/;"	m	struct:segdesc	access:public
segdesc::dpl	mmu.h	/^  uint dpl : 2;        \/\/ Descriptor Privilege Level$/;"	m	struct:segdesc	access:public
segdesc::g	mmu.h	/^  uint g : 1;          \/\/ Granularity: limit scaled by 4K when set$/;"	m	struct:segdesc	access:public
segdesc::lim_15_0	mmu.h	/^  uint lim_15_0 : 16;  \/\/ Low bits of segment limit$/;"	m	struct:segdesc	access:public
segdesc::lim_19_16	mmu.h	/^  uint lim_19_16 : 4;  \/\/ High bits of segment limit$/;"	m	struct:segdesc	access:public
segdesc::p	mmu.h	/^  uint p : 1;          \/\/ Present$/;"	m	struct:segdesc	access:public
segdesc::rsv1	mmu.h	/^  uint rsv1 : 1;       \/\/ Reserved$/;"	m	struct:segdesc	access:public
segdesc::s	mmu.h	/^  uint s : 1;          \/\/ 0 = system, 1 = application$/;"	m	struct:segdesc	access:public
segdesc::type	mmu.h	/^  uint type : 4;       \/\/ Segment type (see STS_ constants)$/;"	m	struct:segdesc	access:public
select	lwip/include/lwip/sockets.h	/^#define select(/;"	d
select_cb_list	lwip/api/sockets.c	/^static struct lwip_select_cb *select_cb_list = 0;$/;"	v	typeref:struct:lwip_select_cb	file:
selectsem	lwip/api/sockets.c	/^static sys_sem_t selectsem = 0;$/;"	v	file:
sem	lwip/api/sockets.c	/^    sys_sem_t sem;$/;"	m	struct:lwip_select_cb	file:	access:public
sem	lwip/include/lwip/api.h	/^  sys_sem_t sem;$/;"	m	struct:netconn	access:public
sem	lwip/include/lwip/stats.h	/^  struct stats_syselem sem;$/;"	m	struct:stats_sys	typeref:struct:stats_sys::stats_syselem	access:public
sem	lwip/include/lwip/tcpip.h	/^  sys_sem_t *sem;$/;"	m	struct:tcpip_msg	access:public
sem	sem.c	/^struct sem {$/;"	s	file:
sem::lock	sem.c	/^    struct spinlock lock;$/;"	m	struct:sem	typeref:struct:sem::spinlock	file:	access:public
sem::val	sem.c	/^    int val;$/;"	m	struct:sem	file:	access:public
sem::waiters	sem.c	/^    int waiters;$/;"	m	struct:sem	file:	access:public
sem_destroy	sem.c	/^int sem_destroy(sem_t *sem)$/;"	f	signature:(sem_t *sem)
sem_destroy	sem.h	/^int sem_destroy(sem_t *sem);$/;"	p	signature:(sem_t *sem)
sem_init	sem.c	/^int sem_init(sem_t *sem, unsigned int value)$/;"	f	signature:(sem_t *sem, unsigned int value)
sem_init	sem.h	/^int sem_init(sem_t *sem, unsigned int value);$/;"	p	signature:(sem_t *sem, unsigned int value)
sem_post	sem.c	/^void sem_post(sem_t *sem)$/;"	f	signature:(sem_t *sem)
sem_post	sem.h	/^void sem_post(sem_t *sem);$/;"	p	signature:(sem_t *sem)
sem_signalled	lwip/api/sockets.c	/^    int sem_signalled;$/;"	m	struct:lwip_select_cb	file:	access:public
sem_size	sem.c	/^int sem_size()$/;"	f
sem_size	sem.h	/^int sem_size();$/;"	p	signature:()
sem_t	sem.h	/^typedef struct sem sem_t;$/;"	t	typeref:struct:sem
sem_timedwait	sem.c	/^int sem_timedwait(sem_t *sem, int timo)$/;"	f	signature:(sem_t *sem, int timo)
sem_timedwait	sem.h	/^int sem_timedwait(sem_t *sem, int timo);$/;"	p	signature:(sem_t *sem, int timo)
sem_trywait	sem.c	/^int sem_trywait(sem_t *sem)$/;"	f	signature:(sem_t *sem)
sem_trywait	sem.h	/^int sem_trywait(sem_t *sem);$/;"	p	signature:(sem_t *sem)
sem_value	sem.c	/^int sem_value(sem_t *sem)$/;"	f	signature:(sem_t *sem)
sem_value	sem.h	/^int sem_value(sem_t *sem);$/;"	p	signature:(sem_t *sem)
sem_wait	sem.c	/^void sem_wait(sem_t *sem)$/;"	f	signature:(sem_t *sem)
sem_wait	sem.h	/^void sem_wait(sem_t *sem);$/;"	p	signature:(sem_t *sem)
send	lwip/include/lwip/sockets.h	/^#define send(/;"	d
send	lwip/include/netif/ethernetif.h	/^  int (*send)(void *data, uint32_t len);$/;"	m	struct:ethernetif	access:public
send	user.h	/^int send(int s, void *dataptr, int size, unsigned int flags);$/;"	p	signature:(int s, void *dataptr, int size, unsigned int flags)
sendevent	lwip/api/sockets.c	/^  u16_t sendevent;$/;"	m	struct:lwip_socket	file:	access:public
sendto	lwip/include/lwip/sockets.h	/^#define sendto(/;"	d
sendto	user.h	/^int sendto(int s, void *dataptr, int size, unsigned int flags,$/;"	p	signature:(int s, void *dataptr, int size, unsigned int flags, struct sockaddr *to, socklen_t tolen)
sent	lwip/include/lwip/tcp.h	/^  err_t (* sent)(void *arg, struct tcp_pcb *pcb, u16_t space);$/;"	m	struct:tcp_pcb	access:public
sent_tcp	lwip/api/api_msg.c	/^sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)$/;"	f	file:	signature:(void *arg, struct tcp_pcb *pcb, u16_t len)
seqno	lwip/core/tcp_in.c	/^static u32_t seqno, ackno;$/;"	v	file:
seqno	lwip/include/ipv6/lwip/icmp.h	/^  u16_t seqno;$/;"	m	struct:icmp_echo_hdr	access:public
server_ip_addr	lwip/include/lwip/dhcp.h	/^  struct ip_addr server_ip_addr; \/* dhcp server address that offered this lease *\/$/;"	m	struct:dhcp	typeref:struct:dhcp::ip_addr	access:public
serverstate	lwip/netif/ppp/chap.h	/^    int serverstate;		\/* Server state *\/$/;"	m	struct:chap_state	access:public
set_errno	lwip/api/sockets.c	/^#define set_errno(/;"	d	file:
setkey	lwip/netif/ppp/chpms.c	/^extern void setkey(const char *);$/;"	p	file:	signature:(const char *)
setsockopt	lwip/include/lwip/sockets.h	/^#define setsockopt(/;"	d
setsockopt	user.h	/^int setsockopt (int s, int level, int optname, const void *optval, socklen_t optlen);$/;"	p	signature:(int s, int level, int optname, const void *optval, socklen_t optlen)
setup_tcp	lwip/api/api_msg.c	/^setup_tcp(struct netconn *conn)$/;"	f	file:	signature:(struct netconn *conn)
setupsegs	defs.h	/^void            setupsegs(struct proc*);$/;"	p	signature:(struct proc*)
setupsegs	proc.c	/^setupsegs(struct proc *p)$/;"	f	signature:(struct proc *p)
sf	e100.h	/^            char sf     : 1;$/;"	m	struct:op_transmit_cmd_cmd_tag	access:public
sh_args	init.c	/^char *sh_args[] = { "sh", 0 };$/;"	v
sharedfd	usertests.c	/^sharedfd(void)$/;"	f	signature:(void)
shentsize	elf.h	/^  ushort shentsize;$/;"	m	struct:elfhdr	access:public
shiftcode	kbd.h	/^static uchar shiftcode[256] =$/;"	v
shiftmap	kbd.h	/^static uchar shiftmap[256] =$/;"	v
shnum	elf.h	/^  ushort shnum;$/;"	m	struct:elfhdr	access:public
shoff	elf.h	/^  uint shoff;$/;"	m	struct:elfhdr	access:public
shstrndx	elf.h	/^  ushort shstrndx;$/;"	m	struct:elfhdr	access:public
shutdown	lwip/include/lwip/sockets.h	/^#define shutdown(/;"	d
shutdown	user.h	/^int shutdown(int s, int how);$/;"	p	signature:(int s, int how)
si	e100.h	/^    char si : 1;$/;"	m	struct:scb_command_word	access:public
sifaddr	lwip/netif/ppp/ppp.c	/^int sifaddr($/;"	f	signature:( int pd, u32_t o, u32_t h, u32_t m, u32_t ns1, u32_t ns2 )
sifaddr	lwip/netif/ppp/ppp.h	/^int  sifaddr (int, u32_t, u32_t, u32_t, u32_t, u32_t);$/;"	p	signature:(int, u32_t, u32_t, u32_t, u32_t, u32_t)
sifdefaultroute	lwip/netif/ppp/ppp.c	/^int sifdefaultroute(int pd, u32_t l, u32_t g)$/;"	f	signature:(int pd, u32_t l, u32_t g)
sifdefaultroute	lwip/netif/ppp/ppp.h	/^int  sifdefaultroute (int, u32_t, u32_t);$/;"	p	signature:(int, u32_t, u32_t)
sifdown	lwip/netif/ppp/ppp.c	/^int sifdown(int pd)$/;"	f	signature:(int pd)
sifdown	lwip/netif/ppp/ppp.h	/^int  sifdown (int);	$/;"	p	signature:(int)
sifnpmode	lwip/netif/ppp/ppp.c	/^int sifnpmode(int u, int proto, enum NPmode mode)$/;"	f	signature:(int u, int proto, enum NPmode mode)
sifnpmode	lwip/netif/ppp/ppp.h	/^int  sifnpmode (int u, int proto, enum NPmode mode);$/;"	p	signature:(int u, int proto, enum NPmode mode)
sifup	lwip/netif/ppp/ppp.c	/^int sifup(int pd)$/;"	f	signature:(int pd)
sifup	lwip/netif/ppp/ppp.h	/^int  sifup (int);		$/;"	p	signature:(int)
sifvjcomp	lwip/netif/ppp/ppp.c	/^int sifvjcomp($/;"	f	signature:( int pd, int vjcomp, int cidcomp, int maxcid )
sifvjcomp	lwip/netif/ppp/ppp.h	/^int  sifvjcomp (int, int, int, int);$/;"	p	signature:(int, int, int, int)
sig_hup	lwip/netif/ppp/ppp.c	/^    int  sig_hup;                       \/* Carrier lost. *\/$/;"	m	struct:PPPControl_s	file:	access:public
signature	mp.h	/^  uchar signature[4];           \/\/ "PCMP"$/;"	m	struct:mpconf	access:public
signature	mp.h	/^  uchar signature[4];           \/\/ "_MP_"$/;"	m	struct:mp	access:public
signature	mp.h	/^  uchar signature[4];           \/\/ CPU signature$/;"	m	struct:mpproc	access:public
silent	lwip/netif/ppp/lcp.h	/^    u_int silent : 1;				\/* Wait for the other end to start first *\/$/;"	m	struct:lcp_options	access:public
sin_addr	lwip/include/lwip/sockets.h	/^  struct in_addr sin_addr;$/;"	m	struct:sockaddr_in	typeref:struct:sockaddr_in::in_addr	access:public
sin_family	lwip/include/lwip/sockets.h	/^  u8_t sin_family;$/;"	m	struct:sockaddr_in	access:public
sin_len	lwip/include/lwip/sockets.h	/^  u8_t sin_len;$/;"	m	struct:sockaddr_in	access:public
sin_port	lwip/include/lwip/sockets.h	/^  u16_t sin_port;$/;"	m	struct:sockaddr_in	access:public
sin_zero	lwip/include/lwip/sockets.h	/^  char sin_zero[8];$/;"	m	struct:sockaddr_in	access:public
sio_fd_t	lwip/include/lwip/sio.h	/^typedef void * sio_fd_t;$/;"	t
sio_open	lwip/include/lwip/sio.h	/^sio_fd_t sio_open(u8_t);$/;"	p	signature:(u8_t)
sio_read	lwip/include/lwip/sio.h	/^u32_t sio_read(sio_fd_t, u8_t *, u32_t);$/;"	p	signature:(sio_fd_t, u8_t *, u32_t)
sio_read_abort	lwip/include/lwip/sio.h	/^void sio_read_abort(sio_fd_t);$/;"	p	signature:(sio_fd_t)
sio_recv	lwip/include/lwip/sio.h	/^u8_t sio_recv(sio_fd_t);$/;"	p	signature:(sio_fd_t)
sio_send	lwip/include/lwip/sio.h	/^void sio_send(u8_t, sio_fd_t);$/;"	p	signature:(u8_t, sio_fd_t)
sio_write	lwip/include/lwip/sio.h	/^u32_t sio_write(sio_fd_t, u8_t *, u32_t);$/;"	p	signature:(sio_fd_t, u8_t *, u32_t)
size	e100.h	/^        uint16_t size :     14;$/;"	m	struct:rf_desc	access:public
size	fs.h	/^  uint size;            \/\/ Size of file (bytes)$/;"	m	struct:dinode	access:public
size	fs.h	/^  uint size;         \/\/ Size of file system image (blocks)$/;"	m	struct:superblock	access:public
size	fsvar.h	/^  uint size;$/;"	m	struct:inode	access:public
size	mkfs.c	/^int size = 1024;$/;"	v
size	stat.h	/^  uint size;   \/\/ Size of file in bytes$/;"	m	struct:stat	access:public
size	umalloc.c	/^    uint size;$/;"	m	struct:header	file:	access:public
skipelem	fs.c	/^skipelem(char *path, char *name)$/;"	f	file:	signature:(char *path, char *name)
sleep	defs.h	/^void            sleep(void*, struct spinlock*);$/;"	p	signature:(void*, struct spinlock*)
sleep	proc.c	/^sleep(void *chan, struct spinlock *lk)$/;"	f	signature:(void *chan, struct spinlock *lk)
sleep	user.h	/^int sleep(int);$/;"	p	signature:(int)
slipif_init	lwip/include/netif/slipif.h	/^err_t slipif_init(struct netif * netif);$/;"	p	signature:(struct netif * netif)
slipif_init	lwip/netif/slipif.c	/^slipif_init(struct netif *netif)$/;"	f	signature:(struct netif *netif)
slipif_input	lwip/netif/slipif.c	/^slipif_input( struct netif * netif )$/;"	f	file:	signature:( struct netif * netif )
slipif_loop	lwip/netif/slipif.c	/^slipif_loop(void *nf)$/;"	f	file:	signature:(void *nf)
slipif_output	lwip/netif/slipif.c	/^slipif_output(struct netif *netif, struct pbuf *p, struct ip_addr *ipaddr)$/;"	f	signature:(struct netif *netif, struct pbuf *p, struct ip_addr *ipaddr)
slots	lwip/xv6/arch/sys_arch.c	/^    void *slots[NSLOTS];$/;"	m	struct:mbox	file:	access:public
snd_buf	lwip/include/lwip/tcp.h	/^  u16_t snd_buf;   \/* Available buffer space for sending (in bytes). *\/$/;"	m	struct:tcp_pcb	access:public
snd_lbb	lwip/include/lwip/tcp.h	/^    snd_lbb;       \/* Sequence number of next byte to be buffered. *\/$/;"	m	struct:tcp_pcb	access:public
snd_max	lwip/include/lwip/tcp.h	/^    snd_max,       \/* Highest seqno sent. *\/$/;"	m	struct:tcp_pcb	access:public
snd_nxt	lwip/include/lwip/tcp.h	/^  u32_t snd_nxt,       \/* next seqno to be sent *\/$/;"	m	struct:tcp_pcb	access:public
snd_queuelen	lwip/include/lwip/tcp.h	/^  u8_t snd_queuelen; \/* Available buffer space for sending (in tcp_segs). *\/$/;"	m	struct:tcp_pcb	access:public
snd_wl1	lwip/include/lwip/tcp.h	/^    snd_wl1, snd_wl2, \/* Sequence and acknowledgement numbers of last$/;"	m	struct:tcp_pcb	access:public
snd_wl2	lwip/include/lwip/tcp.h	/^    snd_wl1, snd_wl2, \/* Sequence and acknowledgement numbers of last$/;"	m	struct:tcp_pcb	access:public
snd_wnd	lwip/include/lwip/tcp.h	/^    snd_wnd,       \/* sender window *\/$/;"	m	struct:tcp_pcb	access:public
snmp_add_ifinoctets	lwip/include/lwip/snmp.h	/^#define snmp_add_ifinoctets(/;"	d
snmp_add_ifinoctets	lwip/include/lwip/snmp.h	/^void snmp_add_ifinoctets(unsigned long value); $/;"	p	signature:(unsigned long value)
snmp_add_ifoutoctets	lwip/include/lwip/snmp.h	/^#define snmp_add_ifoutoctets(/;"	d
snmp_add_ifoutoctets	lwip/include/lwip/snmp.h	/^void snmp_add_ifoutoctets(unsigned long value);$/;"	p	signature:(unsigned long value)
snmp_inc_icmpinaddrmaskreps	lwip/include/lwip/snmp.h	/^#define snmp_inc_icmpinaddrmaskreps(/;"	d
snmp_inc_icmpinaddrmaskreps	lwip/include/lwip/snmp.h	/^void snmp_inc_icmpinaddrmaskreps(void);$/;"	p	signature:(void)
snmp_inc_icmpinaddrmasks	lwip/include/lwip/snmp.h	/^#define snmp_inc_icmpinaddrmasks(/;"	d
snmp_inc_icmpinaddrmasks	lwip/include/lwip/snmp.h	/^void snmp_inc_icmpinaddrmasks(void);$/;"	p	signature:(void)
snmp_inc_icmpindestunreachs	lwip/include/lwip/snmp.h	/^#define snmp_inc_icmpindestunreachs(/;"	d
snmp_inc_icmpindestunreachs	lwip/include/lwip/snmp.h	/^void snmp_inc_icmpindestunreachs(void);$/;"	p	signature:(void)
snmp_inc_icmpinechoreps	lwip/include/lwip/snmp.h	/^#define snmp_inc_icmpinechoreps(/;"	d
snmp_inc_icmpinechoreps	lwip/include/lwip/snmp.h	/^void snmp_inc_icmpinechoreps(void);$/;"	p	signature:(void)
snmp_inc_icmpinechos	lwip/include/lwip/snmp.h	/^#define snmp_inc_icmpinechos(/;"	d
snmp_inc_icmpinechos	lwip/include/lwip/snmp.h	/^void snmp_inc_icmpinechos(void);$/;"	p	signature:(void)
snmp_inc_icmpinerrors	lwip/include/lwip/snmp.h	/^#define snmp_inc_icmpinerrors(/;"	d
snmp_inc_icmpinerrors	lwip/include/lwip/snmp.h	/^void snmp_inc_icmpinerrors(void);$/;"	p	signature:(void)
snmp_inc_icmpinmsgs	lwip/include/lwip/snmp.h	/^#define snmp_inc_icmpinmsgs(/;"	d
snmp_inc_icmpinmsgs	lwip/include/lwip/snmp.h	/^void snmp_inc_icmpinmsgs(void);$/;"	p	signature:(void)
snmp_inc_icmpinparmprobs	lwip/include/lwip/snmp.h	/^#define snmp_inc_icmpinparmprobs(/;"	d
snmp_inc_icmpinparmprobs	lwip/include/lwip/snmp.h	/^void snmp_inc_icmpinparmprobs(void);$/;"	p	signature:(void)
snmp_inc_icmpinredirects	lwip/include/lwip/snmp.h	/^#define snmp_inc_icmpinredirects(/;"	d
snmp_inc_icmpinredirects	lwip/include/lwip/snmp.h	/^void snmp_inc_icmpinredirects(void);$/;"	p	signature:(void)
snmp_inc_icmpinsrcquenchs	lwip/include/lwip/snmp.h	/^#define snmp_inc_icmpinsrcquenchs(/;"	d
snmp_inc_icmpinsrcquenchs	lwip/include/lwip/snmp.h	/^void snmp_inc_icmpinsrcquenchs(void);$/;"	p	signature:(void)
snmp_inc_icmpintimeexcds	lwip/include/lwip/snmp.h	/^#define snmp_inc_icmpintimeexcds(/;"	d
snmp_inc_icmpintimeexcds	lwip/include/lwip/snmp.h	/^void snmp_inc_icmpintimeexcds(void);$/;"	p	signature:(void)
snmp_inc_icmpintimestampreps	lwip/include/lwip/snmp.h	/^#define snmp_inc_icmpintimestampreps(/;"	d
snmp_inc_icmpintimestampreps	lwip/include/lwip/snmp.h	/^void snmp_inc_icmpintimestampreps(void);$/;"	p	signature:(void)
snmp_inc_icmpintimestamps	lwip/include/lwip/snmp.h	/^#define snmp_inc_icmpintimestamps(/;"	d
snmp_inc_icmpintimestamps	lwip/include/lwip/snmp.h	/^void snmp_inc_icmpintimestamps(void);$/;"	p	signature:(void)
snmp_inc_icmpoutaddrmaskreps	lwip/include/lwip/snmp.h	/^#define snmp_inc_icmpoutaddrmaskreps(/;"	d
snmp_inc_icmpoutaddrmaskreps	lwip/include/lwip/snmp.h	/^void snmp_inc_icmpoutaddrmaskreps(void);$/;"	p	signature:(void)
snmp_inc_icmpoutaddrmasks	lwip/include/lwip/snmp.h	/^#define snmp_inc_icmpoutaddrmasks(/;"	d
snmp_inc_icmpoutaddrmasks	lwip/include/lwip/snmp.h	/^void snmp_inc_icmpoutaddrmasks(void);$/;"	p	signature:(void)
snmp_inc_icmpoutdestunreachs	lwip/include/lwip/snmp.h	/^#define snmp_inc_icmpoutdestunreachs(/;"	d
snmp_inc_icmpoutdestunreachs	lwip/include/lwip/snmp.h	/^void snmp_inc_icmpoutdestunreachs(void);$/;"	p	signature:(void)
snmp_inc_icmpoutechoreps	lwip/include/lwip/snmp.h	/^#define snmp_inc_icmpoutechoreps(/;"	d
snmp_inc_icmpoutechoreps	lwip/include/lwip/snmp.h	/^void snmp_inc_icmpoutechoreps(void);$/;"	p	signature:(void)
snmp_inc_icmpoutechos	lwip/include/lwip/snmp.h	/^#define snmp_inc_icmpoutechos(/;"	d
snmp_inc_icmpoutechos	lwip/include/lwip/snmp.h	/^void snmp_inc_icmpoutechos(void);$/;"	p	signature:(void)
snmp_inc_icmpouterrors	lwip/include/lwip/snmp.h	/^#define snmp_inc_icmpouterrors(/;"	d
snmp_inc_icmpouterrors	lwip/include/lwip/snmp.h	/^void snmp_inc_icmpouterrors(void);$/;"	p	signature:(void)
snmp_inc_icmpoutmsgs	lwip/include/lwip/snmp.h	/^#define snmp_inc_icmpoutmsgs(/;"	d
snmp_inc_icmpoutmsgs	lwip/include/lwip/snmp.h	/^void snmp_inc_icmpoutmsgs(void);$/;"	p	signature:(void)
snmp_inc_icmpoutparmprobs	lwip/include/lwip/snmp.h	/^#define snmp_inc_icmpoutparmprobs(/;"	d
snmp_inc_icmpoutparmprobs	lwip/include/lwip/snmp.h	/^void snmp_inc_icmpoutparmprobs(void);$/;"	p	signature:(void)
snmp_inc_icmpoutredirects	lwip/include/lwip/snmp.h	/^#define snmp_inc_icmpoutredirects(/;"	d
snmp_inc_icmpoutredirects	lwip/include/lwip/snmp.h	/^void snmp_inc_icmpoutredirects(void); $/;"	p	signature:(void)
snmp_inc_icmpoutsrcquenchs	lwip/include/lwip/snmp.h	/^#define snmp_inc_icmpoutsrcquenchs(/;"	d
snmp_inc_icmpoutsrcquenchs	lwip/include/lwip/snmp.h	/^void snmp_inc_icmpoutsrcquenchs(void);$/;"	p	signature:(void)
snmp_inc_icmpouttimeexcds	lwip/include/lwip/snmp.h	/^#define snmp_inc_icmpouttimeexcds(/;"	d
snmp_inc_icmpouttimeexcds	lwip/include/lwip/snmp.h	/^void snmp_inc_icmpouttimeexcds(void);$/;"	p	signature:(void)
snmp_inc_icmpouttimestampreps	lwip/include/lwip/snmp.h	/^#define snmp_inc_icmpouttimestampreps(/;"	d
snmp_inc_icmpouttimestampreps	lwip/include/lwip/snmp.h	/^void snmp_inc_icmpouttimestampreps(void);$/;"	p	signature:(void)
snmp_inc_icmpouttimestamps	lwip/include/lwip/snmp.h	/^#define snmp_inc_icmpouttimestamps(/;"	d
snmp_inc_icmpouttimestamps	lwip/include/lwip/snmp.h	/^void snmp_inc_icmpouttimestamps(void);$/;"	p	signature:(void)
snmp_inc_ifindiscards	lwip/include/lwip/snmp.h	/^#define snmp_inc_ifindiscards(/;"	d
snmp_inc_ifindiscards	lwip/include/lwip/snmp.h	/^void snmp_inc_ifindiscards(void);$/;"	p	signature:(void)
snmp_inc_ifinnucastpkts	lwip/include/lwip/snmp.h	/^#define snmp_inc_ifinnucastpkts(/;"	d
snmp_inc_ifinnucastpkts	lwip/include/lwip/snmp.h	/^void snmp_inc_ifinnucastpkts(void);$/;"	p	signature:(void)
snmp_inc_ifinucastpkts	lwip/include/lwip/snmp.h	/^#define snmp_inc_ifinucastpkts(/;"	d
snmp_inc_ifinucastpkts	lwip/include/lwip/snmp.h	/^void snmp_inc_ifinucastpkts(void);$/;"	p	signature:(void)
snmp_inc_ifoutdiscards	lwip/include/lwip/snmp.h	/^#define snmp_inc_ifoutdiscards(/;"	d
snmp_inc_ifoutdiscards	lwip/include/lwip/snmp.h	/^void snmp_inc_ifoutdiscards(void);$/;"	p	signature:(void)
snmp_inc_ifoutnucastpkts	lwip/include/lwip/snmp.h	/^#define snmp_inc_ifoutnucastpkts(/;"	d
snmp_inc_ifoutnucastpkts	lwip/include/lwip/snmp.h	/^void snmp_inc_ifoutnucastpkts(void);$/;"	p	signature:(void)
snmp_inc_ifoutucastpkts	lwip/include/lwip/snmp.h	/^#define snmp_inc_ifoutucastpkts(/;"	d
snmp_inc_ifoutucastpkts	lwip/include/lwip/snmp.h	/^void snmp_inc_ifoutucastpkts(void);$/;"	p	signature:(void)
snmp_inc_ipforwdatagrams	lwip/include/lwip/snmp.h	/^#define snmp_inc_ipforwdatagrams(/;"	d
snmp_inc_ipforwdatagrams	lwip/include/lwip/snmp.h	/^void snmp_inc_ipforwdatagrams(void);$/;"	p	signature:(void)
snmp_inc_ipindelivers	lwip/include/lwip/snmp.h	/^#define snmp_inc_ipindelivers(/;"	d
snmp_inc_ipindelivers	lwip/include/lwip/snmp.h	/^void snmp_inc_ipindelivers(void);$/;"	p	signature:(void)
snmp_inc_ipindiscards	lwip/include/lwip/snmp.h	/^#define snmp_inc_ipindiscards(/;"	d
snmp_inc_ipindiscards	lwip/include/lwip/snmp.h	/^void snmp_inc_ipindiscards(void);$/;"	p	signature:(void)
snmp_inc_ipinreceives	lwip/include/lwip/snmp.h	/^#define snmp_inc_ipinreceives(/;"	d
snmp_inc_ipinreceives	lwip/include/lwip/snmp.h	/^void snmp_inc_ipinreceives(void);$/;"	p	signature:(void)
snmp_inc_ipnoroutes	lwip/include/lwip/snmp.h	/^#define snmp_inc_ipnoroutes(/;"	d
snmp_inc_ipnoroutes	lwip/include/lwip/snmp.h	/^void snmp_inc_ipnoroutes(void);$/;"	p	signature:(void)
snmp_inc_ipoutdiscards	lwip/include/lwip/snmp.h	/^#define snmp_inc_ipoutdiscards(/;"	d
snmp_inc_ipoutdiscards	lwip/include/lwip/snmp.h	/^void snmp_inc_ipoutdiscards(void);$/;"	p	signature:(void)
snmp_inc_ipoutrequests	lwip/include/lwip/snmp.h	/^#define snmp_inc_ipoutrequests(/;"	d
snmp_inc_ipoutrequests	lwip/include/lwip/snmp.h	/^void snmp_inc_ipoutrequests(void);$/;"	p	signature:(void)
snmp_inc_ipunknownprotos	lwip/include/lwip/snmp.h	/^#define snmp_inc_ipunknownprotos(/;"	d
snmp_inc_ipunknownprotos	lwip/include/lwip/snmp.h	/^void snmp_inc_ipunknownprotos(void);$/;"	p	signature:(void)
snmp_inc_tcpactiveopens	lwip/include/lwip/snmp.h	/^#define snmp_inc_tcpactiveopens(/;"	d
snmp_inc_tcpactiveopens	lwip/include/lwip/snmp.h	/^void snmp_inc_tcpactiveopens(void);$/;"	p	signature:(void)
snmp_inc_tcpattemptfails	lwip/include/lwip/snmp.h	/^#define snmp_inc_tcpattemptfails(/;"	d
snmp_inc_tcpattemptfails	lwip/include/lwip/snmp.h	/^void snmp_inc_tcpattemptfails(void);$/;"	p	signature:(void)
snmp_inc_tcpcurrestab	lwip/include/lwip/snmp.h	/^#define snmp_inc_tcpcurrestab(/;"	d
snmp_inc_tcpcurrestab	lwip/include/lwip/snmp.h	/^void snmp_inc_tcpcurrestab(void);$/;"	p	signature:(void)
snmp_inc_tcpestabresets	lwip/include/lwip/snmp.h	/^#define snmp_inc_tcpestabresets(/;"	d
snmp_inc_tcpestabresets	lwip/include/lwip/snmp.h	/^void snmp_inc_tcpestabresets(void);$/;"	p	signature:(void)
snmp_inc_tcpinerrs	lwip/include/lwip/snmp.h	/^#define snmp_inc_tcpinerrs(/;"	d
snmp_inc_tcpinerrs	lwip/include/lwip/snmp.h	/^void snmp_inc_tcpinerrs(void);$/;"	p	signature:(void)
snmp_inc_tcpinsegs	lwip/include/lwip/snmp.h	/^#define snmp_inc_tcpinsegs(/;"	d
snmp_inc_tcpinsegs	lwip/include/lwip/snmp.h	/^void snmp_inc_tcpinsegs(void);$/;"	p	signature:(void)
snmp_inc_tcpoutrsts	lwip/include/lwip/snmp.h	/^#define snmp_inc_tcpoutrsts(/;"	d
snmp_inc_tcpoutrsts	lwip/include/lwip/snmp.h	/^void snmp_inc_tcpoutrsts(void);$/;"	p	signature:(void)
snmp_inc_tcpoutsegs	lwip/include/lwip/snmp.h	/^#define snmp_inc_tcpoutsegs(/;"	d
snmp_inc_tcpoutsegs	lwip/include/lwip/snmp.h	/^void snmp_inc_tcpoutsegs(void);$/;"	p	signature:(void)
snmp_inc_tcppassiveopens	lwip/include/lwip/snmp.h	/^#define snmp_inc_tcppassiveopens(/;"	d
snmp_inc_tcppassiveopens	lwip/include/lwip/snmp.h	/^void snmp_inc_tcppassiveopens(void);$/;"	p	signature:(void)
snmp_inc_tcpretranssegs	lwip/include/lwip/snmp.h	/^#define snmp_inc_tcpretranssegs(/;"	d
snmp_inc_tcpretranssegs	lwip/include/lwip/snmp.h	/^void snmp_inc_tcpretranssegs(void);$/;"	p	signature:(void)
snmp_inc_udpindatagrams	lwip/include/lwip/snmp.h	/^#define snmp_inc_udpindatagrams(/;"	d
snmp_inc_udpindatagrams	lwip/include/lwip/snmp.h	/^void snmp_inc_udpindatagrams(void);$/;"	p	signature:(void)
snmp_inc_udpinerrors	lwip/include/lwip/snmp.h	/^#define snmp_inc_udpinerrors(/;"	d
snmp_inc_udpinerrors	lwip/include/lwip/snmp.h	/^void snmp_inc_udpinerrors(void);$/;"	p	signature:(void)
snmp_inc_udpnoports	lwip/include/lwip/snmp.h	/^#define snmp_inc_udpnoports(/;"	d
snmp_inc_udpnoports	lwip/include/lwip/snmp.h	/^void snmp_inc_udpnoports(void);$/;"	p	signature:(void)
snmp_inc_udpoutdatagrams	lwip/include/lwip/snmp.h	/^#define snmp_inc_udpoutdatagrams(/;"	d
snmp_inc_udpoutdatagrams	lwip/include/lwip/snmp.h	/^void snmp_inc_udpoutdatagrams(void);$/;"	p	signature:(void)
sock_set_errno	lwip/api/sockets.c	/^#define sock_set_errno(/;"	d	file:
sockaddr	lwip/include/lwip/sockets.h	/^struct sockaddr {$/;"	s
sockaddr::sa_data	lwip/include/lwip/sockets.h	/^  char sa_data[14];$/;"	m	struct:sockaddr	access:public
sockaddr::sa_family	lwip/include/lwip/sockets.h	/^  u8_t sa_family;$/;"	m	struct:sockaddr	access:public
sockaddr::sa_len	lwip/include/lwip/sockets.h	/^  u8_t sa_len;$/;"	m	struct:sockaddr	access:public
sockaddr_in	lwip/include/lwip/sockets.h	/^struct sockaddr_in {$/;"	s
sockaddr_in::sin_addr	lwip/include/lwip/sockets.h	/^  struct in_addr sin_addr;$/;"	m	struct:sockaddr_in	typeref:struct:sockaddr_in::in_addr	access:public
sockaddr_in::sin_family	lwip/include/lwip/sockets.h	/^  u8_t sin_family;$/;"	m	struct:sockaddr_in	access:public
sockaddr_in::sin_len	lwip/include/lwip/sockets.h	/^  u8_t sin_len;$/;"	m	struct:sockaddr_in	access:public
sockaddr_in::sin_port	lwip/include/lwip/sockets.h	/^  u16_t sin_port;$/;"	m	struct:sockaddr_in	access:public
sockaddr_in::sin_zero	lwip/include/lwip/sockets.h	/^  char sin_zero[8];$/;"	m	struct:sockaddr_in	access:public
sockclose	user.h	/^int sockclose(int s);$/;"	p	signature:(int s)
socket	lwip/include/lwip/api.h	/^  int socket;$/;"	m	struct:netconn	access:public
socket	lwip/include/lwip/sockets.h	/^#define socket(/;"	d
socket	user.h	/^int socket(int domain, int type, int protocol);$/;"	p	signature:(int domain, int type, int protocol)
sockets	lwip/api/sockets.c	/^static struct lwip_socket sockets[NUM_SOCKETS];$/;"	v	typeref:struct:lwip_socket	file:
socklen_t	lwip/include/lwip/sockets.h	/^#  define socklen_t /;"	d
socklen_t	user.h	/^#define socklen_t /;"	d
socksem	lwip/api/sockets.c	/^static sys_sem_t socksem = 0;$/;"	v	file:
specrev	mp.h	/^  uchar specrev;                \/\/ [14]$/;"	m	struct:mp	access:public
spinlock	spinlock.h	/^struct spinlock {$/;"	s
spinlock::cpu	spinlock.h	/^  int  cpu;      \/\/ The number of the cpu holding the lock.$/;"	m	struct:spinlock	access:public
spinlock::locked	spinlock.h	/^  uint locked;   \/\/ Is the lock held?$/;"	m	struct:spinlock	access:public
spinlock::name	spinlock.h	/^  char *name;    \/\/ Name of lock.$/;"	m	struct:spinlock	access:public
spinlock::pcs	spinlock.h	/^  uint pcs[10];  \/\/ The call stack (an array of program counters)$/;"	m	struct:spinlock	access:public
src	lwip/include/ipv6/lwip/ip.h	/^  struct ip_addr src, dest;          \/* source and destination IP addresses *\/$/;"	m	struct:ip_hdr	typeref:struct:ip_hdr::ip_addr	access:public
ss	mmu.h	/^  uint ss : 16;         \/\/ segment selector$/;"	m	struct:gatedesc	access:public
ss	mmu.h	/^  ushort ss;$/;"	m	struct:taskstate	access:public
ss	x86.h	/^  ushort ss;$/;"	m	struct:trapframe	access:public
ss0	mmu.h	/^  ushort ss0;        \/\/   after an increase in privilege level$/;"	m	struct:taskstate	access:public
ss1	mmu.h	/^  ushort ss1;$/;"	m	struct:taskstate	access:public
ss2	mmu.h	/^  ushort ss2;$/;"	m	struct:taskstate	access:public
ssthresh	lwip/include/lwip/tcp.h	/^  u16_t ssthresh;$/;"	m	struct:tcp_pcb	access:public
sswt_cb	lwip/core/sys.c	/^struct sswt_cb$/;"	s	file:
sswt_cb::psem	lwip/core/sys.c	/^    sys_sem_t *psem;$/;"	m	struct:sswt_cb	file:	access:public
sswt_cb::timeflag	lwip/core/sys.c	/^    int timeflag;$/;"	m	struct:sswt_cb	file:	access:public
sswt_handler	lwip/core/sys.c	/^sswt_handler(void *arg)$/;"	f	file:	signature:(void *arg)
starting	lwip/netif/ppp/fsm.h	/^    void (*starting)		\/* Called when we want the lower layer *\/$/;"	m	struct:fsm_callbacks	access:public
stat	e100.h	/^            short stat :    13;$/;"	m	struct:command_block_tag	access:public
stat	stat.h	/^struct stat {$/;"	s
stat	ulib.c	/^stat(char *n, struct stat *st)$/;"	f	signature:(char *n, struct stat *st)
stat	user.h	/^int stat(char*, struct stat*);$/;"	p	signature:(char*, struct stat*)
stat::dev	stat.h	/^  int dev;     \/\/ Device number$/;"	m	struct:stat	access:public
stat::ino	stat.h	/^  uint ino;    \/\/ Inode number on device$/;"	m	struct:stat	access:public
stat::nlink	stat.h	/^  short nlink; \/\/ Number of links to file$/;"	m	struct:stat	access:public
stat::size	stat.h	/^  uint size;   \/\/ Size of file in bytes$/;"	m	struct:stat	access:public
stat::type	stat.h	/^  short type;  \/\/ Type of file$/;"	m	struct:stat	access:public
state	lwip/include/lwip/api.h	/^  enum netconn_state state;$/;"	m	struct:netconn	typeref:enum:netconn::netconn_state	access:public
state	lwip/include/lwip/dhcp.h	/^  u8_t state;$/;"	m	struct:dhcp	access:public
state	lwip/include/lwip/netif.h	/^  void *state;$/;"	m	struct:netif	access:public
state	lwip/include/lwip/tcp.h	/^  enum tcp_state state;   \/* TCP state *\/$/;"	m	struct:tcp_pcb	typeref:enum:tcp_pcb::tcp_state	access:public
state	lwip/include/lwip/tcp.h	/^  enum tcp_state state;   \/* TCP state *\/$/;"	m	struct:tcp_pcb_listen	typeref:enum:tcp_pcb_listen::tcp_state	access:public
state	lwip/netif/etharp.c	/^  enum etharp_state state;$/;"	m	struct:etharp_entry	typeref:enum:etharp_entry::etharp_state	file:	access:public
state	lwip/netif/ppp/fsm.h	/^    int state;				\/* State *\/$/;"	m	struct:fsm	access:public
state	proc.h	/^  enum proc_state state;    \/\/ Process state$/;"	m	struct:proc	typeref:enum:proc::proc_state	access:public
stati	defs.h	/^void            stati(struct inode*, struct stat*);$/;"	p	signature:(struct inode*, struct stat*)
stati	fs.c	/^stati(struct inode *ip, struct stat *st)$/;"	f	signature:(struct inode *ip, struct stat *st)
stats	lwip/netif/ppp/vj.h	/^    struct vjstat stats;$/;"	m	struct:vjcompress	typeref:struct:vjcompress::vjstat	access:public
stats_	lwip/include/lwip/stats.h	/^struct stats_ {$/;"	s
stats_::icmp	lwip/include/lwip/stats.h	/^  struct stats_proto icmp;$/;"	m	struct:stats_	typeref:struct:stats_::stats_proto	access:public
stats_::ip	lwip/include/lwip/stats.h	/^  struct stats_proto ip;$/;"	m	struct:stats_	typeref:struct:stats_::stats_proto	access:public
stats_::ip_frag	lwip/include/lwip/stats.h	/^  struct stats_proto ip_frag;$/;"	m	struct:stats_	typeref:struct:stats_::stats_proto	access:public
stats_::link	lwip/include/lwip/stats.h	/^  struct stats_proto link;$/;"	m	struct:stats_	typeref:struct:stats_::stats_proto	access:public
stats_::mem	lwip/include/lwip/stats.h	/^  struct stats_mem mem;$/;"	m	struct:stats_	typeref:struct:stats_::stats_mem	access:public
stats_::memp	lwip/include/lwip/stats.h	/^  struct stats_mem memp[MEMP_MAX];$/;"	m	struct:stats_	typeref:struct:stats_::stats_mem	access:public
stats_::pbuf	lwip/include/lwip/stats.h	/^  struct stats_pbuf pbuf;$/;"	m	struct:stats_	typeref:struct:stats_::stats_pbuf	access:public
stats_::sys	lwip/include/lwip/stats.h	/^  struct stats_sys sys;$/;"	m	struct:stats_	typeref:struct:stats_::stats_sys	access:public
stats_::tcp	lwip/include/lwip/stats.h	/^  struct stats_proto tcp;$/;"	m	struct:stats_	typeref:struct:stats_::stats_proto	access:public
stats_::udp	lwip/include/lwip/stats.h	/^  struct stats_proto udp;$/;"	m	struct:stats_	typeref:struct:stats_::stats_proto	access:public
stats_display	lwip/core/stats.c	/^stats_display(void)$/;"	f	signature:(void)
stats_display	lwip/include/lwip/stats.h	/^#define stats_display(/;"	d
stats_display	lwip/include/lwip/stats.h	/^void stats_display(void);$/;"	p	signature:(void)
stats_display_mem	lwip/core/stats.c	/^stats_display_mem(struct stats_mem *mem, char *name)$/;"	f	signature:(struct stats_mem *mem, char *name)
stats_display_pbuf	lwip/core/stats.c	/^stats_display_pbuf(struct stats_pbuf *pbuf)$/;"	f	signature:(struct stats_pbuf *pbuf)
stats_display_proto	lwip/core/stats.c	/^stats_display_proto(struct stats_proto *proto, char *name)$/;"	f	signature:(struct stats_proto *proto, char *name)
stats_init	lwip/core/stats.c	/^stats_init(void)$/;"	f	signature:(void)
stats_init	lwip/include/lwip/stats.h	/^#define stats_init(/;"	d
stats_init	lwip/include/lwip/stats.h	/^void stats_init(void);$/;"	p	signature:(void)
stats_mem	lwip/include/lwip/stats.h	/^struct stats_mem {$/;"	s
stats_mem::avail	lwip/include/lwip/stats.h	/^  mem_size_t avail;$/;"	m	struct:stats_mem	access:public
stats_mem::err	lwip/include/lwip/stats.h	/^  mem_size_t err;$/;"	m	struct:stats_mem	access:public
stats_mem::max	lwip/include/lwip/stats.h	/^  mem_size_t max;  $/;"	m	struct:stats_mem	access:public
stats_mem::used	lwip/include/lwip/stats.h	/^  mem_size_t used;$/;"	m	struct:stats_mem	access:public
stats_pbuf	lwip/include/lwip/stats.h	/^struct stats_pbuf {$/;"	s
stats_pbuf::alloc_locked	lwip/include/lwip/stats.h	/^  u16_t alloc_locked;$/;"	m	struct:stats_pbuf	access:public
stats_pbuf::avail	lwip/include/lwip/stats.h	/^  u16_t avail;$/;"	m	struct:stats_pbuf	access:public
stats_pbuf::err	lwip/include/lwip/stats.h	/^  u16_t err;$/;"	m	struct:stats_pbuf	access:public
stats_pbuf::max	lwip/include/lwip/stats.h	/^  u16_t max;  $/;"	m	struct:stats_pbuf	access:public
stats_pbuf::refresh_locked	lwip/include/lwip/stats.h	/^  u16_t refresh_locked;$/;"	m	struct:stats_pbuf	access:public
stats_pbuf::used	lwip/include/lwip/stats.h	/^  u16_t used;$/;"	m	struct:stats_pbuf	access:public
stats_proto	lwip/include/lwip/stats.h	/^struct stats_proto {$/;"	s
stats_proto::cachehit	lwip/include/lwip/stats.h	/^  u16_t cachehit;$/;"	m	struct:stats_proto	access:public
stats_proto::chkerr	lwip/include/lwip/stats.h	/^  u16_t chkerr;  \/* Checksum error. *\/$/;"	m	struct:stats_proto	access:public
stats_proto::drop	lwip/include/lwip/stats.h	/^  u16_t drop;    \/* Dropped packets. *\/$/;"	m	struct:stats_proto	access:public
stats_proto::err	lwip/include/lwip/stats.h	/^  u16_t err;     \/* Misc error. *\/$/;"	m	struct:stats_proto	access:public
stats_proto::fw	lwip/include/lwip/stats.h	/^  u16_t fw;      \/* Forwarded packets. *\/$/;"	m	struct:stats_proto	access:public
stats_proto::lenerr	lwip/include/lwip/stats.h	/^  u16_t lenerr;  \/* Invalid length error. *\/$/;"	m	struct:stats_proto	access:public
stats_proto::memerr	lwip/include/lwip/stats.h	/^  u16_t memerr;  \/* Out of memory error. *\/$/;"	m	struct:stats_proto	access:public
stats_proto::opterr	lwip/include/lwip/stats.h	/^  u16_t opterr;  \/* Error in options. *\/$/;"	m	struct:stats_proto	access:public
stats_proto::proterr	lwip/include/lwip/stats.h	/^  u16_t proterr; \/* Protocol error. *\/$/;"	m	struct:stats_proto	access:public
stats_proto::recv	lwip/include/lwip/stats.h	/^  u16_t recv;    \/* Received packets. *\/$/;"	m	struct:stats_proto	access:public
stats_proto::rexmit	lwip/include/lwip/stats.h	/^  u16_t rexmit;  \/* Retransmitted packets. *\/$/;"	m	struct:stats_proto	access:public
stats_proto::rterr	lwip/include/lwip/stats.h	/^  u16_t rterr;   \/* Routing error. *\/$/;"	m	struct:stats_proto	access:public
stats_proto::xmit	lwip/include/lwip/stats.h	/^  u16_t xmit;    \/* Transmitted packets. *\/$/;"	m	struct:stats_proto	access:public
stats_sys	lwip/include/lwip/stats.h	/^struct stats_sys {$/;"	s
stats_sys::mbox	lwip/include/lwip/stats.h	/^  struct stats_syselem mbox;$/;"	m	struct:stats_sys	typeref:struct:stats_sys::stats_syselem	access:public
stats_sys::sem	lwip/include/lwip/stats.h	/^  struct stats_syselem sem;$/;"	m	struct:stats_sys	typeref:struct:stats_sys::stats_syselem	access:public
stats_syselem	lwip/include/lwip/stats.h	/^struct stats_syselem {$/;"	s
stats_syselem::err	lwip/include/lwip/stats.h	/^  u16_t err;$/;"	m	struct:stats_syselem	access:public
stats_syselem::max	lwip/include/lwip/stats.h	/^  u16_t max;$/;"	m	struct:stats_syselem	access:public
stats_syselem::used	lwip/include/lwip/stats.h	/^  u16_t used;$/;"	m	struct:stats_syselem	access:public
status	e100.h	/^    struct scb_status_word status;$/;"	m	union:scb_status_word_tag	typeref:struct:scb_status_word_tag::scb_status_word	access:public
status_word	e100.h	/^        uint16_t status_word;$/;"	m	union:command_block_tag	access:public
stdout	usertests.c	/^int stdout = 1;$/;"	v
sti	x86.h	/^sti(void)$/;"	f	signature:(void)
strchr	ulib.c	/^strchr(const char *s, char c)$/;"	f	signature:(const char *s, char c)
strchr	user.h	/^char* strchr(const char*, char c);$/;"	p	signature:(const char*, char c)
strcmp	ulib.c	/^strcmp(const char *p, const char *q)$/;"	f	signature:(const char *p, const char *q)
strcmp	user.h	/^int strcmp(const char*, const char*);$/;"	p	signature:(const char*, const char*)
strcpy	ulib.c	/^strcpy(char *s, char *t)$/;"	f	signature:(char *s, char *t)
strcpy	user.h	/^char* strcpy(char*, char*);$/;"	p	signature:(char*, char*)
strlen	defs.h	/^int             strlen(const char*);$/;"	p	signature:(const char*)
strlen	string.c	/^strlen(const char *s)$/;"	f	signature:(const char *s)
strlen	ulib.c	/^strlen(char *s)$/;"	f	signature:(char *s)
strlen	user.h	/^uint strlen(char*);$/;"	p	signature:(char*)
strncmp	defs.h	/^int             strncmp(const char*, const char*, uint);$/;"	p	signature:(const char*, const char*, uint)
strncmp	httpd.c	/^strncmp(char *s1, char *s2, int len)$/;"	f	signature:(char *s1, char *s2, int len)
strncmp	string.c	/^strncmp(const char *p, const char *q, uint n)$/;"	f	signature:(const char *p, const char *q, uint n)
strncpy	defs.h	/^char*           strncpy(char*, const char*, int);$/;"	p	signature:(char*, const char*, int)
strncpy	string.c	/^strncpy(char *s, const char *t, int n)$/;"	f	signature:(char *s, const char *t, int n)
subdir	usertests.c	/^subdir(void)$/;"	f	signature:(void)
subnetMask	lwip/netif/ppp/ppp.c	/^u_long subnetMask;$/;"	v
sum	mp.c	/^sum(uchar *addr, int len)$/;"	f	file:	signature:(uchar *addr, int len)
superblock	fs.h	/^struct superblock {$/;"	s
superblock::nblocks	fs.h	/^  uint nblocks;      \/\/ Number of data blocks$/;"	m	struct:superblock	access:public
superblock::ninodes	fs.h	/^  uint ninodes;      \/\/ Number of inodes.$/;"	m	struct:superblock	access:public
superblock::size	fs.h	/^  uint size;         \/\/ Size of file system image (blocks)$/;"	m	struct:superblock	access:public
sv	lwip/include/lwip/tcp.h	/^  s16_t sa, sv;$/;"	m	struct:tcp_pcb	access:public
swi	e100.h	/^    char swi  : 1;$/;"	m	struct:scb_status_word	access:public
swtch	defs.h	/^void            swtch(struct context*, struct context*);$/;"	p	signature:(struct context*, struct context*)
symbols	sh.c	/^char symbols[] = "<|>&;()";$/;"	v
sys	lwip/include/lwip/stats.h	/^  struct stats_sys sys;$/;"	m	struct:stats_	typeref:struct:stats_::stats_sys	access:public
sys_accept	syscall.c	/^extern int sys_accept(void);$/;"	p	file:	signature:(void)
sys_accept	sysproc.c	/^sys_accept(void)$/;"	f	signature:(void)
sys_arch_mbox_fetch	lwip/include/lwip/sys.h	/^u32_t sys_arch_mbox_fetch(sys_mbox_t mbox, void **msg, u32_t timeout);$/;"	p	signature:(sys_mbox_t mbox, void **msg, u32_t timeout)
sys_arch_mbox_fetch	lwip/xv6/arch/sys_arch.c	/^u32_t sys_arch_mbox_fetch(sys_mbox_t mbox, void **msg, u32_t timeout)$/;"	f	signature:(sys_mbox_t mbox, void **msg, u32_t timeout)
sys_arch_mbox_fetch	lwip/xv6/arch/sys_arch.h	/^u32_t sys_arch_mbox_fetch(sys_mbox_t mbox, void **msg, u32_t timeout);$/;"	p	signature:(sys_mbox_t mbox, void **msg, u32_t timeout)
sys_arch_protect	lwip/include/lwip/sys.h	/^sys_prot_t sys_arch_protect(void);$/;"	p	signature:(void)
sys_arch_sem_wait	lwip/include/lwip/sys.h	/^u32_t sys_arch_sem_wait(sys_sem_t sem, u32_t timeout);$/;"	p	signature:(sys_sem_t sem, u32_t timeout)
sys_arch_sem_wait	lwip/xv6/arch/sys_arch.c	/^u32_t sys_arch_sem_wait(sys_sem_t sem, u32_t timeout)$/;"	f	signature:(sys_sem_t sem, u32_t timeout)
sys_arch_sem_wait	lwip/xv6/arch/sys_arch.h	/^u32_t sys_arch_sem_wait(sys_sem_t sem, u32_t timeout);$/;"	p	signature:(sys_sem_t sem, u32_t timeout)
sys_arch_timeouts	lwip/include/lwip/sys.h	/^struct sys_timeouts *sys_arch_timeouts(void);$/;"	p	signature:(void)
sys_arch_timeouts	lwip/xv6/arch/sys_arch.c	/^sys_arch_timeouts(void)$/;"	f	signature:(void)
sys_arch_timeouts	lwip/xv6/arch/sys_arch.h	/^struct sys_timeouts *sys_arch_timeouts(void);$/;"	p	signature:(void)
sys_arch_unprotect	lwip/include/lwip/sys.h	/^void sys_arch_unprotect(sys_prot_t pval);$/;"	p	signature:(sys_prot_t pval)
sys_bind	syscall.c	/^extern int sys_bind(void);$/;"	p	file:	signature:(void)
sys_bind	sysproc.c	/^sys_bind(void)$/;"	f	signature:(void)
sys_chdir	syscall.c	/^extern int sys_chdir(void);$/;"	p	file:	signature:(void)
sys_chdir	sysfile.c	/^sys_chdir(void)$/;"	f	signature:(void)
sys_close	syscall.c	/^extern int sys_close(void);$/;"	p	file:	signature:(void)
sys_close	sysfile.c	/^sys_close(void)$/;"	f	signature:(void)
sys_connect	syscall.c	/^extern int sys_connect(void);$/;"	p	file:	signature:(void)
sys_connect	sysproc.c	/^int sys_connect(void)$/;"	f	signature:(void)
sys_dup	syscall.c	/^extern int sys_dup(void);$/;"	p	file:	signature:(void)
sys_dup	sysfile.c	/^sys_dup(void)$/;"	f	signature:(void)
sys_exec	syscall.c	/^extern int sys_exec(void);$/;"	p	file:	signature:(void)
sys_exec	sysfile.c	/^sys_exec(void)$/;"	f	signature:(void)
sys_exit	syscall.c	/^extern int sys_exit(void);$/;"	p	file:	signature:(void)
sys_exit	sysproc.c	/^sys_exit(void)$/;"	f	signature:(void)
sys_fork	syscall.c	/^extern int sys_fork(void);$/;"	p	file:	signature:(void)
sys_fork	sysproc.c	/^sys_fork(void)$/;"	f	signature:(void)
sys_fstat	syscall.c	/^extern int sys_fstat(void);$/;"	p	file:	signature:(void)
sys_fstat	sysfile.c	/^sys_fstat(void)$/;"	f	signature:(void)
sys_getpeername	syscall.c	/^extern int sys_getpeername (void);$/;"	p	file:	signature:(void)
sys_getpeername	sysproc.c	/^sys_getpeername(void)$/;"	f	signature:(void)
sys_getpid	syscall.c	/^extern int sys_getpid(void);$/;"	p	file:	signature:(void)
sys_getpid	sysproc.c	/^sys_getpid(void)$/;"	f	signature:(void)
sys_getsockname	syscall.c	/^extern int sys_getsockname (void);$/;"	p	file:	signature:(void)
sys_getsockname	sysproc.c	/^sys_getsockname(void)$/;"	f	signature:(void)
sys_getsockopt	syscall.c	/^extern int sys_getsockopt(void);$/;"	p	file:	signature:(void)
sys_getsockopt	sysproc.c	/^sys_getsockopt(void)$/;"	f	signature:(void)
sys_init	lwip/include/lwip/sys.h	/^#define sys_init(/;"	d
sys_init	lwip/include/lwip/sys.h	/^void sys_init(void);$/;"	p	signature:(void)
sys_jiffies	lwip/include/lwip/sys.h	/^u32_t sys_jiffies(void); \/* since power up. *\/$/;"	p	signature:(void)
sys_jiffies	lwip/xv6/arch/sys_arch.c	/^u32_t sys_jiffies(void)$/;"	f	signature:(void)
sys_kill	syscall.c	/^extern int sys_kill(void);$/;"	p	file:	signature:(void)
sys_kill	sysproc.c	/^sys_kill(void)$/;"	f	signature:(void)
sys_link	syscall.c	/^extern int sys_link(void);$/;"	p	file:	signature:(void)
sys_link	sysfile.c	/^sys_link(void)$/;"	f	signature:(void)
sys_listen	syscall.c	/^extern int sys_listen(void);$/;"	p	file:	signature:(void)
sys_listen	sysproc.c	/^int sys_listen(void)$/;"	f	signature:(void)
sys_mbox_fetch	lwip/core/sys.c	/^sys_mbox_fetch(sys_mbox_t mbox, void **msg)$/;"	f	signature:(sys_mbox_t mbox, void **msg)
sys_mbox_fetch	lwip/include/lwip/sys.h	/^#define sys_mbox_fetch(/;"	d
sys_mbox_fetch	lwip/include/lwip/sys.h	/^void sys_mbox_fetch(sys_mbox_t mbox, void **msg);$/;"	p	signature:(sys_mbox_t mbox, void **msg)
sys_mbox_free	lwip/include/lwip/sys.h	/^#define sys_mbox_free(/;"	d
sys_mbox_free	lwip/include/lwip/sys.h	/^void sys_mbox_free(sys_mbox_t mbox);$/;"	p	signature:(sys_mbox_t mbox)
sys_mbox_free	lwip/xv6/arch/sys_arch.c	/^void sys_mbox_free(sys_mbox_t mbox)$/;"	f	signature:(sys_mbox_t mbox)
sys_mbox_free	lwip/xv6/arch/sys_arch.h	/^void sys_mbox_free(sys_mbox_t mbox);$/;"	p	signature:(sys_mbox_t mbox)
sys_mbox_new	lwip/include/lwip/sys.h	/^#define sys_mbox_new(/;"	d
sys_mbox_new	lwip/include/lwip/sys.h	/^sys_mbox_t sys_mbox_new(void);$/;"	p	signature:(void)
sys_mbox_new	lwip/xv6/arch/sys_arch.c	/^sys_mbox_t sys_mbox_new(void)$/;"	f	signature:(void)
sys_mbox_new	lwip/xv6/arch/sys_arch.h	/^sys_mbox_t sys_mbox_new(void);$/;"	p	signature:(void)
sys_mbox_post	lwip/include/lwip/sys.h	/^#define sys_mbox_post(/;"	d
sys_mbox_post	lwip/include/lwip/sys.h	/^void sys_mbox_post(sys_mbox_t mbox, void *msg);$/;"	p	signature:(sys_mbox_t mbox, void *msg)
sys_mbox_post	lwip/xv6/arch/sys_arch.c	/^void sys_mbox_post(sys_mbox_t mbox, void *msg)$/;"	f	signature:(sys_mbox_t mbox, void *msg)
sys_mbox_post	lwip/xv6/arch/sys_arch.h	/^void sys_mbox_post(sys_mbox_t mbox, void *msg);$/;"	p	signature:(sys_mbox_t mbox, void *msg)
sys_mbox_t	lwip/include/lwip/sys.h	/^typedef u8_t sys_mbox_t;$/;"	t
sys_mbox_t	lwip/xv6/arch/sys_arch.h	/^typedef struct mbox * sys_mbox_t;$/;"	t	typeref:struct:mbox
sys_mkdir	syscall.c	/^extern int sys_mkdir(void);$/;"	p	file:	signature:(void)
sys_mkdir	sysfile.c	/^sys_mkdir(void)$/;"	f	signature:(void)
sys_mknod	syscall.c	/^extern int sys_mknod(void);$/;"	p	file:	signature:(void)
sys_mknod	sysfile.c	/^sys_mknod(void)$/;"	f	signature:(void)
sys_msleep	lwip/core/sys.c	/^sys_msleep(u32_t ms)$/;"	f	signature:(u32_t ms)
sys_msleep	lwip/include/lwip/sys.h	/^void sys_msleep(u32_t ms); \/* only has a (close to) 1 jiffy resolution. *\/$/;"	p	signature:(u32_t ms)
sys_now	lwip/include/lwip/sys.h	/^unsigned long sys_now(void);$/;"	p	signature:(void)
sys_open	syscall.c	/^extern int sys_open(void);$/;"	p	file:	signature:(void)
sys_open	sysfile.c	/^sys_open(void)$/;"	f	signature:(void)
sys_pipe	syscall.c	/^extern int sys_pipe(void);$/;"	p	file:	signature:(void)
sys_pipe	sysfile.c	/^sys_pipe(void)$/;"	f	signature:(void)
sys_read	syscall.c	/^extern int sys_read(void);$/;"	p	file:	signature:(void)
sys_read	sysfile.c	/^sys_read(void)$/;"	f	signature:(void)
sys_recv	syscall.c	/^extern int sys_recv(void);$/;"	p	file:	signature:(void)
sys_recv	sysproc.c	/^int sys_recv(void)$/;"	f	signature:(void)
sys_recvfrom	syscall.c	/^extern int sys_recvfrom(void);$/;"	p	file:	signature:(void)
sys_recvfrom	sysproc.c	/^int sys_recvfrom(void)$/;"	f	signature:(void)
sys_sbrk	syscall.c	/^extern int sys_sbrk(void);$/;"	p	file:	signature:(void)
sys_sbrk	sysproc.c	/^sys_sbrk(void)$/;"	f	signature:(void)
sys_sem_free	lwip/include/lwip/sys.h	/^#define sys_sem_free(/;"	d
sys_sem_free	lwip/include/lwip/sys.h	/^void sys_sem_free(sys_sem_t sem);$/;"	p	signature:(sys_sem_t sem)
sys_sem_free	lwip/xv6/arch/sys_arch.c	/^void sys_sem_free(sys_sem_t sem)$/;"	f	signature:(sys_sem_t sem)
sys_sem_free	lwip/xv6/arch/sys_arch.h	/^void sys_sem_free(sys_sem_t sem);$/;"	p	signature:(sys_sem_t sem)
sys_sem_new	lwip/include/lwip/sys.h	/^#define sys_sem_new(/;"	d
sys_sem_new	lwip/include/lwip/sys.h	/^sys_sem_t sys_sem_new(u8_t count);$/;"	p	signature:(u8_t count)
sys_sem_new	lwip/xv6/arch/sys_arch.c	/^sys_sem_t sys_sem_new(u8_t count)$/;"	f	signature:(u8_t count)
sys_sem_new	lwip/xv6/arch/sys_arch.h	/^sys_sem_t sys_sem_new(u8_t count);$/;"	p	signature:(u8_t count)
sys_sem_signal	lwip/include/lwip/sys.h	/^#define sys_sem_signal(/;"	d
sys_sem_signal	lwip/include/lwip/sys.h	/^void sys_sem_signal(sys_sem_t sem);$/;"	p	signature:(sys_sem_t sem)
sys_sem_signal	lwip/xv6/arch/sys_arch.c	/^void sys_sem_signal(sys_sem_t sem)$/;"	f	signature:(sys_sem_t sem)
sys_sem_signal	lwip/xv6/arch/sys_arch.h	/^void sys_sem_signal(sys_sem_t sem);$/;"	p	signature:(sys_sem_t sem)
sys_sem_t	lwip/include/lwip/sys.h	/^typedef u8_t sys_sem_t;$/;"	t
sys_sem_t	lwip/xv6/arch/sys_arch.h	/^typedef sem_t * sys_sem_t;$/;"	t
sys_sem_wait	lwip/core/sys.c	/^sys_sem_wait(sys_sem_t sem)$/;"	f	signature:(sys_sem_t sem)
sys_sem_wait	lwip/include/lwip/sys.h	/^#define sys_sem_wait(/;"	d
sys_sem_wait	lwip/include/lwip/sys.h	/^void sys_sem_wait(sys_sem_t sem);$/;"	p	signature:(sys_sem_t sem)
sys_sem_wait_timeout	lwip/core/sys.c	/^sys_sem_wait_timeout(sys_sem_t sem, u32_t timeout)$/;"	f	signature:(sys_sem_t sem, u32_t timeout)
sys_sem_wait_timeout	lwip/include/lwip/sys.h	/^int sys_sem_wait_timeout(sys_sem_t sem, u32_t timeout);$/;"	p	signature:(sys_sem_t sem, u32_t timeout)
sys_send	syscall.c	/^extern int sys_send(void);$/;"	p	file:	signature:(void)
sys_send	sysproc.c	/^int sys_send(void)$/;"	f	signature:(void)
sys_sendto	syscall.c	/^extern int sys_sendto(void);$/;"	p	file:	signature:(void)
sys_sendto	sysproc.c	/^int sys_sendto(void)$/;"	f	signature:(void)
sys_setsockopt	syscall.c	/^extern int sys_setsockopt(void);$/;"	p	file:	signature:(void)
sys_setsockopt	sysproc.c	/^int sys_setsockopt(void)$/;"	f	signature:(void)
sys_shutdown	syscall.c	/^extern int sys_shutdown(void);$/;"	p	file:	signature:(void)
sys_shutdown	sysproc.c	/^sys_shutdown(void)$/;"	f	signature:(void)
sys_sleep	syscall.c	/^extern int sys_sleep(void);$/;"	p	file:	signature:(void)
sys_sleep	sysproc.c	/^sys_sleep(void)$/;"	f	signature:(void)
sys_sockclose	syscall.c	/^extern int sys_sockclose(void);$/;"	p	file:	signature:(void)
sys_sockclose	sysproc.c	/^int sys_sockclose(void)$/;"	f	signature:(void)
sys_socket	syscall.c	/^extern int sys_socket(void);$/;"	p	file:	signature:(void)
sys_socket	sysproc.c	/^int sys_socket(void)$/;"	f	signature:(void)
sys_thread_new	lwip/include/lwip/sys.h	/^#define sys_thread_new(/;"	d
sys_thread_new	lwip/include/lwip/sys.h	/^sys_thread_t sys_thread_new(void (* thread)(void *arg), void *arg, int prio);$/;"	p	signature:(void (* thread)(void *arg), void *arg, int prio)
sys_thread_new	lwip/xv6/arch/sys_arch.c	/^sys_thread_t sys_thread_new(void (* thread)(void *arg), void *arg, int prio)$/;"	f	signature:(void (* thread)(void *arg), void *arg, int prio)
sys_thread_new	lwip/xv6/arch/sys_arch.h	/^sys_thread_t sys_thread_new(void (* thread)(void *arg), void *arg, int prio);$/;"	p	signature:(void (* thread)(void *arg), void *arg, int prio)
sys_thread_t	lwip/xv6/arch/sys_arch.h	/^typedef kproc_t sys_thread_t;$/;"	t
sys_timeout	lwip/core/sys.c	/^sys_timeout(u32_t msecs, sys_timeout_handler h, void *arg)$/;"	f	signature:(u32_t msecs, sys_timeout_handler h, void *arg)
sys_timeout	lwip/include/lwip/sys.h	/^#define sys_timeout(/;"	d
sys_timeout	lwip/include/lwip/sys.h	/^struct sys_timeout {$/;"	s
sys_timeout	lwip/include/lwip/sys.h	/^struct sys_timeout {u8_t dummy;};$/;"	s
sys_timeout	lwip/include/lwip/sys.h	/^void sys_timeout(u32_t msecs, sys_timeout_handler h, void *arg);$/;"	p	signature:(u32_t msecs, sys_timeout_handler h, void *arg)
sys_timeout::arg	lwip/include/lwip/sys.h	/^  void *arg;$/;"	m	struct:sys_timeout	access:public
sys_timeout::dummy	lwip/include/lwip/sys.h	/^struct sys_timeout {u8_t dummy;};$/;"	m	struct:sys_timeout	access:public
sys_timeout::h	lwip/include/lwip/sys.h	/^  sys_timeout_handler h;$/;"	m	struct:sys_timeout	access:public
sys_timeout::next	lwip/include/lwip/sys.h	/^  struct sys_timeout *next;$/;"	m	struct:sys_timeout	typeref:struct:sys_timeout::sys_timeout	access:public
sys_timeout::time	lwip/include/lwip/sys.h	/^  u32_t time;$/;"	m	struct:sys_timeout	access:public
sys_timeout_handler	lwip/include/lwip/sys.h	/^typedef void (* sys_timeout_handler)(void *arg);$/;"	t
sys_timeouts	lwip/include/lwip/sys.h	/^struct sys_timeouts {$/;"	s
sys_timeouts	thread.h	/^struct sys_timeouts {$/;"	s
sys_timeouts::next	lwip/include/lwip/sys.h	/^  struct sys_timeout *next;$/;"	m	struct:sys_timeouts	typeref:struct:sys_timeouts::sys_timeout	access:public
sys_timeouts::next	thread.h	/^    struct sys_timeout *next;$/;"	m	struct:sys_timeouts	typeref:struct:sys_timeouts::sys_timeout	access:public
sys_touts	lwip/xv6/arch/sys_arch.c	/^struct sys_timeouts sys_touts;$/;"	v	typeref:struct:sys_timeouts
sys_unlink	syscall.c	/^extern int sys_unlink(void);$/;"	p	file:	signature:(void)
sys_unlink	sysfile.c	/^sys_unlink(void)$/;"	f	signature:(void)
sys_untimeout	lwip/core/sys.c	/^sys_untimeout(sys_timeout_handler h, void *arg)$/;"	f	signature:(sys_timeout_handler h, void *arg)
sys_untimeout	lwip/include/lwip/sys.h	/^#define sys_untimeout(/;"	d
sys_untimeout	lwip/include/lwip/sys.h	/^void sys_untimeout(sys_timeout_handler h, void *arg);$/;"	p	signature:(sys_timeout_handler h, void *arg)
sys_upmsec	syscall.c	/^extern int sys_upmsec(void);$/;"	p	file:	signature:(void)
sys_upmsec	sysproc.c	/^sys_upmsec(void)$/;"	f	signature:(void)
sys_wait	syscall.c	/^extern int sys_wait(void);$/;"	p	file:	signature:(void)
sys_wait	sysproc.c	/^sys_wait(void)$/;"	f	signature:(void)
sys_write	syscall.c	/^extern int sys_write(void);$/;"	p	file:	signature:(void)
sys_write	sysfile.c	/^sys_write(void)$/;"	f	signature:(void)
syscall	defs.h	/^void            syscall(void);$/;"	p	signature:(void)
syscall	syscall.c	/^syscall(void)$/;"	f	signature:(void)
syscalls	syscall.c	/^static int (*syscalls[])(void) = {$/;"	v	file:
sz	proc.h	/^  uint sz;                  \/\/ Size of process memory (bytes)$/;"	m	struct:proc	access:public
t	mmu.h	/^  ushort t;          \/\/ Trap on task switch$/;"	m	struct:taskstate	access:public
t1_timeout	lwip/include/lwip/dhcp.h	/^  u16_t t1_timeout;  \/* #ticks with period DHCP_COARSE_TIMER_SECS for renewal time *\/$/;"	m	struct:dhcp	access:public
t2_timeout	lwip/include/lwip/dhcp.h	/^  u16_t t2_timeout;  \/* #ticks with period DHCP_COARSE_TIMER_SECS for rebind time *\/$/;"	m	struct:dhcp	access:public
taskstate	mmu.h	/^struct taskstate {$/;"	s
taskstate::cr3	mmu.h	/^  void *cr3;         \/\/ Page directory base$/;"	m	struct:taskstate	access:public
taskstate::cs	mmu.h	/^  ushort cs;$/;"	m	struct:taskstate	access:public
taskstate::ds	mmu.h	/^  ushort ds;$/;"	m	struct:taskstate	access:public
taskstate::eax	mmu.h	/^  uint eax;          \/\/ More saved state (registers)$/;"	m	struct:taskstate	access:public
taskstate::ebp	mmu.h	/^  uint *ebp;$/;"	m	struct:taskstate	access:public
taskstate::ebx	mmu.h	/^  uint ebx;$/;"	m	struct:taskstate	access:public
taskstate::ecx	mmu.h	/^  uint ecx;$/;"	m	struct:taskstate	access:public
taskstate::edi	mmu.h	/^  uint edi;$/;"	m	struct:taskstate	access:public
taskstate::edx	mmu.h	/^  uint edx;$/;"	m	struct:taskstate	access:public
taskstate::eflags	mmu.h	/^  uint eflags;$/;"	m	struct:taskstate	access:public
taskstate::eip	mmu.h	/^  uint *eip;         \/\/ Saved state from last task switch$/;"	m	struct:taskstate	access:public
taskstate::es	mmu.h	/^  ushort es;         \/\/ Even more saved state (segment selectors)$/;"	m	struct:taskstate	access:public
taskstate::esi	mmu.h	/^  uint esi;$/;"	m	struct:taskstate	access:public
taskstate::esp	mmu.h	/^  uint *esp;$/;"	m	struct:taskstate	access:public
taskstate::esp0	mmu.h	/^  uint esp0;         \/\/ Stack pointers and segment selectors$/;"	m	struct:taskstate	access:public
taskstate::esp1	mmu.h	/^  uint *esp1;$/;"	m	struct:taskstate	access:public
taskstate::esp2	mmu.h	/^  uint *esp2;$/;"	m	struct:taskstate	access:public
taskstate::fs	mmu.h	/^  ushort fs;$/;"	m	struct:taskstate	access:public
taskstate::gs	mmu.h	/^  ushort gs;$/;"	m	struct:taskstate	access:public
taskstate::iomb	mmu.h	/^  ushort iomb;       \/\/ I\/O map base address$/;"	m	struct:taskstate	access:public
taskstate::ldt	mmu.h	/^  ushort ldt;$/;"	m	struct:taskstate	access:public
taskstate::link	mmu.h	/^  uint link;         \/\/ Old ts selector$/;"	m	struct:taskstate	access:public
taskstate::padding1	mmu.h	/^  ushort padding1;$/;"	m	struct:taskstate	access:public
taskstate::padding10	mmu.h	/^  ushort padding10;$/;"	m	struct:taskstate	access:public
taskstate::padding2	mmu.h	/^  ushort padding2;$/;"	m	struct:taskstate	access:public
taskstate::padding3	mmu.h	/^  ushort padding3;$/;"	m	struct:taskstate	access:public
taskstate::padding4	mmu.h	/^  ushort padding4;$/;"	m	struct:taskstate	access:public
taskstate::padding5	mmu.h	/^  ushort padding5;$/;"	m	struct:taskstate	access:public
taskstate::padding6	mmu.h	/^  ushort padding6;$/;"	m	struct:taskstate	access:public
taskstate::padding7	mmu.h	/^  ushort padding7;$/;"	m	struct:taskstate	access:public
taskstate::padding8	mmu.h	/^  ushort padding8;$/;"	m	struct:taskstate	access:public
taskstate::padding9	mmu.h	/^  ushort padding9;$/;"	m	struct:taskstate	access:public
taskstate::ss	mmu.h	/^  ushort ss;$/;"	m	struct:taskstate	access:public
taskstate::ss0	mmu.h	/^  ushort ss0;        \/\/   after an increase in privilege level$/;"	m	struct:taskstate	access:public
taskstate::ss1	mmu.h	/^  ushort ss1;$/;"	m	struct:taskstate	access:public
taskstate::ss2	mmu.h	/^  ushort ss2;$/;"	m	struct:taskstate	access:public
taskstate::t	mmu.h	/^  ushort t;          \/\/ Trap on task switch$/;"	m	struct:taskstate	access:public
tbd_addr	e100.h	/^    uint32_t tbd_addr;$/;"	m	struct:op_transmit_cmd	access:public
tbd_num	e100.h	/^        uint8_t tbd_num;$/;"	m	struct:op_transmit_cmd	access:public
tclass1	lwip/include/ipv6/lwip/ip.h	/^  u8_t tclass1:4, v:4;$/;"	m	struct:ip_hdr	access:public
tclass2	lwip/include/ipv6/lwip/ip.h	/^  u8_t flow1:4, tclass2:4;  $/;"	m	struct:ip_hdr	access:public
tco	e100.h	/^    char tco :      1;$/;"	m	struct:rf_status	access:public
tcp	lwip/include/lwip/api.h	/^    struct tcp_pcb *tcp;$/;"	m	union:netconn	typeref:struct:netconn::tcp_pcb	access:public
tcp	lwip/include/lwip/stats.h	/^  struct stats_proto tcp;$/;"	m	struct:stats_	typeref:struct:stats_::stats_proto	access:public
tcp_abort	lwip/core/tcp.c	/^tcp_abort(struct tcp_pcb *pcb)$/;"	f	signature:(struct tcp_pcb *pcb)
tcp_abort	lwip/include/lwip/tcp.h	/^void             tcp_abort   (struct tcp_pcb *pcb);$/;"	p	signature:(struct tcp_pcb *pcb)
tcp_accept	lwip/core/tcp.c	/^tcp_accept(struct tcp_pcb *pcb,$/;"	f	signature:(struct tcp_pcb *pcb, err_t (* accept)(void *arg, struct tcp_pcb *newpcb, err_t err))
tcp_accept	lwip/include/lwip/tcp.h	/^void             tcp_accept  (struct tcp_pcb *pcb,$/;"	p	signature:(struct tcp_pcb *pcb, err_t (* accept)(void *arg, struct tcp_pcb *newpcb, err_t err))
tcp_accept_null	lwip/core/tcp.c	/^tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)$/;"	f	file:	signature:(void *arg, struct tcp_pcb *pcb, err_t err)
tcp_ack	lwip/include/lwip/tcp.h	/^#define tcp_ack(/;"	d
tcp_ack_now	lwip/include/lwip/tcp.h	/^#define tcp_ack_now(/;"	d
tcp_active_pcbs	lwip/core/tcp.c	/^struct tcp_pcb *tcp_active_pcbs;  \/* List of all TCP PCBs that are in a$/;"	v	typeref:struct:tcp_pcb
tcp_alloc	lwip/core/tcp.c	/^tcp_alloc(u8_t prio)$/;"	f	signature:(u8_t prio)
tcp_alloc	lwip/include/lwip/tcp.h	/^struct tcp_pcb * tcp_alloc   (u8_t prio);$/;"	p	signature:(u8_t prio)
tcp_arg	lwip/core/tcp.c	/^tcp_arg(struct tcp_pcb *pcb, void *arg)$/;"	f	signature:(struct tcp_pcb *pcb, void *arg)
tcp_arg	lwip/include/lwip/tcp.h	/^void             tcp_arg     (struct tcp_pcb *pcb, void *arg);$/;"	p	signature:(struct tcp_pcb *pcb, void *arg)
tcp_backoff	lwip/core/tcp.c	/^const u8_t tcp_backoff[13] =$/;"	v
tcp_bind	lwip/core/tcp.c	/^tcp_bind(struct tcp_pcb *pcb, struct ip_addr *ipaddr, u16_t port)$/;"	f	signature:(struct tcp_pcb *pcb, struct ip_addr *ipaddr, u16_t port)
tcp_bind	lwip/include/lwip/tcp.h	/^err_t            tcp_bind    (struct tcp_pcb *pcb, struct ip_addr *ipaddr,$/;"	p	signature:(struct tcp_pcb *pcb, struct ip_addr *ipaddr, u16_t port)
tcp_close	lwip/core/tcp.c	/^tcp_close(struct tcp_pcb *pcb)$/;"	f	signature:(struct tcp_pcb *pcb)
tcp_close	lwip/include/lwip/tcp.h	/^err_t            tcp_close   (struct tcp_pcb *pcb);$/;"	p	signature:(struct tcp_pcb *pcb)
tcp_connect	lwip/core/tcp.c	/^tcp_connect(struct tcp_pcb *pcb, struct ip_addr *ipaddr, u16_t port,$/;"	f	signature:(struct tcp_pcb *pcb, struct ip_addr *ipaddr, u16_t port, err_t (* connected)(void *arg, struct tcp_pcb *tpcb, err_t err))
tcp_connect	lwip/include/lwip/tcp.h	/^err_t            tcp_connect (struct tcp_pcb *pcb, struct ip_addr *ipaddr,$/;"	p	signature:(struct tcp_pcb *pcb, struct ip_addr *ipaddr, u16_t port, err_t (* connected)(void *arg, struct tcp_pcb *tpcb, err_t err))
tcp_debug_print	lwip/core/tcp.c	/^tcp_debug_print(struct tcp_hdr *tcphdr)$/;"	f	signature:(struct tcp_hdr *tcphdr)
tcp_debug_print	lwip/include/lwip/tcp.h	/^#  define tcp_debug_print(/;"	d
tcp_debug_print	lwip/include/lwip/tcp.h	/^void tcp_debug_print(struct tcp_hdr *tcphdr);$/;"	p	signature:(struct tcp_hdr *tcphdr)
tcp_debug_print_flags	lwip/core/tcp.c	/^tcp_debug_print_flags(u8_t flags)$/;"	f	signature:(u8_t flags)
tcp_debug_print_flags	lwip/include/lwip/tcp.h	/^#  define tcp_debug_print_flags(/;"	d
tcp_debug_print_flags	lwip/include/lwip/tcp.h	/^void tcp_debug_print_flags(u8_t flags);$/;"	p	signature:(u8_t flags)
tcp_debug_print_pcbs	lwip/core/tcp.c	/^tcp_debug_print_pcbs(void)$/;"	f	signature:(void)
tcp_debug_print_pcbs	lwip/include/lwip/tcp.h	/^#  define tcp_debug_print_pcbs(/;"	d
tcp_debug_print_pcbs	lwip/include/lwip/tcp.h	/^void tcp_debug_print_pcbs(void);$/;"	p	signature:(void)
tcp_debug_print_state	lwip/core/tcp.c	/^tcp_debug_print_state(enum tcp_state s)$/;"	f	signature:(enum tcp_state s)
tcp_debug_print_state	lwip/include/lwip/tcp.h	/^#  define tcp_debug_print_state(/;"	d
tcp_debug_print_state	lwip/include/lwip/tcp.h	/^void tcp_debug_print_state(enum tcp_state s);$/;"	p	signature:(enum tcp_state s)
tcp_enqueue	lwip/core/tcp_out.c	/^tcp_enqueue(struct tcp_pcb *pcb, void *arg, u16_t len,$/;"	f	signature:(struct tcp_pcb *pcb, void *arg, u16_t len, u8_t flags, u8_t copy, u8_t *optdata, u8_t optlen)
tcp_enqueue	lwip/include/lwip/tcp.h	/^err_t tcp_enqueue(struct tcp_pcb *pcb, void *dataptr, u16_t len,$/;"	p	signature:(struct tcp_pcb *pcb, void *dataptr, u16_t len, u8_t flags, u8_t copy, u8_t *optdata, u8_t optlen)
tcp_err	lwip/core/tcp.c	/^tcp_err(struct tcp_pcb *pcb,$/;"	f	signature:(struct tcp_pcb *pcb, void (* errf)(void *arg, err_t err))
tcp_err	lwip/include/lwip/tcp.h	/^void             tcp_err     (struct tcp_pcb *pcb,$/;"	p	signature:(struct tcp_pcb *pcb, void (* err)(void *arg, err_t err))
tcp_fasttmr	lwip/core/tcp.c	/^tcp_fasttmr(void)$/;"	f	signature:(void)
tcp_fasttmr	lwip/include/lwip/tcp.h	/^void             tcp_fasttmr (void);$/;"	p	signature:(void)
tcp_hdr	lwip/include/lwip/tcp.h	/^struct tcp_hdr {$/;"	s
tcp_hdr::PACK_STRUCT_FIELD	lwip/include/lwip/tcp.h	/^  PACK_STRUCT_FIELD(u16_t _hdrlen_rsvd_flags);$/;"	p	struct:tcp_hdr	access:public	signature:(u16_t _hdrlen_rsvd_flags)
tcp_hdr::PACK_STRUCT_FIELD	lwip/include/lwip/tcp.h	/^  PACK_STRUCT_FIELD(u16_t chksum);$/;"	p	struct:tcp_hdr	access:public	signature:(u16_t chksum)
tcp_hdr::PACK_STRUCT_FIELD	lwip/include/lwip/tcp.h	/^  PACK_STRUCT_FIELD(u16_t dest);$/;"	p	struct:tcp_hdr	access:public	signature:(u16_t dest)
tcp_hdr::PACK_STRUCT_FIELD	lwip/include/lwip/tcp.h	/^  PACK_STRUCT_FIELD(u16_t src);$/;"	p	struct:tcp_hdr	access:public	signature:(u16_t src)
tcp_hdr::PACK_STRUCT_FIELD	lwip/include/lwip/tcp.h	/^  PACK_STRUCT_FIELD(u16_t urgp);$/;"	p	struct:tcp_hdr	access:public	signature:(u16_t urgp)
tcp_hdr::PACK_STRUCT_FIELD	lwip/include/lwip/tcp.h	/^  PACK_STRUCT_FIELD(u16_t wnd);$/;"	p	struct:tcp_hdr	access:public	signature:(u16_t wnd)
tcp_hdr::PACK_STRUCT_FIELD	lwip/include/lwip/tcp.h	/^  PACK_STRUCT_FIELD(u32_t ackno);$/;"	p	struct:tcp_hdr	access:public	signature:(u32_t ackno)
tcp_hdr::PACK_STRUCT_FIELD	lwip/include/lwip/tcp.h	/^  PACK_STRUCT_FIELD(u32_t seqno);$/;"	p	struct:tcp_hdr	access:public	signature:(u32_t seqno)
tcp_init	lwip/core/tcp.c	/^tcp_init(void)$/;"	f	signature:(void)
tcp_init	lwip/include/lwip/tcp.h	/^void             tcp_init    (void);  \/* Must be called first to$/;"	p	signature:(void)
tcp_input	lwip/core/tcp_in.c	/^tcp_input(struct pbuf *p, struct netif *inp)$/;"	f	signature:(struct pbuf *p, struct netif *inp)
tcp_input	lwip/include/lwip/tcp.h	/^void             tcp_input   (struct pbuf *p, struct netif *inp);$/;"	p	signature:(struct pbuf *p, struct netif *inp)
tcp_input_pcb	lwip/core/tcp_in.c	/^struct tcp_pcb *tcp_input_pcb;$/;"	v	typeref:struct:tcp_pcb
tcp_keepalive	lwip/core/tcp_out.c	/^tcp_keepalive(struct tcp_pcb *pcb)$/;"	f	signature:(struct tcp_pcb *pcb)
tcp_keepalive	lwip/include/lwip/tcp.h	/^void tcp_keepalive(struct tcp_pcb *pcb);$/;"	p	signature:(struct tcp_pcb *pcb)
tcp_kill_prio	lwip/core/tcp.c	/^tcp_kill_prio(u8_t prio)$/;"	f	file:	signature:(u8_t prio)
tcp_kill_timewait	lwip/core/tcp.c	/^tcp_kill_timewait(void)$/;"	f	file:	signature:(void)
tcp_listen	lwip/core/tcp.c	/^tcp_listen(struct tcp_pcb *pcb)$/;"	f	signature:(struct tcp_pcb *pcb)
tcp_listen	lwip/include/lwip/tcp.h	/^struct tcp_pcb * tcp_listen  (struct tcp_pcb *pcb);$/;"	p	signature:(struct tcp_pcb *pcb)
tcp_listen_input	lwip/core/tcp_in.c	/^static err_t tcp_listen_input(struct tcp_pcb_listen *pcb);$/;"	p	file:	signature:(struct tcp_pcb_listen *pcb)
tcp_listen_input	lwip/core/tcp_in.c	/^tcp_listen_input(struct tcp_pcb_listen *pcb)$/;"	f	file:	signature:(struct tcp_pcb_listen *pcb)
tcp_listen_pcbs	lwip/core/tcp.c	/^union tcp_listen_pcbs_t tcp_listen_pcbs;$/;"	v	typeref:union:tcp_listen_pcbs_t
tcp_listen_pcbs_t	lwip/include/lwip/tcp.h	/^union tcp_listen_pcbs_t { \/* List of all TCP PCBs in LISTEN state. *\/$/;"	u
tcp_listen_pcbs_t::listen_pcbs	lwip/include/lwip/tcp.h	/^	struct tcp_pcb_listen *listen_pcbs; $/;"	m	union:tcp_listen_pcbs_t	typeref:struct:tcp_listen_pcbs_t::tcp_pcb_listen	access:public
tcp_listen_pcbs_t::pcbs	lwip/include/lwip/tcp.h	/^	struct tcp_pcb *pcbs;$/;"	m	union:tcp_listen_pcbs_t	typeref:struct:tcp_listen_pcbs_t::tcp_pcb	access:public
tcp_mss	lwip/include/lwip/tcp.h	/^#define          tcp_mss(/;"	d
tcp_new	lwip/core/tcp.c	/^tcp_new(void)$/;"	f	signature:(void)
tcp_new	lwip/include/lwip/tcp.h	/^struct tcp_pcb * tcp_new     (void);$/;"	p	signature:(void)
tcp_new_port	lwip/core/tcp.c	/^static u16_t tcp_new_port(void);$/;"	p	file:	signature:(void)
tcp_new_port	lwip/core/tcp.c	/^tcp_new_port(void)$/;"	f	file:	signature:(void)
tcp_next_iss	lwip/core/tcp.c	/^tcp_next_iss(void)$/;"	f	signature:(void)
tcp_next_iss	lwip/include/lwip/tcp.h	/^u32_t tcp_next_iss(void);$/;"	p	signature:(void)
tcp_output	lwip/core/tcp_out.c	/^tcp_output(struct tcp_pcb *pcb)$/;"	f	signature:(struct tcp_pcb *pcb)
tcp_output	lwip/include/lwip/tcp.h	/^err_t            tcp_output  (struct tcp_pcb *pcb);$/;"	p	signature:(struct tcp_pcb *pcb)
tcp_output_segment	lwip/core/tcp_out.c	/^static void tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb);$/;"	p	file:	signature:(struct tcp_seg *seg, struct tcp_pcb *pcb)
tcp_output_segment	lwip/core/tcp_out.c	/^tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb)$/;"	f	file:	signature:(struct tcp_seg *seg, struct tcp_pcb *pcb)
tcp_parseopt	lwip/core/tcp_in.c	/^static void tcp_parseopt(struct tcp_pcb *pcb);$/;"	p	file:	signature:(struct tcp_pcb *pcb)
tcp_parseopt	lwip/core/tcp_in.c	/^tcp_parseopt(struct tcp_pcb *pcb)$/;"	f	file:	signature:(struct tcp_pcb *pcb)
tcp_pcb	lwip/include/lwip/tcp.h	/^struct tcp_pcb {$/;"	s
tcp_pcb::IP_PCB	lwip/include/lwip/tcp.h	/^  IP_PCB;$/;"	m	struct:tcp_pcb	access:public
tcp_pcb::accept	lwip/include/lwip/tcp.h	/^  err_t (* accept)(void *arg, struct tcp_pcb *newpcb, err_t err);$/;"	m	struct:tcp_pcb	access:public
tcp_pcb::acked	lwip/include/lwip/tcp.h	/^  u16_t acked;$/;"	m	struct:tcp_pcb	access:public
tcp_pcb::callback_arg	lwip/include/lwip/tcp.h	/^  void *callback_arg;$/;"	m	struct:tcp_pcb	access:public
tcp_pcb::connected	lwip/include/lwip/tcp.h	/^  err_t (* connected)(void *arg, struct tcp_pcb *pcb, err_t err);$/;"	m	struct:tcp_pcb	access:public
tcp_pcb::cwnd	lwip/include/lwip/tcp.h	/^  u16_t cwnd;  $/;"	m	struct:tcp_pcb	access:public
tcp_pcb::dupacks	lwip/include/lwip/tcp.h	/^  u8_t dupacks;$/;"	m	struct:tcp_pcb	access:public
tcp_pcb::errf	lwip/include/lwip/tcp.h	/^  void (* errf)(void *arg, err_t err);$/;"	m	struct:tcp_pcb	access:public
tcp_pcb::flags	lwip/include/lwip/tcp.h	/^  u8_t flags;$/;"	m	struct:tcp_pcb	access:public
tcp_pcb::keep_cnt	lwip/include/lwip/tcp.h	/^  u8_t keep_cnt;$/;"	m	struct:tcp_pcb	access:public
tcp_pcb::keepalive	lwip/include/lwip/tcp.h	/^  u32_t keepalive;$/;"	m	struct:tcp_pcb	access:public
tcp_pcb::lastack	lwip/include/lwip/tcp.h	/^  u32_t lastack; \/* Highest acknowledged seqno. *\/$/;"	m	struct:tcp_pcb	access:public
tcp_pcb::local_port	lwip/include/lwip/tcp.h	/^  u16_t local_port;$/;"	m	struct:tcp_pcb	access:public
tcp_pcb::mss	lwip/include/lwip/tcp.h	/^  u16_t mss;   \/* maximum segment size *\/$/;"	m	struct:tcp_pcb	access:public
tcp_pcb::next	lwip/include/lwip/tcp.h	/^  struct tcp_pcb *next;   \/* for the linked list *\/$/;"	m	struct:tcp_pcb	typeref:struct:tcp_pcb::tcp_pcb	access:public
tcp_pcb::nrtx	lwip/include/lwip/tcp.h	/^  u8_t nrtx;    \/* number of retransmissions *\/$/;"	m	struct:tcp_pcb	access:public
tcp_pcb::ooseq	lwip/include/lwip/tcp.h	/^  struct tcp_seg *ooseq;    \/* Received out of sequence segments. *\/$/;"	m	struct:tcp_pcb	typeref:struct:tcp_pcb::tcp_seg	access:public
tcp_pcb::poll	lwip/include/lwip/tcp.h	/^  err_t (* poll)(void *arg, struct tcp_pcb *pcb);$/;"	m	struct:tcp_pcb	access:public
tcp_pcb::pollinterval	lwip/include/lwip/tcp.h	/^  u8_t polltmr, pollinterval;$/;"	m	struct:tcp_pcb	access:public
tcp_pcb::polltmr	lwip/include/lwip/tcp.h	/^  u8_t polltmr, pollinterval;$/;"	m	struct:tcp_pcb	access:public
tcp_pcb::prio	lwip/include/lwip/tcp.h	/^  u8_t prio;$/;"	m	struct:tcp_pcb	access:public
tcp_pcb::rcv_nxt	lwip/include/lwip/tcp.h	/^  u32_t rcv_nxt;   \/* next seqno expected *\/$/;"	m	struct:tcp_pcb	access:public
tcp_pcb::rcv_wnd	lwip/include/lwip/tcp.h	/^  u16_t rcv_wnd;   \/* receiver window *\/$/;"	m	struct:tcp_pcb	access:public
tcp_pcb::recv	lwip/include/lwip/tcp.h	/^  err_t (* recv)(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err);$/;"	m	struct:tcp_pcb	access:public
tcp_pcb::remote_port	lwip/include/lwip/tcp.h	/^  u16_t remote_port;$/;"	m	struct:tcp_pcb	access:public
tcp_pcb::rtime	lwip/include/lwip/tcp.h	/^  u16_t rtime;$/;"	m	struct:tcp_pcb	access:public
tcp_pcb::rto	lwip/include/lwip/tcp.h	/^  u16_t rto;    \/* retransmission time-out *\/$/;"	m	struct:tcp_pcb	access:public
tcp_pcb::rtseq	lwip/include/lwip/tcp.h	/^  u32_t rtseq;  \/* sequence number being timed *\/$/;"	m	struct:tcp_pcb	access:public
tcp_pcb::rttest	lwip/include/lwip/tcp.h	/^  u16_t rttest; \/* RTT estimate in 500ms ticks *\/$/;"	m	struct:tcp_pcb	access:public
tcp_pcb::sa	lwip/include/lwip/tcp.h	/^  s16_t sa, sv;$/;"	m	struct:tcp_pcb	access:public
tcp_pcb::sent	lwip/include/lwip/tcp.h	/^  err_t (* sent)(void *arg, struct tcp_pcb *pcb, u16_t space);$/;"	m	struct:tcp_pcb	access:public
tcp_pcb::snd_buf	lwip/include/lwip/tcp.h	/^  u16_t snd_buf;   \/* Available buffer space for sending (in bytes). *\/$/;"	m	struct:tcp_pcb	access:public
tcp_pcb::snd_lbb	lwip/include/lwip/tcp.h	/^    snd_lbb;       \/* Sequence number of next byte to be buffered. *\/$/;"	m	struct:tcp_pcb	access:public
tcp_pcb::snd_max	lwip/include/lwip/tcp.h	/^    snd_max,       \/* Highest seqno sent. *\/$/;"	m	struct:tcp_pcb	access:public
tcp_pcb::snd_nxt	lwip/include/lwip/tcp.h	/^  u32_t snd_nxt,       \/* next seqno to be sent *\/$/;"	m	struct:tcp_pcb	access:public
tcp_pcb::snd_queuelen	lwip/include/lwip/tcp.h	/^  u8_t snd_queuelen; \/* Available buffer space for sending (in tcp_segs). *\/$/;"	m	struct:tcp_pcb	access:public
tcp_pcb::snd_wl1	lwip/include/lwip/tcp.h	/^    snd_wl1, snd_wl2, \/* Sequence and acknowledgement numbers of last$/;"	m	struct:tcp_pcb	access:public
tcp_pcb::snd_wl2	lwip/include/lwip/tcp.h	/^    snd_wl1, snd_wl2, \/* Sequence and acknowledgement numbers of last$/;"	m	struct:tcp_pcb	access:public
tcp_pcb::snd_wnd	lwip/include/lwip/tcp.h	/^    snd_wnd,       \/* sender window *\/$/;"	m	struct:tcp_pcb	access:public
tcp_pcb::ssthresh	lwip/include/lwip/tcp.h	/^  u16_t ssthresh;$/;"	m	struct:tcp_pcb	access:public
tcp_pcb::state	lwip/include/lwip/tcp.h	/^  enum tcp_state state;   \/* TCP state *\/$/;"	m	struct:tcp_pcb	typeref:enum:tcp_pcb::tcp_state	access:public
tcp_pcb::sv	lwip/include/lwip/tcp.h	/^  s16_t sa, sv;$/;"	m	struct:tcp_pcb	access:public
tcp_pcb::tmr	lwip/include/lwip/tcp.h	/^  u32_t tmr;$/;"	m	struct:tcp_pcb	access:public
tcp_pcb::unacked	lwip/include/lwip/tcp.h	/^  struct tcp_seg *unacked;  \/* Sent but unacknowledged segments. *\/$/;"	m	struct:tcp_pcb	typeref:struct:tcp_pcb::tcp_seg	access:public
tcp_pcb::unsent	lwip/include/lwip/tcp.h	/^  struct tcp_seg *unsent;   \/* Unsent (queued) segments. *\/$/;"	m	struct:tcp_pcb	typeref:struct:tcp_pcb::tcp_seg	access:public
tcp_pcb_copy	lwip/include/lwip/tcp.h	/^struct tcp_pcb *tcp_pcb_copy(struct tcp_pcb *pcb);$/;"	p	signature:(struct tcp_pcb *pcb)
tcp_pcb_listen	lwip/include/lwip/tcp.h	/^struct tcp_pcb_listen {  $/;"	s
tcp_pcb_listen::IP_PCB	lwip/include/lwip/tcp.h	/^  IP_PCB;$/;"	m	struct:tcp_pcb_listen	access:public
tcp_pcb_listen::accept	lwip/include/lwip/tcp.h	/^  err_t (* accept)(void *arg, struct tcp_pcb *newpcb, err_t err);$/;"	m	struct:tcp_pcb_listen	access:public
tcp_pcb_listen::callback_arg	lwip/include/lwip/tcp.h	/^  void *callback_arg;$/;"	m	struct:tcp_pcb_listen	access:public
tcp_pcb_listen::local_port	lwip/include/lwip/tcp.h	/^  u16_t local_port; $/;"	m	struct:tcp_pcb_listen	access:public
tcp_pcb_listen::next	lwip/include/lwip/tcp.h	/^  struct tcp_pcb_listen *next;   \/* for the linked list *\/$/;"	m	struct:tcp_pcb_listen	typeref:struct:tcp_pcb_listen::tcp_pcb_listen	access:public
tcp_pcb_listen::prio	lwip/include/lwip/tcp.h	/^  u8_t prio;$/;"	m	struct:tcp_pcb_listen	access:public
tcp_pcb_listen::state	lwip/include/lwip/tcp.h	/^  enum tcp_state state;   \/* TCP state *\/$/;"	m	struct:tcp_pcb_listen	typeref:enum:tcp_pcb_listen::tcp_state	access:public
tcp_pcb_purge	lwip/core/tcp.c	/^tcp_pcb_purge(struct tcp_pcb *pcb)$/;"	f	signature:(struct tcp_pcb *pcb)
tcp_pcb_purge	lwip/include/lwip/tcp.h	/^void tcp_pcb_purge(struct tcp_pcb *pcb);$/;"	p	signature:(struct tcp_pcb *pcb)
tcp_pcb_remove	lwip/core/tcp.c	/^tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)$/;"	f	signature:(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
tcp_pcb_remove	lwip/include/lwip/tcp.h	/^void tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb);$/;"	p	signature:(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
tcp_pcbs_sane	lwip/core/tcp.c	/^tcp_pcbs_sane(void)$/;"	f	signature:(void)
tcp_pcbs_sane	lwip/include/lwip/tcp.h	/^#  define tcp_pcbs_sane(/;"	d
tcp_pcbs_sane	lwip/include/lwip/tcp.h	/^int tcp_pcbs_sane(void);$/;"	p	signature:(void)
tcp_poll	lwip/core/tcp.c	/^tcp_poll(struct tcp_pcb *pcb,$/;"	f	signature:(struct tcp_pcb *pcb, err_t (* poll)(void *arg, struct tcp_pcb *tpcb), u8_t interval)
tcp_poll	lwip/include/lwip/tcp.h	/^void             tcp_poll    (struct tcp_pcb *pcb,$/;"	p	signature:(struct tcp_pcb *pcb, err_t (* poll)(void *arg, struct tcp_pcb *tpcb), u8_t interval)
tcp_process	lwip/core/tcp_in.c	/^static err_t tcp_process(struct tcp_pcb *pcb);$/;"	p	file:	signature:(struct tcp_pcb *pcb)
tcp_process	lwip/core/tcp_in.c	/^tcp_process(struct tcp_pcb *pcb)$/;"	f	file:	signature:(struct tcp_pcb *pcb)
tcp_receive	lwip/core/tcp_in.c	/^static void tcp_receive(struct tcp_pcb *pcb);$/;"	p	file:	signature:(struct tcp_pcb *pcb)
tcp_receive	lwip/core/tcp_in.c	/^tcp_receive(struct tcp_pcb *pcb)$/;"	f	file:	signature:(struct tcp_pcb *pcb)
tcp_recv	lwip/core/tcp.c	/^tcp_recv(struct tcp_pcb *pcb,$/;"	f	signature:(struct tcp_pcb *pcb, err_t (* recv)(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err))
tcp_recv	lwip/include/lwip/tcp.h	/^void             tcp_recv    (struct tcp_pcb *pcb,$/;"	p	signature:(struct tcp_pcb *pcb, err_t (* recv)(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err))
tcp_recv_null	lwip/core/tcp.c	/^tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)$/;"	f	file:	signature:(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
tcp_recved	lwip/core/tcp.c	/^tcp_recved(struct tcp_pcb *pcb, u16_t len)$/;"	f	signature:(struct tcp_pcb *pcb, u16_t len)
tcp_recved	lwip/include/lwip/tcp.h	/^void             tcp_recved  (struct tcp_pcb *pcb, u16_t len);$/;"	p	signature:(struct tcp_pcb *pcb, u16_t len)
tcp_rexmit	lwip/core/tcp_out.c	/^tcp_rexmit(struct tcp_pcb *pcb)$/;"	f	signature:(struct tcp_pcb *pcb)
tcp_rexmit	lwip/include/lwip/tcp.h	/^void             tcp_rexmit  (struct tcp_pcb *pcb);$/;"	p	signature:(struct tcp_pcb *pcb)
tcp_rexmit_seg	lwip/include/lwip/tcp.h	/^void tcp_rexmit_seg(struct tcp_pcb *pcb, struct tcp_seg *seg);$/;"	p	signature:(struct tcp_pcb *pcb, struct tcp_seg *seg)
tcp_rst	lwip/core/tcp_out.c	/^tcp_rst(u32_t seqno, u32_t ackno,$/;"	f	signature:(u32_t seqno, u32_t ackno, struct ip_addr *local_ip, struct ip_addr *remote_ip, u16_t local_port, u16_t remote_port)
tcp_rst	lwip/include/lwip/tcp.h	/^void tcp_rst(u32_t seqno, u32_t ackno,$/;"	p	signature:(u32_t seqno, u32_t ackno, struct ip_addr *local_ip, struct ip_addr *remote_ip, u16_t local_port, u16_t remote_port)
tcp_seg	lwip/include/lwip/tcp.h	/^struct tcp_seg {$/;"	s
tcp_seg::dataptr	lwip/include/lwip/tcp.h	/^  void *dataptr;           \/* pointer to the TCP data in the pbuf *\/$/;"	m	struct:tcp_seg	access:public
tcp_seg::len	lwip/include/lwip/tcp.h	/^  u16_t len;               \/* the TCP length of this segment *\/$/;"	m	struct:tcp_seg	access:public
tcp_seg::next	lwip/include/lwip/tcp.h	/^  struct tcp_seg *next;    \/* used when putting segements on a queue *\/$/;"	m	struct:tcp_seg	typeref:struct:tcp_seg::tcp_seg	access:public
tcp_seg::p	lwip/include/lwip/tcp.h	/^  struct pbuf *p;          \/* buffer containing data + TCP header *\/$/;"	m	struct:tcp_seg	typeref:struct:tcp_seg::pbuf	access:public
tcp_seg::tcphdr	lwip/include/lwip/tcp.h	/^  struct tcp_hdr *tcphdr;  \/* the TCP header *\/$/;"	m	struct:tcp_seg	typeref:struct:tcp_seg::tcp_hdr	access:public
tcp_seg_copy	lwip/core/tcp.c	/^tcp_seg_copy(struct tcp_seg *seg)$/;"	f	signature:(struct tcp_seg *seg)
tcp_seg_copy	lwip/include/lwip/tcp.h	/^struct tcp_seg *tcp_seg_copy(struct tcp_seg *seg);$/;"	p	signature:(struct tcp_seg *seg)
tcp_seg_free	lwip/core/tcp.c	/^tcp_seg_free(struct tcp_seg *seg)$/;"	f	signature:(struct tcp_seg *seg)
tcp_seg_free	lwip/include/lwip/tcp.h	/^u8_t tcp_seg_free(struct tcp_seg *seg);$/;"	p	signature:(struct tcp_seg *seg)
tcp_segs_free	lwip/core/tcp.c	/^tcp_segs_free(struct tcp_seg *seg)$/;"	f	signature:(struct tcp_seg *seg)
tcp_segs_free	lwip/include/lwip/tcp.h	/^u8_t tcp_segs_free(struct tcp_seg *seg);$/;"	p	signature:(struct tcp_seg *seg)
tcp_send_ctrl	lwip/core/tcp_out.c	/^tcp_send_ctrl(struct tcp_pcb *pcb, u8_t flags)$/;"	f	signature:(struct tcp_pcb *pcb, u8_t flags)
tcp_send_ctrl	lwip/include/lwip/tcp.h	/^err_t tcp_send_ctrl(struct tcp_pcb *pcb, u8_t flags);$/;"	p	signature:(struct tcp_pcb *pcb, u8_t flags)
tcp_sent	lwip/core/tcp.c	/^tcp_sent(struct tcp_pcb *pcb,$/;"	f	signature:(struct tcp_pcb *pcb, err_t (* sent)(void *arg, struct tcp_pcb *tpcb, u16_t len))
tcp_sent	lwip/include/lwip/tcp.h	/^void             tcp_sent    (struct tcp_pcb *pcb,$/;"	p	signature:(struct tcp_pcb *pcb, err_t (* sent)(void *arg, struct tcp_pcb *tpcb, u16_t len))
tcp_seq	lwip/netif/ppp/vjbsdhdr.h	/^typedef u32_t tcp_seq;$/;"	t
tcp_setprio	lwip/core/tcp.c	/^tcp_setprio(struct tcp_pcb *pcb, u8_t prio)$/;"	f	signature:(struct tcp_pcb *pcb, u8_t prio)
tcp_setprio	lwip/include/lwip/tcp.h	/^void             tcp_setprio (struct tcp_pcb *pcb, u8_t prio);$/;"	p	signature:(struct tcp_pcb *pcb, u8_t prio)
tcp_slowtmr	lwip/core/tcp.c	/^tcp_slowtmr(void)$/;"	f	signature:(void)
tcp_slowtmr	lwip/include/lwip/tcp.h	/^void             tcp_slowtmr (void);$/;"	p	signature:(void)
tcp_sndbuf	lwip/include/lwip/tcp.h	/^#define          tcp_sndbuf(/;"	d
tcp_state	lwip/include/lwip/tcp.h	/^enum tcp_state {$/;"	g
tcp_ticks	lwip/core/tcp.c	/^u32_t tcp_ticks;$/;"	v
tcp_timer	lwip/core/tcp.c	/^static u8_t tcp_timer;$/;"	v	file:
tcp_timer_needed	lwip/api/tcpip.c	/^tcp_timer_needed(void)$/;"	f	signature:(void)
tcp_timer_needed	lwip/include/lwip/tcp.h	/^#define tcp_timer_needed(/;"	d
tcp_timer_needed	lwip/include/lwip/tcp.h	/^void tcp_timer_needed(void);$/;"	p	signature:(void)
tcp_timewait_input	lwip/core/tcp_in.c	/^static err_t tcp_timewait_input(struct tcp_pcb *pcb);$/;"	p	file:	signature:(struct tcp_pcb *pcb)
tcp_timewait_input	lwip/core/tcp_in.c	/^tcp_timewait_input(struct tcp_pcb *pcb)$/;"	f	file:	signature:(struct tcp_pcb *pcb)
tcp_tmp_pcb	lwip/core/tcp.c	/^struct tcp_pcb *tcp_tmp_pcb;$/;"	v	typeref:struct:tcp_pcb
tcp_tmr	lwip/core/tcp.c	/^tcp_tmr(void)$/;"	f	signature:(void)
tcp_tmr	lwip/include/lwip/tcp.h	/^void             tcp_tmr     (void);  \/* Must be called every$/;"	p	signature:(void)
tcp_tw_pcbs	lwip/core/tcp.c	/^struct tcp_pcb *tcp_tw_pcbs;      \/* List of all TCP PCBs in TIME-WAIT. *\/$/;"	v	typeref:struct:tcp_pcb
tcp_write	lwip/core/tcp_out.c	/^tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t copy)$/;"	f	signature:(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t copy)
tcp_write	lwip/include/lwip/tcp.h	/^err_t            tcp_write   (struct tcp_pcb *pcb, const void *dataptr, u16_t len,$/;"	p	signature:(struct tcp_pcb *pcb, const void *dataptr, u16_t len, u8_t copy)
tcphdr	lwip/core/tcp_in.c	/^static struct tcp_hdr *tcphdr;$/;"	v	typeref:struct:tcp_hdr	file:
tcphdr	lwip/include/lwip/tcp.h	/^  struct tcp_hdr *tcphdr;  \/* the TCP header *\/$/;"	m	struct:tcp_seg	typeref:struct:tcp_seg::tcp_hdr	access:public
tcphdr	lwip/netif/ppp/vjbsdhdr.h	/^struct tcphdr  $/;"	s
tcphdr::th_ack	lwip/netif/ppp/vjbsdhdr.h	/^	tcp_seq	th_ack;			\/* acknowledgement number *\/$/;"	m	struct:tcphdr	access:public
tcphdr::th_dport	lwip/netif/ppp/vjbsdhdr.h	/^	u_short	th_dport;		\/* destination port *\/$/;"	m	struct:tcphdr	access:public
tcphdr::th_flags	lwip/netif/ppp/vjbsdhdr.h	/^	u_char	th_flags;$/;"	m	struct:tcphdr	access:public
tcphdr::th_off	lwip/netif/ppp/vjbsdhdr.h	/^			th_off:4;		\/* data offset *\/$/;"	m	struct:tcphdr	access:public
tcphdr::th_off	lwip/netif/ppp/vjbsdhdr.h	/^	unsigned	th_off:4,		\/* data offset *\/$/;"	m	struct:tcphdr	access:public
tcphdr::th_seq	lwip/netif/ppp/vjbsdhdr.h	/^	tcp_seq	th_seq;			\/* sequence number *\/$/;"	m	struct:tcphdr	access:public
tcphdr::th_sport	lwip/netif/ppp/vjbsdhdr.h	/^	u_short	th_sport;		\/* source port *\/$/;"	m	struct:tcphdr	access:public
tcphdr::th_sum	lwip/netif/ppp/vjbsdhdr.h	/^	u_short	th_sum;			\/* checksum *\/$/;"	m	struct:tcphdr	access:public
tcphdr::th_urp	lwip/netif/ppp/vjbsdhdr.h	/^	u_short	th_urp;			\/* urgent pointer *\/$/;"	m	struct:tcphdr	access:public
tcphdr::th_win	lwip/netif/ppp/vjbsdhdr.h	/^	u_short	th_win;			\/* window *\/$/;"	m	struct:tcphdr	access:public
tcphdr::th_x2	lwip/netif/ppp/vjbsdhdr.h	/^			th_x2:4;		\/* (unused) *\/$/;"	m	struct:tcphdr	access:public
tcphdr::th_x2	lwip/netif/ppp/vjbsdhdr.h	/^	unsigned	th_x2:4,		\/* (unused) *\/$/;"	m	struct:tcphdr	access:public
tcphdr::th_x2_off	lwip/netif/ppp/vjbsdhdr.h	/^	u_char th_x2_off;$/;"	m	struct:tcphdr	access:public
tcpip_apimsg	lwip/api/tcpip.c	/^tcpip_apimsg(struct api_msg *apimsg)$/;"	f	signature:(struct api_msg *apimsg)
tcpip_apimsg	lwip/include/lwip/tcpip.h	/^void tcpip_apimsg(struct api_msg *apimsg);$/;"	p	signature:(struct api_msg *apimsg)
tcpip_callback	lwip/api/tcpip.c	/^tcpip_callback(void (*f)(void *ctx), void *ctx)$/;"	f	signature:(void (*f)(void *ctx), void *ctx)
tcpip_callback	lwip/include/lwip/tcpip.h	/^err_t tcpip_callback(void (*f)(void *ctx), void *ctx);$/;"	p	signature:(void (*f)(void *ctx), void *ctx)
tcpip_init	lwip/api/tcpip.c	/^tcpip_init(void (* initfunc)(void *), void *arg)$/;"	f	signature:(void (* initfunc)(void *), void *arg)
tcpip_init	lwip/include/lwip/tcpip.h	/^void tcpip_init(void (* tcpip_init_done)(void *), void *arg);$/;"	p	signature:(void (* tcpip_init_done)(void *), void *arg)
tcpip_init_done	lwip/api/tcpip.c	/^static void (* tcpip_init_done)(void *arg) = NULL;$/;"	v	file:
tcpip_init_done_arg	lwip/api/tcpip.c	/^static void *tcpip_init_done_arg;$/;"	v	file:
tcpip_input	lwip/api/tcpip.c	/^tcpip_input(struct pbuf *p, struct netif *inp)$/;"	f	signature:(struct pbuf *p, struct netif *inp)
tcpip_input	lwip/include/lwip/tcpip.h	/^err_t tcpip_input(struct pbuf *p, struct netif *inp);$/;"	p	signature:(struct pbuf *p, struct netif *inp)
tcpip_msg	lwip/include/lwip/tcpip.h	/^struct tcpip_msg {$/;"	s
tcpip_msg::netif	lwip/include/lwip/tcpip.h	/^      struct netif *netif;$/;"	m	struct:tcpip_msg	typeref:struct:tcpip_msg::netif	access:public
tcpip_msg::p	lwip/include/lwip/tcpip.h	/^      struct pbuf *p;$/;"	m	struct:tcpip_msg	typeref:struct:tcpip_msg::pbuf	access:public
tcpip_msg::ctx	lwip/include/lwip/tcpip.h	/^      void *ctx;$/;"	m	struct:tcpip_msg	access:public
tcpip_msg::f	lwip/include/lwip/tcpip.h	/^      void (*f)(void *ctx);$/;"	m	struct:tcpip_msg	access:public
tcpip_msg::apimsg	lwip/include/lwip/tcpip.h	/^    struct api_msg *apimsg;$/;"	m	union:tcpip_msg	typeref:struct:tcpip_msg::api_msg	access:public
tcpip_msg::cb	lwip/include/lwip/tcpip.h	/^    } cb;$/;"	m	union:tcpip_msg	typeref:struct:tcpip_msg	access:public
tcpip_msg::inp	lwip/include/lwip/tcpip.h	/^    } inp;$/;"	m	union:tcpip_msg	typeref:struct:tcpip_msg	access:public
tcpip_msg::msg	lwip/include/lwip/tcpip.h	/^  } msg;$/;"	m	struct:tcpip_msg	typeref:union:tcpip_msg	access:public
tcpip_msg::sem	lwip/include/lwip/tcpip.h	/^  sys_sem_t *sem;$/;"	m	struct:tcpip_msg	access:public
tcpip_msg::type	lwip/include/lwip/tcpip.h	/^  enum tcpip_msg_type type;$/;"	m	struct:tcpip_msg	typeref:enum:tcpip_msg::tcpip_msg_type	access:public
tcpip_msg_type	lwip/include/lwip/tcpip.h	/^enum tcpip_msg_type {$/;"	g
tcpip_tcp_timer	lwip/api/tcpip.c	/^tcpip_tcp_timer(void *arg)$/;"	f	file:	signature:(void *arg)
tcpip_tcp_timer_active	lwip/api/tcpip.c	/^static int tcpip_tcp_timer_active = 0;$/;"	v	file:
tcpip_tcp_timer_needed	lwip/include/lwip/tcpip.h	/^void tcpip_tcp_timer_needed(void);$/;"	p	signature:(void)
tcpip_thread	lwip/api/tcpip.c	/^tcpip_thread(void *arg)$/;"	f	file:	signature:(void *arg)
tcplen	lwip/core/tcp_in.c	/^static u16_t tcplen;$/;"	v	file:
term_reason	lwip/netif/ppp/fsm.h	/^    char* term_reason;		\/* Reason for closing protocol *\/$/;"	m	struct:fsm	access:public
term_reason_len	lwip/netif/ppp/fsm.h	/^    int term_reason_len;	\/* Length of term_reason *\/$/;"	m	struct:fsm	access:public
tf	proc.h	/^  struct trapframe *tf;     \/\/ Trap frame for current interrupt$/;"	m	struct:proc	typeref:struct:proc::trapframe	access:public
th_ack	lwip/netif/ppp/vjbsdhdr.h	/^	tcp_seq	th_ack;			\/* acknowledgement number *\/$/;"	m	struct:tcphdr	access:public
th_dport	lwip/netif/ppp/vjbsdhdr.h	/^	u_short	th_dport;		\/* destination port *\/$/;"	m	struct:tcphdr	access:public
th_flags	lwip/netif/ppp/vjbsdhdr.h	/^	u_char	th_flags;$/;"	m	struct:tcphdr	access:public
th_off	lwip/netif/ppp/vjbsdhdr.h	/^			th_off:4;		\/* data offset *\/$/;"	m	struct:tcphdr	access:public
th_off	lwip/netif/ppp/vjbsdhdr.h	/^	unsigned	th_off:4,		\/* data offset *\/$/;"	m	struct:tcphdr	access:public
th_seq	lwip/netif/ppp/vjbsdhdr.h	/^	tcp_seq	th_seq;			\/* sequence number *\/$/;"	m	struct:tcphdr	access:public
th_sport	lwip/netif/ppp/vjbsdhdr.h	/^	u_short	th_sport;		\/* source port *\/$/;"	m	struct:tcphdr	access:public
th_sum	lwip/netif/ppp/vjbsdhdr.h	/^	u_short	th_sum;			\/* checksum *\/$/;"	m	struct:tcphdr	access:public
th_urp	lwip/netif/ppp/vjbsdhdr.h	/^	u_short	th_urp;			\/* urgent pointer *\/$/;"	m	struct:tcphdr	access:public
th_win	lwip/netif/ppp/vjbsdhdr.h	/^	u_short	th_win;			\/* window *\/$/;"	m	struct:tcphdr	access:public
th_x2	lwip/netif/ppp/vjbsdhdr.h	/^			th_x2:4;		\/* (unused) *\/$/;"	m	struct:tcphdr	access:public
th_x2	lwip/netif/ppp/vjbsdhdr.h	/^	unsigned	th_x2:4,		\/* (unused) *\/$/;"	m	struct:tcphdr	access:public
th_x2_off	lwip/netif/ppp/vjbsdhdr.h	/^	u_char th_x2_off;$/;"	m	struct:tcphdr	access:public
thr	proc.h	/^  struct thread *thr;$/;"	m	struct:proc	typeref:struct:proc::thread	access:public
thread	thread.h	/^struct thread {$/;"	s
thread::data	thread.h	/^    void *data;$/;"	m	struct:thread	access:public
thread::p	thread.h	/^    struct proc *p;$/;"	m	struct:thread	typeref:struct:thread::proc	access:public
thread::timeouts	thread.h	/^    struct sys_timeouts timeouts;$/;"	m	struct:thread	typeref:struct:thread::sys_timeouts	access:public
thread_stub	console.c	/^thread_stub(void * arg)$/;"	f	signature:(void * arg)
thread_wrap	thread.c	/^void thread_wrap(void (* thread)(void *arg), void *arg)$/;"	f	signature:(void (* thread)(void *arg), void *arg)
thread_wrap	thread.c	/^void thread_wrap(void (* thread)(void *arg), void *arg);$/;"	p	file:	signature:(void (* thread)(void *arg), void *arg)
ticks	trap.c	/^int ticks;$/;"	v
tickslock	trap.c	/^struct spinlock tickslock;$/;"	v	typeref:struct:spinlock
time	lwip/include/lwip/sys.h	/^  u32_t time;$/;"	m	struct:sys_timeout	access:public
timeflag	lwip/core/sys.c	/^    int timeflag;$/;"	m	struct:sswt_cb	file:	access:public
timeouts	thread.h	/^    struct sys_timeouts timeouts;$/;"	m	struct:thread	typeref:struct:thread::sys_timeouts	access:public
timeouttime	lwip/netif/ppp/chap.h	/^    int timeouttime;		\/* Timeout time in seconds *\/$/;"	m	struct:chap_state	access:public
timeouttime	lwip/netif/ppp/fsm.h	/^    int timeouttime;		\/* Timeout time in milliseconds *\/$/;"	m	struct:fsm	access:public
timer_init	defs.h	/^void            timer_init(void);$/;"	p	signature:(void)
timer_init	timer.c	/^timer_init(void)$/;"	f	signature:(void)
timeval	lwip/include/lwip/sockets.h	/^  struct timeval {$/;"	s
timeval::tv_sec	lwip/include/lwip/sockets.h	/^    long    tv_sec;         \/* seconds *\/$/;"	m	struct:timeval	access:public
timeval::tv_usec	lwip/include/lwip/sockets.h	/^    long    tv_usec;        \/* and microseconds *\/$/;"	m	struct:timeval	access:public
tmr	lwip/include/lwip/tcp.h	/^  u32_t tmr;$/;"	m	struct:tcp_pcb	access:public
togglecode	kbd.h	/^static uchar togglecode[256] =$/;"	v
tooshort	e100.h	/^    char tooshort : 1;$/;"	m	struct:rf_status	access:public
tot_len	lwip/include/lwip/pbuf.h	/^  u16_t tot_len;$/;"	m	struct:pbuf	access:public
trans_thres	e100.h	/^        uint8_t trans_thres;$/;"	m	struct:op_transmit_cmd	access:public
trap	trap.c	/^trap(struct trapframe *tf)$/;"	f	signature:(struct trapframe *tf)
trapframe	x86.h	/^struct trapframe {$/;"	s
trapframe::cs	x86.h	/^  ushort cs;$/;"	m	struct:trapframe	access:public
trapframe::ds	x86.h	/^  ushort ds;$/;"	m	struct:trapframe	access:public
trapframe::eax	x86.h	/^  uint eax;$/;"	m	struct:trapframe	access:public
trapframe::ebp	x86.h	/^  uint ebp;$/;"	m	struct:trapframe	access:public
trapframe::ebx	x86.h	/^  uint ebx;$/;"	m	struct:trapframe	access:public
trapframe::ecx	x86.h	/^  uint ecx;$/;"	m	struct:trapframe	access:public
trapframe::edi	x86.h	/^  uint edi;$/;"	m	struct:trapframe	access:public
trapframe::edx	x86.h	/^  uint edx;$/;"	m	struct:trapframe	access:public
trapframe::eflags	x86.h	/^  uint eflags;$/;"	m	struct:trapframe	access:public
trapframe::eip	x86.h	/^  uint eip;$/;"	m	struct:trapframe	access:public
trapframe::err	x86.h	/^  uint err;$/;"	m	struct:trapframe	access:public
trapframe::es	x86.h	/^  ushort es;$/;"	m	struct:trapframe	access:public
trapframe::esi	x86.h	/^  uint esi;$/;"	m	struct:trapframe	access:public
trapframe::esp	x86.h	/^  uint esp;$/;"	m	struct:trapframe	access:public
trapframe::oesp	x86.h	/^  uint oesp;      \/\/ useless & ignored$/;"	m	struct:trapframe	access:public
trapframe::padding1	x86.h	/^  ushort padding1;$/;"	m	struct:trapframe	access:public
trapframe::padding2	x86.h	/^  ushort padding2;$/;"	m	struct:trapframe	access:public
trapframe::padding3	x86.h	/^  ushort padding3;$/;"	m	struct:trapframe	access:public
trapframe::padding4	x86.h	/^  ushort padding4;$/;"	m	struct:trapframe	access:public
trapframe::ss	x86.h	/^  ushort ss;$/;"	m	struct:trapframe	access:public
trapframe::trapno	x86.h	/^  uint trapno;$/;"	m	struct:trapframe	access:public
trapno	x86.h	/^  uint trapno;$/;"	m	struct:trapframe	access:public
tries	lwip/include/lwip/dhcp.h	/^  u8_t tries;$/;"	m	struct:dhcp	access:public
ts	proc.h	/^  struct taskstate ts;        \/\/ Used by x86 to find stack for interrupt$/;"	m	struct:cpu	typeref:struct:cpu::taskstate	access:public
tstate	lwip/netif/ppp/vj.h	/^    struct cstate tstate[MAX_SLOTS];	\/* xmit connection states *\/$/;"	m	struct:vjcompress	typeref:struct:vjcompress::cstate	access:public
tv_sec	lwip/include/lwip/sockets.h	/^    long    tv_sec;         \/* seconds *\/$/;"	m	struct:timeval	access:public
tv_usec	lwip/include/lwip/sockets.h	/^    long    tv_usec;        \/* and microseconds *\/$/;"	m	struct:timeval	access:public
tvinit	defs.h	/^void            tvinit(void);$/;"	p	signature:(void)
tvinit	trap.c	/^tvinit(void)$/;"	f	signature:(void)
twofiles	usertests.c	/^twofiles(void)$/;"	f	signature:(void)
type	e100.h	/^    char type :     1;$/;"	m	struct:rf_status	access:public
type	elf.h	/^  uint type;$/;"	m	struct:proghdr	access:public
type	elf.h	/^  ushort type;$/;"	m	struct:elfhdr	access:public
type	file.h	/^  enum { FD_CLOSED, FD_NONE, FD_PIPE, FD_INODE } type;$/;"	m	struct:file	typeref:enum:file	access:public
type	fs.h	/^  short type;           \/\/ File type$/;"	m	struct:dinode	access:public
type	fsvar.h	/^  short type;         \/\/ copy of disk inode$/;"	m	struct:inode	access:public
type	lwip/include/ipv6/lwip/icmp.h	/^  u8_t type;$/;"	m	struct:icmp_dur_hdr	access:public
type	lwip/include/ipv6/lwip/icmp.h	/^  u8_t type;$/;"	m	struct:icmp_echo_hdr	access:public
type	lwip/include/ipv6/lwip/icmp.h	/^  u8_t type;$/;"	m	struct:icmp_te_hdr	access:public
type	lwip/include/lwip/api.h	/^  enum netconn_type type;$/;"	m	struct:netconn	typeref:enum:netconn::netconn_type	access:public
type	lwip/include/lwip/api_msg.h	/^  enum api_msg_type type;$/;"	m	struct:api_msg	typeref:enum:api_msg::api_msg_type	access:public
type	lwip/include/lwip/tcpip.h	/^  enum tcpip_msg_type type;$/;"	m	struct:tcpip_msg	typeref:enum:tcpip_msg::tcpip_msg_type	access:public
type	mmu.h	/^  uint type : 4;        \/\/ type(STS_{TG,IG32,TG32})$/;"	m	struct:gatedesc	access:public
type	mmu.h	/^  uint type : 4;       \/\/ Segment type (see STS_ constants)$/;"	m	struct:segdesc	access:public
type	mp.h	/^  uchar type;                   \/\/ MP system config type$/;"	m	struct:mp	access:public
type	mp.h	/^  uchar type;                   \/\/ entry type (0)$/;"	m	struct:mpproc	access:public
type	mp.h	/^  uchar type;                   \/\/ entry type (2)$/;"	m	struct:mpioapic	access:public
type	sh.c	/^  int type;$/;"	m	struct:backcmd	file:	access:public
type	sh.c	/^  int type;$/;"	m	struct:cmd	file:	access:public
type	sh.c	/^  int type;$/;"	m	struct:execcmd	file:	access:public
type	sh.c	/^  int type;$/;"	m	struct:listcmd	file:	access:public
type	sh.c	/^  int type;$/;"	m	struct:pipecmd	file:	access:public
type	sh.c	/^  int type;$/;"	m	struct:redircmd	file:	access:public
type	stat.h	/^  short type;  \/\/ Type of file$/;"	m	struct:stat	access:public
u16_t	lwip/xv6/arch/cc.h	/^typedef unsigned short u16_t;$/;"	t
u32_t	lwip/xv6/arch/cc.h	/^typedef unsigned int u32_t;$/;"	t
u8_t	lwip/xv6/arch/cc.h	/^typedef unsigned char u8_t;$/;"	t
u_char	lwip/netif/ppp/ppp.h	/^typedef unsigned char u_char;$/;"	t
u_int	lwip/netif/ppp/ppp.h	/^typedef unsigned int u_int;$/;"	t
u_long	lwip/netif/ppp/ppp.h	/^typedef unsigned long u_long;$/;"	t
u_short	lwip/netif/ppp/ppp.h	/^typedef unsigned short u_short;$/;"	t
uchar	types.h	/^typedef unsigned char  uchar;$/;"	t
udp	lwip/include/lwip/api.h	/^    struct udp_pcb *udp;$/;"	m	union:netconn	typeref:struct:netconn::udp_pcb	access:public
udp	lwip/include/lwip/stats.h	/^  struct stats_proto udp;$/;"	m	struct:stats_	typeref:struct:stats_::stats_proto	access:public
udp_bind	lwip/core/udp.c	/^udp_bind(struct udp_pcb *pcb, struct ip_addr *ipaddr, u16_t port)$/;"	f	signature:(struct udp_pcb *pcb, struct ip_addr *ipaddr, u16_t port)
udp_bind	lwip/include/lwip/udp.h	/^err_t            udp_bind       (struct udp_pcb *pcb, struct ip_addr *ipaddr,$/;"	p	signature:(struct udp_pcb *pcb, struct ip_addr *ipaddr, u16_t port)
udp_connect	lwip/core/udp.c	/^udp_connect(struct udp_pcb *pcb, struct ip_addr *ipaddr, u16_t port)$/;"	f	signature:(struct udp_pcb *pcb, struct ip_addr *ipaddr, u16_t port)
udp_connect	lwip/include/lwip/udp.h	/^err_t            udp_connect    (struct udp_pcb *pcb, struct ip_addr *ipaddr,$/;"	p	signature:(struct udp_pcb *pcb, struct ip_addr *ipaddr, u16_t port)
udp_debug_print	lwip/core/udp.c	/^udp_debug_print(struct udp_hdr *udphdr)$/;"	f	signature:(struct udp_hdr *udphdr)
udp_debug_print	lwip/include/lwip/udp.h	/^#define udp_debug_print(/;"	d
udp_debug_print	lwip/include/lwip/udp.h	/^int udp_debug_print(struct udp_hdr *udphdr);$/;"	p	signature:(struct udp_hdr *udphdr)
udp_disconnect	lwip/core/udp.c	/^udp_disconnect(struct udp_pcb *pcb)$/;"	f	signature:(struct udp_pcb *pcb)
udp_disconnect	lwip/include/lwip/udp.h	/^void             udp_disconnect    (struct udp_pcb *pcb);$/;"	p	signature:(struct udp_pcb *pcb)
udp_flags	lwip/include/lwip/udp.h	/^#define          udp_flags(/;"	d
udp_hdr	lwip/include/lwip/udp.h	/^struct udp_hdr {$/;"	s
udp_hdr::PACK_STRUCT_FIELD	lwip/include/lwip/udp.h	/^  PACK_STRUCT_FIELD(u16_t chksum);$/;"	p	struct:udp_hdr	access:public	signature:(u16_t chksum)
udp_hdr::PACK_STRUCT_FIELD	lwip/include/lwip/udp.h	/^  PACK_STRUCT_FIELD(u16_t dest);  \/* src\/dest UDP ports *\/$/;"	p	struct:udp_hdr	access:public	signature:(u16_t dest)
udp_hdr::PACK_STRUCT_FIELD	lwip/include/lwip/udp.h	/^  PACK_STRUCT_FIELD(u16_t len);$/;"	p	struct:udp_hdr	access:public	signature:(u16_t len)
udp_hdr::PACK_STRUCT_FIELD	lwip/include/lwip/udp.h	/^  PACK_STRUCT_FIELD(u16_t src);$/;"	p	struct:udp_hdr	access:public	signature:(u16_t src)
udp_init	lwip/core/udp.c	/^udp_init(void)$/;"	f	signature:(void)
udp_init	lwip/include/lwip/udp.h	/^void             udp_init       (void);$/;"	p	signature:(void)
udp_input	lwip/core/udp.c	/^udp_input(struct pbuf *p, struct netif *inp)$/;"	f	signature:(struct pbuf *p, struct netif *inp)
udp_input	lwip/include/lwip/udp.h	/^void             udp_input      (struct pbuf *p, struct netif *inp);$/;"	p	signature:(struct pbuf *p, struct netif *inp)
udp_new	lwip/core/udp.c	/^udp_new(void) {$/;"	f	signature:(void)
udp_new	lwip/include/lwip/udp.h	/^struct udp_pcb * udp_new        (void);$/;"	p	signature:(void)
udp_pcb	lwip/include/lwip/udp.h	/^struct udp_pcb {$/;"	s
udp_pcb::IP_PCB	lwip/include/lwip/udp.h	/^  IP_PCB;$/;"	m	struct:udp_pcb	access:public
udp_pcb::chksum_len	lwip/include/lwip/udp.h	/^  u16_t chksum_len;$/;"	m	struct:udp_pcb	access:public
udp_pcb::flags	lwip/include/lwip/udp.h	/^  u8_t flags;$/;"	m	struct:udp_pcb	access:public
udp_pcb::local_port	lwip/include/lwip/udp.h	/^  u16_t local_port, remote_port;$/;"	m	struct:udp_pcb	access:public
udp_pcb::next	lwip/include/lwip/udp.h	/^  struct udp_pcb *next;$/;"	m	struct:udp_pcb	typeref:struct:udp_pcb::udp_pcb	access:public
udp_pcb::recv	lwip/include/lwip/udp.h	/^  void (* recv)(void *arg, struct udp_pcb *pcb, struct pbuf *p,$/;"	m	struct:udp_pcb	access:public
udp_pcb::recv_arg	lwip/include/lwip/udp.h	/^  void *recv_arg;  $/;"	m	struct:udp_pcb	access:public
udp_pcb::remote_port	lwip/include/lwip/udp.h	/^  u16_t local_port, remote_port;$/;"	m	struct:udp_pcb	access:public
udp_pcbs	lwip/core/udp.c	/^struct udp_pcb *udp_pcbs = NULL;$/;"	v	typeref:struct:udp_pcb
udp_recv	lwip/core/udp.c	/^udp_recv(struct udp_pcb *pcb,$/;"	f	signature:(struct udp_pcb *pcb, void (* recv)(void *arg, struct udp_pcb *upcb, struct pbuf *p, struct ip_addr *addr, u16_t port), void *recv_arg)
udp_recv	lwip/include/lwip/udp.h	/^void             udp_recv       (struct udp_pcb *pcb,$/;"	p	signature:(struct udp_pcb *pcb, void (* recv)(void *arg, struct udp_pcb *upcb, struct pbuf *p, struct ip_addr *addr, u16_t port), void *recv_arg)
udp_remove	lwip/core/udp.c	/^udp_remove(struct udp_pcb *pcb)$/;"	f	signature:(struct udp_pcb *pcb)
udp_remove	lwip/include/lwip/udp.h	/^void             udp_remove     (struct udp_pcb *pcb);$/;"	p	signature:(struct udp_pcb *pcb)
udp_send	lwip/core/udp.c	/^udp_send(struct udp_pcb *pcb, struct pbuf *p)$/;"	f	signature:(struct udp_pcb *pcb, struct pbuf *p)
udp_send	lwip/include/lwip/udp.h	/^err_t            udp_send       (struct udp_pcb *pcb, struct pbuf *p);$/;"	p	signature:(struct udp_pcb *pcb, struct pbuf *p)
udp_sendto	lwip/core/udp.c	/^udp_sendto(struct udp_pcb *pcb, struct pbuf *p,$/;"	f	signature:(struct udp_pcb *pcb, struct pbuf *p, struct ip_addr *dst_ip, u16_t dst_port)
udp_sendto	lwip/include/lwip/udp.h	/^err_t            udp_sendto     (struct udp_pcb *pcb, struct pbuf *p, struct ip_addr *dst_ip, u16_t dst_port);$/;"	p	signature:(struct udp_pcb *pcb, struct pbuf *p, struct ip_addr *dst_ip, u16_t dst_port)
udp_setflags	lwip/include/lwip/udp.h	/^#define          udp_setflags(/;"	d
uint	types.h	/^typedef unsigned int   uint;$/;"	t
uint16_t	types.h	/^typedef unsigned short uint16_t;$/;"	t
uint32_t	types.h	/^typedef unsigned int   uint32_t;$/;"	t
uint8_t	types.h	/^typedef unsigned char  uint8_t;$/;"	t
unacked	lwip/include/lwip/tcp.h	/^  struct tcp_seg *unacked;  \/* Sent but unacknowledged segments. *\/$/;"	m	struct:tcp_pcb	typeref:struct:tcp_pcb::tcp_seg	access:public
unit	lwip/netif/ppp/chap.h	/^    int unit;			\/* Interface unit number *\/$/;"	m	struct:chap_state	access:public
unit	lwip/netif/ppp/fsm.h	/^    int unit;				\/* Interface unit number *\/$/;"	m	struct:fsm	access:public
unit	lwip/netif/ppp/ppp.c	/^	int unit;$/;"	m	struct:pppInputHeader	file:	access:public
unlink	user.h	/^int unlink(char*);$/;"	p	signature:(char*)
unlinkread	usertests.c	/^unlinkread(void)$/;"	f	signature:(void)
unsent	lwip/include/lwip/tcp.h	/^  struct tcp_seg *unsent;   \/* Unsent (queued) segments. *\/$/;"	m	struct:tcp_pcb	typeref:struct:tcp_pcb::tcp_seg	access:public
unused	lwip/include/ipv6/lwip/icmp.h	/^  u32_t unused;$/;"	m	struct:icmp_dur_hdr	access:public
unused	lwip/include/ipv6/lwip/icmp.h	/^  u32_t unused;$/;"	m	struct:icmp_te_hdr	access:public
up	lwip/netif/ppp/fsm.h	/^    void (*up)				\/* Called when fsm reaches OPENED state *\/$/;"	m	struct:fsm_callbacks	access:public
upap	lwip/netif/ppp/pap.c	/^upap_state upap[NUM_PPP];		\/* UPAP state; one for each unit *\/$/;"	v
upap_authpeer	lwip/netif/ppp/pap.c	/^void upap_authpeer(int unit)$/;"	f	signature:(int unit)
upap_authpeer	lwip/netif/ppp/pap.h	/^void upap_authpeer (int);$/;"	p	signature:(int)
upap_authwithpeer	lwip/netif/ppp/pap.c	/^void upap_authwithpeer(int unit, char *user, char *password)$/;"	f	signature:(int unit, char *user, char *password)
upap_authwithpeer	lwip/netif/ppp/pap.h	/^void upap_authwithpeer (int, char *, char *);$/;"	p	signature:(int, char *, char *)
upap_init	lwip/netif/ppp/pap.c	/^static void upap_init (int);$/;"	p	file:	signature:(int)
upap_init	lwip/netif/ppp/pap.c	/^static void upap_init(int unit)$/;"	f	file:	signature:(int unit)
upap_input	lwip/netif/ppp/pap.c	/^static void upap_input (int, u_char *, int);$/;"	p	file:	signature:(int, u_char *, int)
upap_input	lwip/netif/ppp/pap.c	/^static void upap_input(int unit, u_char *inpacket, int l)$/;"	f	file:	signature:(int unit, u_char *inpacket, int l)
upap_lowerdown	lwip/netif/ppp/pap.c	/^static void upap_lowerdown (int);$/;"	p	file:	signature:(int)
upap_lowerdown	lwip/netif/ppp/pap.c	/^static void upap_lowerdown(int unit)$/;"	f	file:	signature:(int unit)
upap_lowerup	lwip/netif/ppp/pap.c	/^static void upap_lowerup (int);$/;"	p	file:	signature:(int)
upap_lowerup	lwip/netif/ppp/pap.c	/^static void upap_lowerup(int unit)$/;"	f	file:	signature:(int unit)
upap_protrej	lwip/netif/ppp/pap.c	/^static void upap_protrej (int);$/;"	p	file:	signature:(int)
upap_protrej	lwip/netif/ppp/pap.c	/^static void upap_protrej(int unit)$/;"	f	file:	signature:(int unit)
upap_rauthack	lwip/netif/ppp/pap.c	/^static void upap_rauthack (upap_state *, u_char *, int, int);$/;"	p	file:	signature:(upap_state *, u_char *, int, int)
upap_rauthack	lwip/netif/ppp/pap.c	/^static void upap_rauthack($/;"	f	file:	signature:( upap_state *u, u_char *inp, int id, int len )
upap_rauthnak	lwip/netif/ppp/pap.c	/^static void upap_rauthnak (upap_state *, u_char *, int, int);$/;"	p	file:	signature:(upap_state *, u_char *, int, int)
upap_rauthnak	lwip/netif/ppp/pap.c	/^static void upap_rauthnak($/;"	f	file:	signature:( upap_state *u, u_char *inp, int id, int len )
upap_rauthreq	lwip/netif/ppp/pap.c	/^static void upap_rauthreq (upap_state *, u_char *, int, int);$/;"	p	file:	signature:(upap_state *, u_char *, int, int)
upap_rauthreq	lwip/netif/ppp/pap.c	/^static void upap_rauthreq($/;"	f	file:	signature:( upap_state *u, u_char *inp, int id, int len )
upap_reqtimeout	lwip/netif/ppp/pap.c	/^static void upap_reqtimeout (void *);$/;"	p	file:	signature:(void *)
upap_reqtimeout	lwip/netif/ppp/pap.c	/^static void upap_reqtimeout(void *arg)$/;"	f	file:	signature:(void *arg)
upap_sauthreq	lwip/netif/ppp/pap.c	/^static void upap_sauthreq (upap_state *);$/;"	p	file:	signature:(upap_state *)
upap_sauthreq	lwip/netif/ppp/pap.c	/^static void upap_sauthreq(upap_state *u)$/;"	f	file:	signature:(upap_state *u)
upap_setloginpasswd	lwip/netif/ppp/pap.c	/^void upap_setloginpasswd(int unit, const char *luser, const char *lpassword)$/;"	f	signature:(int unit, const char *luser, const char *lpassword)
upap_setloginpasswd	lwip/netif/ppp/pap.h	/^void upap_setloginpasswd(int unit, const char *luser, const char *lpassword);$/;"	p	signature:(int unit, const char *luser, const char *lpassword)
upap_sresp	lwip/netif/ppp/pap.c	/^static void upap_sresp (upap_state *, u_char, u_char, char *, int);$/;"	p	file:	signature:(upap_state *, u_char, u_char, char *, int)
upap_sresp	lwip/netif/ppp/pap.c	/^static void upap_sresp($/;"	f	file:	signature:( upap_state *u, u_char code, u_char id, char *msg, int msglen )
upap_state	lwip/netif/ppp/pap.h	/^typedef struct upap_state {$/;"	s
upap_state	lwip/netif/ppp/pap.h	/^} upap_state;$/;"	t	typeref:struct:upap_state
upap_state::us_clientstate	lwip/netif/ppp/pap.h	/^    int us_clientstate;		\/* Client state *\/$/;"	m	struct:upap_state	access:public
upap_state::us_id	lwip/netif/ppp/pap.h	/^    u_char us_id;			\/* Current id *\/$/;"	m	struct:upap_state	access:public
upap_state::us_maxtransmits	lwip/netif/ppp/pap.h	/^    int us_maxtransmits;	\/* Maximum number of auth-reqs to send *\/$/;"	m	struct:upap_state	access:public
upap_state::us_passwd	lwip/netif/ppp/pap.h	/^    const char *us_passwd;	\/* Password *\/$/;"	m	struct:upap_state	access:public
upap_state::us_passwdlen	lwip/netif/ppp/pap.h	/^    int us_passwdlen;		\/* Password length *\/$/;"	m	struct:upap_state	access:public
upap_state::us_reqtimeout	lwip/netif/ppp/pap.h	/^    int us_reqtimeout;		\/* Time to wait for auth-req from peer *\/$/;"	m	struct:upap_state	access:public
upap_state::us_serverstate	lwip/netif/ppp/pap.h	/^    int us_serverstate;		\/* Server state *\/$/;"	m	struct:upap_state	access:public
upap_state::us_timeouttime	lwip/netif/ppp/pap.h	/^    int us_timeouttime;		\/* Timeout (seconds) for auth-req retrans. *\/$/;"	m	struct:upap_state	access:public
upap_state::us_transmits	lwip/netif/ppp/pap.h	/^    int us_transmits;		\/* Number of auth-reqs sent *\/$/;"	m	struct:upap_state	access:public
upap_state::us_unit	lwip/netif/ppp/pap.h	/^    int us_unit;			\/* Interface unit number *\/$/;"	m	struct:upap_state	access:public
upap_state::us_user	lwip/netif/ppp/pap.h	/^    const char *us_user;	\/* User *\/$/;"	m	struct:upap_state	access:public
upap_state::us_userlen	lwip/netif/ppp/pap.h	/^    int us_userlen;			\/* User length *\/$/;"	m	struct:upap_state	access:public
upap_timeout	lwip/netif/ppp/pap.c	/^static void upap_timeout (void *);$/;"	p	file:	signature:(void *)
upap_timeout	lwip/netif/ppp/pap.c	/^static void upap_timeout(void *arg)$/;"	f	file:	signature:(void *arg)
update_arp_entry	lwip/netif/etharp.c	/^static struct pbuf *update_arp_entry(struct netif *netif, struct ip_addr *ipaddr, struct eth_addr *ethaddr, u8_t flags);$/;"	p	file:	signature:(struct netif *netif, struct ip_addr *ipaddr, struct eth_addr *ethaddr, u8_t flags)
update_arp_entry	lwip/netif/etharp.c	/^update_arp_entry(struct netif *netif, struct ip_addr *ipaddr, struct eth_addr *ethaddr, u8_t flags)$/;"	f	file:	signature:(struct netif *netif, struct ip_addr *ipaddr, struct eth_addr *ethaddr, u8_t flags)
upmsec	user.h	/^int upmsec(void);$/;"	p	signature:(void)
uptimetest	usertests.c	/^uptimetest(void)$/;"	f	signature:(void)
us_clientstate	lwip/netif/ppp/pap.h	/^    int us_clientstate;		\/* Client state *\/$/;"	m	struct:upap_state	access:public
us_id	lwip/netif/ppp/pap.h	/^    u_char us_id;			\/* Current id *\/$/;"	m	struct:upap_state	access:public
us_maxtransmits	lwip/netif/ppp/pap.h	/^    int us_maxtransmits;	\/* Maximum number of auth-reqs to send *\/$/;"	m	struct:upap_state	access:public
us_passwd	lwip/netif/ppp/pap.h	/^    const char *us_passwd;	\/* Password *\/$/;"	m	struct:upap_state	access:public
us_passwdlen	lwip/netif/ppp/pap.h	/^    int us_passwdlen;		\/* Password length *\/$/;"	m	struct:upap_state	access:public
us_reqtimeout	lwip/netif/ppp/pap.h	/^    int us_reqtimeout;		\/* Time to wait for auth-req from peer *\/$/;"	m	struct:upap_state	access:public
us_serverstate	lwip/netif/ppp/pap.h	/^    int us_serverstate;		\/* Server state *\/$/;"	m	struct:upap_state	access:public
us_timeouttime	lwip/netif/ppp/pap.h	/^    int us_timeouttime;		\/* Timeout (seconds) for auth-req retrans. *\/$/;"	m	struct:upap_state	access:public
us_transmits	lwip/netif/ppp/pap.h	/^    int us_transmits;		\/* Number of auth-reqs sent *\/$/;"	m	struct:upap_state	access:public
us_unit	lwip/netif/ppp/pap.h	/^    int us_unit;			\/* Interface unit number *\/$/;"	m	struct:upap_state	access:public
us_user	lwip/netif/ppp/pap.h	/^    const char *us_user;	\/* User *\/$/;"	m	struct:upap_state	access:public
us_userlen	lwip/netif/ppp/pap.h	/^    int us_userlen;			\/* User length *\/$/;"	m	struct:upap_state	access:public
use_console_lock	console.c	/^int use_console_lock = 0;$/;"	v
used	lwip/core/mem.c	/^  u16_t used;$/;"	m	struct:mem	file:	access:public
used	lwip/core/mem.c	/^  u32_t used;$/;"	m	struct:mem	file:	access:public
used	lwip/core/mem.c	/^  u64_t used;$/;"	m	struct:mem	file:	access:public
used	lwip/core/mem.c	/^  u8_t used;$/;"	m	struct:mem	file:	access:public
used	lwip/include/lwip/stats.h	/^  mem_size_t used;$/;"	m	struct:stats_mem	access:public
used	lwip/include/lwip/stats.h	/^  u16_t used;$/;"	m	struct:stats_pbuf	access:public
used	lwip/include/lwip/stats.h	/^  u16_t used;$/;"	m	struct:stats_syselem	access:public
usedblocks	mkfs.c	/^uint usedblocks;$/;"	v
usehostname	lwip/netif/ppp/ppp.h	/^	u_int  usehostname : 1;        \/* Use hostname for our_name *\/$/;"	m	struct:ppp_settings	access:public
usepeerdns	lwip/netif/ppp/ppp.h	/^	u_int  usepeerdns : 1;         \/* Ask peer for DNS adds *\/$/;"	m	struct:ppp_settings	access:public
user	lwip/netif/ppp/ppp.h	/^	char user[MAXNAMELEN + 1];\/* Username for PAP *\/$/;"	m	struct:ppp_settings	access:public
userinit	defs.h	/^void            userinit(void);$/;"	p	signature:(void)
userinit	proc.c	/^userinit(void)$/;"	f	signature:(void)
ushort	types.h	/^typedef unsigned short ushort;$/;"	t
v	lwip/include/ipv6/lwip/ip.h	/^  u8_t tclass1:4, v:4;$/;"	m	struct:ip_hdr	access:public
va	elf.h	/^  uint va;$/;"	m	struct:proghdr	access:public
val	sem.c	/^    int val;$/;"	m	struct:sem	file:	access:public
version	elf.h	/^  uint version;$/;"	m	struct:elfhdr	access:public
version	mp.h	/^  uchar version;                \/\/ I\/O APIC version$/;"	m	struct:mpioapic	access:public
version	mp.h	/^  uchar version;                \/\/ [14]$/;"	m	struct:mpconf	access:public
version	mp.h	/^  uchar version;                \/\/ local APIC verison$/;"	m	struct:mpproc	access:public
vjComp	lwip/netif/ppp/ppp.c	/^    struct vjcompress vjComp;           \/* Van Jabobsen compression header. *\/$/;"	m	struct:PPPControl_s	typeref:struct:PPPControl_s::vjcompress	file:	access:public
vjEnabled	lwip/netif/ppp/ppp.c	/^    int  vjEnabled;                     \/* Flag indicating VJ compression enabled. *\/$/;"	m	struct:PPPControl_s	file:	access:public
vj_compress_init	lwip/netif/ppp/vj.c	/^void vj_compress_init(struct vjcompress *comp)$/;"	f	signature:(struct vjcompress *comp)
vj_compress_init	lwip/netif/ppp/vj.h	/^extern void  vj_compress_init (struct vjcompress *comp);$/;"	p	signature:(struct vjcompress *comp)
vj_compress_tcp	lwip/netif/ppp/vj.c	/^u_int vj_compress_tcp($/;"	f	signature:( struct vjcompress *comp, struct pbuf *pb )
vj_compress_tcp	lwip/netif/ppp/vj.h	/^extern u_int vj_compress_tcp (struct vjcompress *comp, struct pbuf *pb);$/;"	p	signature:(struct vjcompress *comp, struct pbuf *pb)
vj_protocol	lwip/netif/ppp/ipcp.h	/^    u_short vj_protocol;		\/* protocol value to use in VJ option *\/$/;"	m	struct:ipcp_options	access:public
vj_uncompress_err	lwip/netif/ppp/vj.c	/^void vj_uncompress_err(struct vjcompress *comp)$/;"	f	signature:(struct vjcompress *comp)
vj_uncompress_err	lwip/netif/ppp/vj.h	/^extern void  vj_uncompress_err (struct vjcompress *comp);$/;"	p	signature:(struct vjcompress *comp)
vj_uncompress_tcp	lwip/netif/ppp/vj.c	/^int vj_uncompress_tcp($/;"	f	signature:( struct pbuf **nb, struct vjcompress *comp )
vj_uncompress_tcp	lwip/netif/ppp/vj.h	/^extern int vj_uncompress_tcp(struct pbuf **nb, struct vjcompress *comp);$/;"	p	signature:(struct pbuf **nb, struct vjcompress *comp)
vj_uncompress_uncomp	lwip/netif/ppp/vj.c	/^int vj_uncompress_uncomp($/;"	f	signature:( struct pbuf *nb, struct vjcompress *comp )
vj_uncompress_uncomp	lwip/netif/ppp/vj.h	/^extern int vj_uncompress_uncomp(struct pbuf *nb, struct vjcompress *comp);$/;"	p	signature:(struct pbuf *nb, struct vjcompress *comp)
vjcompress	lwip/netif/ppp/vj.h	/^struct vjcompress {$/;"	s
vjcompress::compressSlot	lwip/netif/ppp/vj.h	/^    u_char compressSlot;	\/* Flag indicating OK to compress slot ID. *\/$/;"	m	struct:vjcompress	access:public
vjcompress::flags	lwip/netif/ppp/vj.h	/^    u_short flags;$/;"	m	struct:vjcompress	access:public
vjcompress::last_cs	lwip/netif/ppp/vj.h	/^    struct cstate *last_cs;	\/* most recently used tstate *\/$/;"	m	struct:vjcompress	typeref:struct:vjcompress::cstate	access:public
vjcompress::last_recv	lwip/netif/ppp/vj.h	/^    u_char last_recv;		\/* last rcvd conn. id *\/$/;"	m	struct:vjcompress	access:public
vjcompress::last_xmit	lwip/netif/ppp/vj.h	/^    u_char last_xmit;		\/* last sent conn. id *\/$/;"	m	struct:vjcompress	access:public
vjcompress::maxSlotIndex	lwip/netif/ppp/vj.h	/^    u_char maxSlotIndex;$/;"	m	struct:vjcompress	access:public
vjcompress::rstate	lwip/netif/ppp/vj.h	/^    struct cstate rstate[MAX_SLOTS];	\/* receive connection states *\/$/;"	m	struct:vjcompress	typeref:struct:vjcompress::cstate	access:public
vjcompress::stats	lwip/netif/ppp/vj.h	/^    struct vjstat stats;$/;"	m	struct:vjcompress	typeref:struct:vjcompress::vjstat	access:public
vjcompress::tstate	lwip/netif/ppp/vj.h	/^    struct cstate tstate[MAX_SLOTS];	\/* xmit connection states *\/$/;"	m	struct:vjcompress	typeref:struct:vjcompress::cstate	access:public
vjcs_u	lwip/netif/ppp/vj.h	/^    } vjcs_u;$/;"	m	struct:cstate	typeref:union:cstate	access:public
vjs_compressed	lwip/netif/ppp/vj.h	/^    unsigned long vjs_compressed;		\/* outbound compressed packets *\/$/;"	m	struct:vjstat	access:public
vjs_compressedin	lwip/netif/ppp/vj.h	/^    unsigned long vjs_compressedin;		\/* inbound compressed packets *\/$/;"	m	struct:vjstat	access:public
vjs_errorin	lwip/netif/ppp/vj.h	/^    unsigned long vjs_errorin;			\/* inbound unknown type packets *\/$/;"	m	struct:vjstat	access:public
vjs_misses	lwip/netif/ppp/vj.h	/^    unsigned long vjs_misses;			\/* times couldn't find conn. state *\/$/;"	m	struct:vjstat	access:public
vjs_packets	lwip/netif/ppp/vj.h	/^    unsigned long vjs_packets;			\/* outbound packets *\/$/;"	m	struct:vjstat	access:public
vjs_searches	lwip/netif/ppp/vj.h	/^    unsigned long vjs_searches;			\/* searches for connection state *\/$/;"	m	struct:vjstat	access:public
vjs_tossed	lwip/netif/ppp/vj.h	/^    unsigned long vjs_tossed;			\/* inbound packets tossed because of error *\/$/;"	m	struct:vjstat	access:public
vjs_uncompressedin	lwip/netif/ppp/vj.h	/^    unsigned long vjs_uncompressedin;	\/* inbound uncompressed packets *\/$/;"	m	struct:vjstat	access:public
vjstat	lwip/netif/ppp/vj.h	/^struct vjstat {$/;"	s
vjstat::vjs_compressed	lwip/netif/ppp/vj.h	/^    unsigned long vjs_compressed;		\/* outbound compressed packets *\/$/;"	m	struct:vjstat	access:public
vjstat::vjs_compressedin	lwip/netif/ppp/vj.h	/^    unsigned long vjs_compressedin;		\/* inbound compressed packets *\/$/;"	m	struct:vjstat	access:public
vjstat::vjs_errorin	lwip/netif/ppp/vj.h	/^    unsigned long vjs_errorin;			\/* inbound unknown type packets *\/$/;"	m	struct:vjstat	access:public
vjstat::vjs_misses	lwip/netif/ppp/vj.h	/^    unsigned long vjs_misses;			\/* times couldn't find conn. state *\/$/;"	m	struct:vjstat	access:public
vjstat::vjs_packets	lwip/netif/ppp/vj.h	/^    unsigned long vjs_packets;			\/* outbound packets *\/$/;"	m	struct:vjstat	access:public
vjstat::vjs_searches	lwip/netif/ppp/vj.h	/^    unsigned long vjs_searches;			\/* searches for connection state *\/$/;"	m	struct:vjstat	access:public
vjstat::vjs_tossed	lwip/netif/ppp/vj.h	/^    unsigned long vjs_tossed;			\/* inbound packets tossed because of error *\/$/;"	m	struct:vjstat	access:public
vjstat::vjs_uncompressedin	lwip/netif/ppp/vj.h	/^    unsigned long vjs_uncompressedin;	\/* inbound uncompressed packets *\/$/;"	m	struct:vjstat	access:public
vpd_key0	pcireg.h	/^	uint8_t		vpd_key0;$/;"	m	struct:pci_vpd	access:public
vpd_key1	pcireg.h	/^	uint8_t		vpd_key1;$/;"	m	struct:pci_vpd	access:public
vpd_len	pcireg.h	/^	uint8_t		vpd_len;		\/* length of data only *\/$/;"	m	struct:pci_vpd	access:public
vpdres_byte0	pcireg.h	/^	uint8_t		vpdres_byte0;		\/* length of data + tag *\/$/;"	m	struct:pci_vpd_smallres	access:public
vpdres_byte0	pcireg.h	/^	uint8_t		vpdres_byte0;$/;"	m	struct:pci_vpd_largeres	access:public
vpdres_len_lsb	pcireg.h	/^	uint8_t		vpdres_len_lsb;		\/* length of data only *\/$/;"	m	struct:pci_vpd_largeres	access:public
vpdres_len_msb	pcireg.h	/^	uint8_t		vpdres_len_msb;$/;"	m	struct:pci_vpd_largeres	access:public
w	console.c	/^  int w;  \/\/ Write index$/;"	m	struct:__anon1	file:	access:public
w	lwip/include/lwip/api_msg.h	/^    } w;    $/;"	m	union:api_msg_msg	typeref:struct:api_msg_msg	access:public
wait	defs.h	/^int             wait(void);$/;"	p	signature:(void)
wait	proc.c	/^wait(void)$/;"	f	signature:(void)
wait	user.h	/^int wait(void);$/;"	p	signature:(void)
waitdisk	bootmain.c	/^waitdisk(void)$/;"	f	signature:(void)
waiters	sem.c	/^    int waiters;$/;"	m	struct:sem	file:	access:public
wakeup	defs.h	/^void            wakeup(void*);$/;"	p	signature:(void*)
wakeup	proc.c	/^wakeup(void *chan)$/;"	f	signature:(void *chan)
wakeup1	proc.c	/^wakeup1(void *chan)$/;"	f	file:	signature:(void *chan)
wakeup_one	defs.h	/^void            wakeup_one(void*);$/;"	p	signature:(void*)
wakeup_one	proc.c	/^wakeup_one(void *chan)$/;"	f	signature:(void *chan)
wakeup_one1	proc.c	/^wakeup_one1(void *chan)$/;"	f	file:	signature:(void *chan)
wc	wc.c	/^wc(int fd, char *name)$/;"	f	signature:(int fd, char *name)
whitespace	sh.c	/^char whitespace[] = " \\t\\r\\n\\v";$/;"	v
winode	mkfs.c	/^void winode(uint, struct dinode*);$/;"	p	file:	signature:(uint, struct dinode*)
winode	mkfs.c	/^winode(uint inum, struct dinode *ip)$/;"	f	signature:(uint inum, struct dinode *ip)
winsaddr	lwip/netif/ppp/ipcp.h	/^    u32_t winsaddr[2];		\/* Primary and secondary MS WINS entries *\/$/;"	m	struct:ipcp_options	access:public
word	e100.h	/^        uint16_t word;$/;"	m	union:op_transmit_cmd_cmd_tag	access:public
word	e100.h	/^    uint16_t word;$/;"	m	union:scb_command_word_tag	access:public
word	e100.h	/^    uint16_t word;$/;"	m	union:scb_status_word_tag	access:public
word	lwip/netif/ppp/auth.c	/^    char        word[1];$/;"	m	struct:wordlist	file:	access:public
wordlist	lwip/netif/ppp/auth.c	/^struct wordlist {$/;"	s	file:
wordlist::next	lwip/netif/ppp/auth.c	/^    struct wordlist *next;$/;"	m	struct:wordlist	typeref:struct:wordlist::wordlist	file:	access:public
wordlist::word	lwip/netif/ppp/auth.c	/^    char        word[1];$/;"	m	struct:wordlist	file:	access:public
writable	file.h	/^  char writable;$/;"	m	struct:file	access:public
write	dev.h	/^  int (*write)(struct inode*, char*, int);$/;"	m	struct:devsw	access:public
write	lwip/include/lwip/sockets.h	/^#define write(/;"	d
write	user.h	/^int write(int, void*, int);$/;"	p	signature:(int, void*, int)
write_eflags	x86.h	/^write_eflags(uint eflags)$/;"	f	signature:(uint eflags)
writei	defs.h	/^int             writei(struct inode*, char*, uint, uint);$/;"	p	signature:(struct inode*, char*, uint, uint)
writei	fs.c	/^writei(struct inode *ip, char *src, uint off, uint n)$/;"	f	signature:(struct inode *ip, char *src, uint off, uint n)
writeopen	pipe.c	/^  int writeopen;  \/\/ write fd is still open$/;"	m	struct:pipe	file:	access:public
writep	pipe.c	/^  int writep;     \/\/ next index to write$/;"	m	struct:pipe	file:	access:public
writeset	lwip/api/sockets.c	/^    fd_set *writeset;$/;"	m	struct:lwip_select_cb	file:	access:public
writetest	usertests.c	/^writetest(void)$/;"	f	signature:(void)
writetest1	usertests.c	/^writetest1(void)$/;"	f	signature:(void)
wsect	mkfs.c	/^void wsect(uint, void*);$/;"	p	file:	signature:(uint, void*)
wsect	mkfs.c	/^wsect(uint sec, void *buf)$/;"	f	signature:(uint sec, void *buf)
x	e100.h	/^            char x :        1;$/;"	m	struct:command_block_tag	access:public
x	umalloc.c	/^  Align x;$/;"	m	union:header	file:	access:public
xchecksum	mp.h	/^  uchar xchecksum;              \/\/ extended table checksum$/;"	m	struct:mpconf	access:public
xid	lwip/core/dhcp.c	/^static u32_t xid = 0xABCD0000;$/;"	v	file:
xid	lwip/include/lwip/dhcp.h	/^  u32_t xid;$/;"	m	struct:dhcp	access:public
xint	mkfs.c	/^xint(uint x)$/;"	f	signature:(uint x)
xlength	mp.h	/^  ushort xlength;               \/\/ extended table length$/;"	m	struct:mpconf	access:public
xmit	lwip/include/lwip/stats.h	/^  u16_t xmit;    \/* Transmitted packets. *\/$/;"	m	struct:stats_proto	access:public
xmit_accm	lwip/netif/ppp/lcp.c	/^ext_accm xmit_accm[NUM_PPP];			\/* extended transmit ACCM *\/$/;"	v
xmit_idle	lwip/netif/ppp/ppp.h	/^    u_short xmit_idle;      \/* seconds since last NP packet sent *\/$/;"	m	struct:ppp_idle	access:public
xshort	mkfs.c	/^xshort(ushort x)$/;"	f	signature:(ushort x)
yield	defs.h	/^void            yield(void);$/;"	p	signature:(void)
yield	proc.c	/^yield(void)$/;"	f	signature:(void)
zero	e100.h	/^    char zero : 2;$/;"	m	struct:scb_status_word	access:public
zeroes	mkfs.c	/^char zeroes[512];$/;"	v
